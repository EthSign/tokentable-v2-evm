{
  "address": "0x759ac3CA33FeeAfB8C41aEbC8687A7Bd849Fc87a",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "deltaAmountClaimable",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountDeposited",
          "type": "uint256"
        }
      ],
      "name": "InsufficientDeposit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPresetFormat",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSkipAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotPermissioned",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PresetDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PresetExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokenSet",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "actualId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountUnlockedLeftover",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountRefunded",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "refundFounderAddress",
          "type": "address"
        }
      ],
      "name": "ActualCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "presetId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "actualId",
          "type": "uint256"
        }
      ],
      "name": "ActualCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "presetId",
          "type": "bytes32"
        }
      ],
      "name": "PresetCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "actualId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokensClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "actualId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokensDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "actualId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokensWithdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BIPS_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accessControlDelegate",
      "outputs": [
        {
          "internalType": "contract ITTAccessControlDelegate",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "amountUnlockedLeftoverForActuals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "actualId",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "overrideRecipient",
          "type": "address[]"
        }
      ],
      "name": "batchClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "recipient",
          "type": "address[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "presetId",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "startTimestampAbsolute",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amountSkipped",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "totalAmount",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amountDepositingNow",
          "type": "uint256[]"
        }
      ],
      "name": "batchCreateActual",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "presetId",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256[][]",
          "name": "linearStartTimestampsRelative",
          "type": "uint256[][]"
        },
        {
          "internalType": "uint256[]",
          "name": "linearEndTimestampRelative",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[][]",
          "name": "linearBips",
          "type": "uint256[][]"
        },
        {
          "internalType": "uint256[][]",
          "name": "numOfUnlocksForEachLinear",
          "type": "uint256[][]"
        }
      ],
      "name": "batchCreatePreset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "actualId",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amount",
          "type": "uint256[]"
        }
      ],
      "name": "batchDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "actualId",
          "type": "uint256"
        }
      ],
      "name": "calculateAmountClaimable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "deltaAmountClaimable",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "updatedAmountClaimed",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "actualId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "refundFounderAddress",
          "type": "address"
        }
      ],
      "name": "cancel",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountUnlockedLeftover",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountRefunded",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "actualId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "overrideRecipient",
          "type": "address"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "actualId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "overrideRecipient",
          "type": "address"
        }
      ],
      "name": "claimCancelledActual",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "presetId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "startTimestampAbsolute",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountSkipped",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountDepositingNow",
          "type": "uint256"
        }
      ],
      "name": "createActual",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "presetId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "linearStartTimestampsRelative",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "linearEndTimestampRelative",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "linearBips",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "numOfUnlocksForEachLinear",
          "type": "uint256[]"
        }
      ],
      "name": "createPreset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deployer",
      "outputs": [
        {
          "internalType": "contract ITTUDeployer",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "actualId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disableAccessControlDelegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disableCancel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disableHook",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "futureToken",
      "outputs": [
        {
          "internalType": "contract ITTFutureTokenV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "presetId",
          "type": "bytes32"
        }
      ],
      "name": "getEncodedPreset",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getProjectToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hook",
      "outputs": [
        {
          "internalType": "contract ITTHook",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "projectToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "futureToken_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "deployer_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "projectToken",
          "type": "address"
        }
      ],
      "name": "initializeProjectToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isAccessControllable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isCancelable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isHookable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "accessControlDelegate_",
          "type": "address"
        }
      ],
      "name": "setAccessControlDelegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "hook_",
          "type": "address"
        }
      ],
      "name": "setHook",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "unlockingScheduleActuals",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "presetId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "startTimestampAbsolute",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountClaimed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountDeposited",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "actualId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa58cb57921d749ae0d9b6fb854bbb26ff6be6f456ede127cd275445c6b7a1709",
  "receipt": {
    "to": null,
    "from": "0x55D22d83752a9bE59B8959f97FCf3b2CAbca5094",
    "contractAddress": "0x759ac3CA33FeeAfB8C41aEbC8687A7Bd849Fc87a",
    "transactionIndex": 29,
    "gasUsed": "2927958",
    "logsBloom": "0x
    "blockHash": "0xa4f7abb3e0a411e615162a78a11eab7d48d26c465e928d88cb9e231cb1ea0522",
    "transactionHash": "0xa58cb57921d749ae0d9b6fb854bbb26ff6be6f456ede127cd275445c6b7a1709",
    "logs": [
      {
        "transactionIndex": 29,
        "blockNumber": 18418800,
        "transactionHash": "0xa58cb57921d749ae0d9b6fb854bbb26ff6be6f456ede127cd275445c6b7a1709",
        "address": "0x759ac3CA33FeeAfB8C41aEbC8687A7Bd849Fc87a",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 54,
        "blockHash": "0xa4f7abb3e0a411e615162a78a11eab7d48d26c465e928d88cb9e231cb1ea0522"
      }
    ],
    "blockNumber": 18418800,
    "cumulativeGasUsed": "5253718",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "1133705dfb9c4732ed6ca7b34882e862",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deltaAmountClaimable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountDeposited\",\"type\":\"uint256\"}],\"name\":\"InsufficientDeposit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPresetFormat\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSkipAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotPermissioned\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PresetDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PresetExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenSet\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"actualId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountUnlockedLeftover\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountRefunded\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"refundFounderAddress\",\"type\":\"address\"}],\"name\":\"ActualCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"presetId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"actualId\",\"type\":\"uint256\"}],\"name\":\"ActualCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"presetId\",\"type\":\"bytes32\"}],\"name\":\"PresetCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"actualId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"actualId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"actualId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensWithdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BIPS_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accessControlDelegate\",\"outputs\":[{\"internalType\":\"contract ITTAccessControlDelegate\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"amountUnlockedLeftoverForActuals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"actualId\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"overrideRecipient\",\"type\":\"address[]\"}],\"name\":\"batchClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipient\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"presetId\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"startTimestampAbsolute\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountSkipped\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"totalAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountDepositingNow\",\"type\":\"uint256[]\"}],\"name\":\"batchCreateActual\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"presetId\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"linearStartTimestampsRelative\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint256[]\",\"name\":\"linearEndTimestampRelative\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"linearBips\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint256[][]\",\"name\":\"numOfUnlocksForEachLinear\",\"type\":\"uint256[][]\"}],\"name\":\"batchCreatePreset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"actualId\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"batchDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"actualId\",\"type\":\"uint256\"}],\"name\":\"calculateAmountClaimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"deltaAmountClaimable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAmountClaimed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"actualId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"refundFounderAddress\",\"type\":\"address\"}],\"name\":\"cancel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountUnlockedLeftover\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountRefunded\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"actualId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"overrideRecipient\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"actualId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"overrideRecipient\",\"type\":\"address\"}],\"name\":\"claimCancelledActual\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"presetId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"startTimestampAbsolute\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountSkipped\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountDepositingNow\",\"type\":\"uint256\"}],\"name\":\"createActual\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"presetId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"linearStartTimestampsRelative\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"linearEndTimestampRelative\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"linearBips\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"numOfUnlocksForEachLinear\",\"type\":\"uint256[]\"}],\"name\":\"createPreset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployer\",\"outputs\":[{\"internalType\":\"contract ITTUDeployer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"actualId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableAccessControlDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableCancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableHook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"futureToken\",\"outputs\":[{\"internalType\":\"contract ITTFutureTokenV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"presetId\",\"type\":\"bytes32\"}],\"name\":\"getEncodedPreset\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProjectToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hook\",\"outputs\":[{\"internalType\":\"contract ITTHook\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"projectToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"futureToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"deployer_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"projectToken\",\"type\":\"address\"}],\"name\":\"initializeProjectToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAccessControllable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isCancelable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isHookable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"accessControlDelegate_\",\"type\":\"address\"}],\"name\":\"setAccessControlDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hook_\",\"type\":\"address\"}],\"name\":\"setHook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"unlockingScheduleActuals\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"presetId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"startTimestampAbsolute\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountDeposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"actualId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"calculateAmountClaimable(uint256)\":{\"details\":\"This is the most complex part of the smart contract. Quite a bit of calculations are performed here.\",\"params\":{\"actualId\":\"The ID of the actual unlocking schedule that we are working with.\"},\"returns\":{\"deltaAmountClaimable\":\"Amount of tokens claimable right now.\",\"updatedAmountClaimed\":\"New total amount of tokens claimed. This is the sum of all previously claimed tokens and deltaAmountClaimable.\"}},\"cancel(uint256,address)\":{\"details\":\"Emits: ActualCancelled. - Only callable by the owner if no access control delegate is set. If delegate is set, access by anyone other than the owner depends on the return value of the delegate.\",\"params\":{\"actualId\":\"The ID of the actual unlocking schedule that we are intending to cancel.\",\"refundFounderAddress\":\"The address that the locked tokens will be sent to. This does not have to be a founder's address. Using the zero address means withdraw to sender's address.\"}},\"claim(uint256,address)\":{\"details\":\"Emits: TokensClaimed. - Only callable by the owner of the FutureToken if no access control delegate is set. If delegate is set, access by anyone other than the FutureToken owner depends on the return value of the delegate.\",\"params\":{\"actualId\":\"The ID of the actual unlocking schedule that we are intending to claim from.\",\"overrideRecipient\":\"If we want to send the claimed tokens to an address other than the owner of the FutureToken. This MUST pass through access control, otherwise it will revert. If we want to send the claimed tokens to the owner of the FutureToken (default behavior), pass in `ethers.constants.AddressZero`.\"}},\"claimCancelledActual(uint256,address)\":{\"details\":\"Emits: TokensClaimed. - Only callable by the owner of the FutureToken if no access control delegate is set. If delegate is set, access by anyone other than the FutureToken owner depends on the return value of the delegate.\",\"params\":{\"actualId\":\"The ID of the actual unlocking schedule that we are intending to claim from.\",\"overrideRecipient\":\"If we want to send the claimed tokens to an address other than the owner of the FutureToken. This MUST pass through access control, otherwise it will revert. If we want to send the claimed tokens to the owner of the FutureToken (default behavior), pass in `ethers.constants.AddressZero`.\"}},\"createActual(address,bytes32,uint256,uint256,uint256,uint256)\":{\"details\":\"Emits: ActualCreated, TokensDeposited (only if amountDepositingNow > 0). - A FutureToken is minted in the process w/ tokenId == actualId; - If amountDepositingNow > 0, the caller must call approve() on the project token first so safeTransfer() does not revert - There is no minimum deposit - Only callable by the owner if no access control delegate is set. If delegate is set, access by anyone other than the owner depends on the return value of the delegate.\",\"params\":{\"amountDepositingNow\":\"You can deposit some amount of tokens when creating the actual schedule for convenience. If the amount deposited is insufficient when the stakeholder attempts to claim, the transaction will revert.\",\"amountSkipped\":\"If the project is being transferred into TokenTable from a different platform, we can skip over what's already been unlocked to keep the progress consistent.\",\"presetId\":\"The ID of the preset we are trying to create. This is determined off-chain and it can be anything that doesn't exist yet.\",\"recipient\":\"The address of the stakeholder. A FutureToken will be minted to that address.\",\"startTimestampAbsolute\":\"When the unlocking schedule should start in UNIX epoch timestamp (seconds). Cannot be in the past.\",\"totalAmount\":\"The total amount of tokens to be unlocked.\"}},\"createPreset(bytes32,uint256[],uint256,uint256[],uint256[])\":{\"details\":\"Emits: PresetCreated. - Only callable by the owner if no access control delegate is set. If delegate is set, access by anyone other than the owner depends on the return value of the delegate.\",\"params\":{\"linearBips\":\"Basis points (percentage of the total amount unlocked) for each linear period. This must add up to BIPS_PRECISION.\",\"linearEndTimestampRelative\":\"The relative end timestamp of the entire linear unlocking schedule.\",\"linearStartTimestampsRelative\":\"The relative start timestamps of linear periods.\",\"numOfUnlocksForEachLinear\":\"The number of unlocks for each linear unlocking period. The minimum value is 1 (unchecked).\",\"presetId\":\"The ID of the preset we are trying to create. This is determined off-chain and it can be anything that doesn't exist yet.\"}},\"deposit(uint256,uint256)\":{\"details\":\"Emits: TokensDeposited. - The caller must call approve() on the project token first so safeTransfer() does not revert. - There is no minimum deposit. - Only callable by the owner if no access control delegate is set. If delegate is set, access by anyone other than the owner depends on the return value of the delegate.\",\"params\":{\"actualId\":\"The ID of the actual unlocking schedule that we are intending to deposit into.\",\"amount\":\"The amount of project tokens to be deposited.\"}},\"getEncodedPreset(bytes32)\":{\"details\":\"To decode in JS, use:  ethers.utils.defaultAbiCoder.decode(      ['uint256[]', 'uint256', 'uint256[]', 'uint256[]'],      encodedPreset  )\",\"params\":{\"presetId\":\"The ID of the preset we are trying to read.\"}},\"initialize(address,address,address)\":{\"details\":\"Exposing the initializer.\"},\"setAccessControlDelegate(address)\":{\"details\":\"Only callable by the owner.\"},\"withdrawDeposit(uint256,uint256)\":{\"details\":\"Emits: TokensWithdrawn. - Only callable by the owner if no access control delegate is set. If delegate is set, access by anyone other than the owner depends on the return value of the delegate.\",\"params\":{\"actualId\":\"The ID of the actual unlocking schedule that we are intending to withdraw from.\",\"amount\":\"The amount of project tokens to be withdrawn.\"}}},\"stateVariables\":{\"isAccessControllable\":{\"details\":\"Exposes the public variable.\"},\"isCancelable\":{\"details\":\"Exposes the public variable.\"},\"isHookable\":{\"details\":\"Exposes the public variable.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"calculateAmountClaimable(uint256)\":{\"notice\":\"Calculates the amount of unlocked tokens that have yet to be claimed in an actual unlocking schedule.\"},\"cancel(uint256,address)\":{\"notice\":\"Cancels an actual unlocking schedule effective immediately. Tokens not yet claimed but already unlocked will be tallied.\"},\"claim(uint256,address)\":{\"notice\":\"Claims claimable tokens for the specified actualId. If the caller is the owner of the actualId or has permission, then the tokens can be claimed to a different address (as specified in args)\"},\"claimCancelledActual(uint256,address)\":{\"notice\":\"Claims claimable tokens for the specified CANCELLED actualId. If the caller is the owner of the actualId or has permission, then the tokens can be claimed to a different address (as specified in args)\"},\"createActual(address,bytes32,uint256,uint256,uint256,uint256)\":{\"notice\":\"Creates an actual unlocking schedule based on a preset.\"},\"createPreset(bytes32,uint256[],uint256,uint256[],uint256[])\":{\"notice\":\"Creates an unlocking schedule preset template.\"},\"deposit(uint256,uint256)\":{\"notice\":\"Makes a deposit into an actual unlocking schedule.\"},\"disableAccessControlDelegate()\":{\"notice\":\"Permanently disables the access control delegate.\"},\"disableCancel()\":{\"notice\":\"Permanently disables the cancel() function.\"},\"disableHook()\":{\"notice\":\"Permanently disables the hook.\"},\"getEncodedPreset(bytes32)\":{\"notice\":\"Returns an ABI-encoded preset, as nested objects cannot be returned directly in Solidity.\"},\"setAccessControlDelegate(address)\":{\"notice\":\"Sets the access control delegate used to control claim behavior.\"},\"withdrawDeposit(uint256,uint256)\":{\"notice\":\"Withdraws existing locked deposit from an actual schedule.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/TokenTableUnlockerV2.sol\":\"TokenTableUnlockerV2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2b3005a0064cfc558bdf64b2bae94b565f4574a536aadd61c13838d4f2157790\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"contracts/core/TTFutureTokenV2.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport {ITTFutureTokenV2} from \\\"../interfaces/ITTFutureTokenV2.sol\\\";\\nimport {IERC721AUpgradeable} from \\\"erc721a-upgradeable/contracts/interfaces/IERC721AQueryableUpgradeable.sol\\\";\\nimport {ERC721AQueryableUpgradeable, ERC721AUpgradeable} from \\\"erc721a-upgradeable/contracts/extensions/ERC721AQueryableUpgradeable.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {ITokenTableUnlockerV2} from \\\"../interfaces/ITokenTableUnlockerV2.sol\\\";\\n\\n/**\\n * @title TTFutureTokenV2\\n * @author Jack Xu @ EthSign\\n * @dev This is a redemption NFT minted to the stakeholder whenever an actual\\n * unlocking schedule is created by a founder. The holder of a future token\\n * can use it to claim unlocked tokens. A single instance of future token\\n * corresponds to a single instance of unlocker. This token is transferrable.\\n * The ID of this NFT is the ID of the actual unlocking schedule. The current\\n * claimable amount can be determined by calling\\n * TokenTableUnlockerV2.calculateAmountClaimable(uint256 actualId)\\n */\\ncontract TTFutureTokenV2 is ITTFutureTokenV2, ERC721AQueryableUpgradeable {\\n    address public authorizedMinter;\\n    bool public allowTransfer;\\n\\n    error Unauthorized();\\n\\n    constructor() {\\n        _dummyInitialize();\\n    }\\n\\n    function _dummyInitialize() internal initializerERC721A {}\\n\\n    function initialize(\\n        address projectToken,\\n        bool allowTransfer_\\n    ) external override initializerERC721A {\\n        __ERC721A_init_unchained(\\n            string.concat(\\\"Future \\\", IERC20Metadata(projectToken).name()),\\n            string.concat(\\\"FT-\\\", IERC20Metadata(projectToken).symbol())\\n        );\\n        allowTransfer = allowTransfer_;\\n    }\\n\\n    /**\\n     * @notice Sets who is authorized to mint future tokens.\\n     * @dev This function can only be called once. It is called automatically\\n     * when deployed using TTUDeployer. The authorized minter is usually the\\n     * unlocker contract.\\n     */\\n    // solhint-disable-next-line ordering\\n    function setAuthorizedMinterSingleUse(\\n        address authorizedMinter_\\n    ) external override {\\n        if (authorizedMinter != address(0)) revert Unauthorized();\\n        authorizedMinter = authorizedMinter_;\\n    }\\n\\n    /**\\n     * @notice Mints a future token to an address.\\n     * @dev This function can only be called by the authorized minter. A future\\n     * token with tokenId == actualId is minted.\\n     */\\n    function safeMint(address to) external override returns (uint256 tokenId) {\\n        if (msg.sender != authorizedMinter) revert Unauthorized();\\n        tokenId = _nextTokenId();\\n        _safeMint(to, 1);\\n    }\\n\\n    /**\\n     * @dev Add a transfer lock\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public payable virtual override(ERC721AUpgradeable, IERC721AUpgradeable) {\\n        if (!allowTransfer) revert Unauthorized();\\n        super.transferFrom(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Add a transfer lock\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public payable virtual override(ERC721AUpgradeable, IERC721AUpgradeable) {\\n        if (!allowTransfer) revert Unauthorized();\\n        super.safeTransferFrom(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @notice Returns claim info for a given tokenId/actualId\\n     * @dev We assume the authorized minter is an instance of TTUV2.\\n     * @param tokenId The actual ID created in TTUV2.\\n     * @return deltaAmountClaimable The amount of tokens claimable as of now.\\n     * @return amountAlreadyClaimed The amount of tokens claimed as of now.\\n     */\\n    function getClaimInfo(\\n        uint256 tokenId\\n    )\\n        external\\n        view\\n        override\\n        returns (\\n            uint256 deltaAmountClaimable,\\n            uint256 amountAlreadyClaimed,\\n            bool isCancelable\\n        )\\n    {\\n        (\\n            uint256 deltaAmountClaimable_,\\n            uint256 updatedAmountClaimed_\\n        ) = ITokenTableUnlockerV2(authorizedMinter).calculateAmountClaimable(\\n                tokenId\\n            );\\n        deltaAmountClaimable = deltaAmountClaimable_;\\n        amountAlreadyClaimed = updatedAmountClaimed_ - deltaAmountClaimable_;\\n        isCancelable = ITokenTableUnlockerV2(authorizedMinter).isCancelable();\\n    }\\n}\\n\",\"keccak256\":\"0xbbbe7a6031782e654eee952aa992e9c0f1dad8e26dcb43996e74adc6f7a2926c\",\"license\":\"UNLICENSED\"},\"contracts/core/TTUProjectTokenStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\ncontract TTUProjectTokenStorage is Initializable {\\n    address private _projectToken;\\n\\n    error TokenSet();\\n\\n    function initializeProjectToken(address projectToken) public {\\n        if (_projectToken != address(0)) revert TokenSet();\\n        _projectToken = projectToken;\\n    }\\n\\n    function getProjectToken() public view returns (address) {\\n        return _projectToken;\\n    }\\n\\n    function _initializeSE(address projectToken) internal onlyInitializing {\\n        _projectToken = projectToken;\\n    }\\n}\\n\",\"keccak256\":\"0xee171b8836d31d99c4a0faa73a7feb734eeb9c6045c24f17ef4cf3d2757bcfa8\",\"license\":\"UNLICENSED\"},\"contracts/core/TokenTableUnlockerV2.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {UnlockingScheduleActual, UnlockingSchedulePreset} from \\\"../interfaces/TokenTableUnlockerV2DataModels.sol\\\";\\nimport {ITokenTableUnlockerV2, IOwnable} from \\\"../interfaces/ITokenTableUnlockerV2.sol\\\";\\nimport {ITTAccessControlDelegate} from \\\"../interfaces/ITTAccessControlDelegate.sol\\\";\\nimport {ITTHook} from \\\"../interfaces/ITTHook.sol\\\";\\nimport {ITTFutureTokenV2} from \\\"./TTFutureTokenV2.sol\\\";\\nimport {TTUProjectTokenStorage} from \\\"./TTUProjectTokenStorage.sol\\\";\\nimport {ITTUDeployer} from \\\"../interfaces/ITTUDeployer.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {ReentrancyGuardUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\ncontract TokenTableUnlockerV2 is\\n    OwnableUpgradeable,\\n    TTUProjectTokenStorage,\\n    ITokenTableUnlockerV2,\\n    ReentrancyGuardUpgradeable\\n{\\n    using SafeERC20 for IERC20;\\n\\n    uint256 public constant BIPS_PRECISION = 10 ** 4; // down to 0.01%\\n\\n    ITTUDeployer public deployer;\\n    ITTFutureTokenV2 public futureToken;\\n    ITTAccessControlDelegate public accessControlDelegate;\\n    ITTHook public hook;\\n    bool public override isCancelable;\\n    bool public override isAccessControllable;\\n    bool public override isHookable;\\n\\n    mapping(bytes32 => UnlockingSchedulePreset)\\n        internal _unlockingSchedulePresets;\\n    mapping(uint256 => UnlockingScheduleActual) public unlockingScheduleActuals;\\n    mapping(uint256 => uint256) public amountUnlockedLeftoverForActuals;\\n\\n    constructor() {\\n        _disableInitializers(); // This will cause test cases to fail, comment when unit testing\\n    }\\n\\n    function initialize(\\n        address projectToken,\\n        address futureToken_,\\n        address deployer_\\n    ) external override initializer {\\n        __Ownable_init_unchained();\\n        _initializeSE(projectToken);\\n        futureToken = ITTFutureTokenV2(futureToken_);\\n        deployer = ITTUDeployer(deployer_);\\n        __ReentrancyGuard_init_unchained();\\n        isCancelable = true;\\n        isAccessControllable = true;\\n        isHookable = true;\\n    }\\n\\n    // solhint-disable-next-line ordering\\n    function createPreset(\\n        bytes32 presetId,\\n        uint256[] calldata linearStartTimestampsRelative,\\n        uint256 linearEndTimestampRelative,\\n        uint256[] calldata linearBips,\\n        uint256[] calldata numOfUnlocksForEachLinear\\n    ) external virtual override {\\n        _checkAccessControl(\\n            TokenTableUnlockerV2.createPreset.selector,\\n            \\\"\\\",\\n            _msgSender(),\\n            true\\n        );\\n        _createPreset(\\n            presetId,\\n            linearStartTimestampsRelative,\\n            linearEndTimestampRelative,\\n            linearBips,\\n            numOfUnlocksForEachLinear\\n        );\\n        _callHook(TokenTableUnlockerV2.createPreset.selector, msg.data);\\n    }\\n\\n    function batchCreatePreset(\\n        bytes32[] calldata presetId,\\n        uint256[][] calldata linearStartTimestampsRelative,\\n        uint256[] calldata linearEndTimestampRelative,\\n        uint256[][] calldata linearBips,\\n        uint256[][] memory numOfUnlocksForEachLinear\\n    ) external virtual override {\\n        _checkAccessControl(\\n            TokenTableUnlockerV2.batchCreatePreset.selector,\\n            \\\"\\\",\\n            _msgSender(),\\n            true\\n        );\\n        for (uint256 i = 0; i < presetId.length; i++) {\\n            _createPreset(\\n                presetId[i],\\n                linearStartTimestampsRelative[i],\\n                linearEndTimestampRelative[i],\\n                linearBips[i],\\n                numOfUnlocksForEachLinear[i]\\n            );\\n        }\\n        _callHook(TokenTableUnlockerV2.batchCreatePreset.selector, msg.data);\\n    }\\n\\n    function createActual(\\n        address recipient,\\n        bytes32 presetId,\\n        uint256 startTimestampAbsolute,\\n        uint256 amountSkipped,\\n        uint256 totalAmount,\\n        uint256 amountDepositingNow\\n    ) external virtual override {\\n        _checkAccessControl(\\n            TokenTableUnlockerV2.createActual.selector,\\n            \\\"\\\",\\n            _msgSender(),\\n            true\\n        );\\n        _createActual(\\n            recipient,\\n            presetId,\\n            startTimestampAbsolute,\\n            amountSkipped,\\n            totalAmount,\\n            amountDepositingNow\\n        );\\n        _callHook(TokenTableUnlockerV2.createActual.selector, msg.data);\\n    }\\n\\n    function batchCreateActual(\\n        address[] calldata recipient,\\n        bytes32[] calldata presetId,\\n        uint256[] calldata startTimestampAbsolute,\\n        uint256[] calldata amountSkipped,\\n        uint256[] calldata totalAmount,\\n        uint256[] memory amountDepositingNow\\n    ) external virtual override {\\n        _checkAccessControl(\\n            TokenTableUnlockerV2.batchCreateActual.selector,\\n            \\\"\\\",\\n            _msgSender(),\\n            true\\n        );\\n        for (uint256 i = 0; i < presetId.length; i++) {\\n            _createActual(\\n                recipient[i],\\n                presetId[i],\\n                startTimestampAbsolute[i],\\n                amountSkipped[i],\\n                totalAmount[i],\\n                amountDepositingNow[i]\\n            );\\n        }\\n        _callHook(TokenTableUnlockerV2.batchCreateActual.selector, msg.data);\\n    }\\n\\n    function deposit(\\n        uint256 actualId,\\n        uint256 amount\\n    ) external virtual override {\\n        _checkAccessControl(\\n            TokenTableUnlockerV2.deposit.selector,\\n            abi.encode(actualId, amount),\\n            _msgSender(),\\n            true\\n        );\\n        _deposit(actualId, amount);\\n        _callHook(TokenTableUnlockerV2.deposit.selector, msg.data);\\n    }\\n\\n    function batchDeposit(\\n        uint256[] calldata actualId,\\n        uint256[] calldata amount\\n    ) external virtual override {\\n        _checkAccessControl(\\n            TokenTableUnlockerV2.batchDeposit.selector,\\n            abi.encode(actualId, amount),\\n            _msgSender(),\\n            true\\n        );\\n        for (uint256 i = 0; i < actualId.length; i++) {\\n            _deposit(actualId[i], amount[i]);\\n        }\\n        _callHook(TokenTableUnlockerV2.batchDeposit.selector, msg.data);\\n    }\\n\\n    function withdrawDeposit(\\n        uint256 actualId,\\n        uint256 amount\\n    ) external virtual override {\\n        _checkAccessControl(\\n            TokenTableUnlockerV2.withdrawDeposit.selector,\\n            abi.encode(actualId, amount),\\n            _msgSender(),\\n            true\\n        );\\n        UnlockingScheduleActual storage actual = unlockingScheduleActuals[\\n            actualId\\n        ];\\n        actual.amountDeposited -= amount;\\n        IERC20(getProjectToken()).safeTransfer(_msgSender(), amount);\\n        emit TokensWithdrawn(actualId, _msgSender(), amount);\\n        _callHook(TokenTableUnlockerV2.withdrawDeposit.selector, msg.data);\\n    }\\n\\n    function claim(\\n        uint256 actualId,\\n        address overrideRecipient\\n    ) external virtual override nonReentrant {\\n        _checkAccessControl(\\n            TokenTableUnlockerV2.claim.selector,\\n            abi.encode(actualId, overrideRecipient),\\n            _msgSender(),\\n            false\\n        );\\n        _claim(actualId, overrideRecipient);\\n        _callHook(TokenTableUnlockerV2.claim.selector, msg.data);\\n    }\\n\\n    function batchClaim(\\n        uint256[] calldata actualId,\\n        address[] calldata overrideRecipient\\n    ) external virtual override nonReentrant {\\n        _checkAccessControl(\\n            TokenTableUnlockerV2.batchClaim.selector,\\n            abi.encode(actualId, overrideRecipient),\\n            _msgSender(),\\n            false\\n        );\\n        for (uint256 i = 0; i < actualId.length; i++) {\\n            _claim(actualId[i], overrideRecipient[i]);\\n        }\\n        _callHook(TokenTableUnlockerV2.batchClaim.selector, msg.data);\\n    }\\n\\n    function claimCancelledActual(\\n        uint256 actualId,\\n        address overrideRecipient\\n    ) external virtual override nonReentrant {\\n        _checkAccessControl(\\n            TokenTableUnlockerV2.claimCancelledActual.selector,\\n            abi.encode(actualId, overrideRecipient),\\n            _msgSender(),\\n            false\\n        );\\n        address recipient;\\n        if (overrideRecipient == address(0))\\n            recipient = futureToken.ownerOf(actualId);\\n        else recipient = overrideRecipient;\\n        uint256 amountClaimable = amountUnlockedLeftoverForActuals[actualId];\\n        amountUnlockedLeftoverForActuals[actualId] = 0;\\n        IERC20(getProjectToken()).safeTransfer(recipient, amountClaimable);\\n        emit TokensClaimed(actualId, _msgSender(), recipient, amountClaimable);\\n        _callHook(TokenTableUnlockerV2.claimCancelledActual.selector, msg.data);\\n    }\\n\\n    function cancel(\\n        uint256 actualId,\\n        address refundFounderAddress\\n    )\\n        external\\n        virtual\\n        override\\n        nonReentrant\\n        returns (uint256 amountUnlockedLeftover, uint256 amountRefunded)\\n    {\\n        if (!isCancelable) revert NotPermissioned();\\n        _checkAccessControl(\\n            TokenTableUnlockerV2.cancel.selector,\\n            abi.encode(actualId, refundFounderAddress),\\n            _msgSender(),\\n            true\\n        );\\n        (amountUnlockedLeftover, ) = calculateAmountClaimable(actualId);\\n        amountUnlockedLeftoverForActuals[actualId] += amountUnlockedLeftover;\\n        UnlockingScheduleActual memory actual = unlockingScheduleActuals[\\n            actualId\\n        ];\\n        if (actual.amountDeposited < amountUnlockedLeftover)\\n            revert InsufficientDeposit(\\n                amountUnlockedLeftover,\\n                actual.amountDeposited\\n            );\\n        actual.amountDeposited -= amountUnlockedLeftover;\\n        amountRefunded = actual.amountDeposited;\\n        IERC20(getProjectToken()).safeTransfer(\\n            refundFounderAddress,\\n            amountRefunded\\n        );\\n        emit ActualCancelled(\\n            actualId,\\n            amountUnlockedLeftover,\\n            amountRefunded,\\n            refundFounderAddress\\n        );\\n        delete unlockingScheduleActuals[actualId];\\n        _callHook(TokenTableUnlockerV2.cancel.selector, msg.data);\\n    }\\n\\n    function setAccessControlDelegate(\\n        address accessControlDelegate_\\n    ) external virtual override onlyOwner {\\n        if (!isAccessControllable) revert NotPermissioned();\\n        accessControlDelegate = ITTAccessControlDelegate(\\n            accessControlDelegate_\\n        );\\n        _callHook(\\n            TokenTableUnlockerV2.setAccessControlDelegate.selector,\\n            msg.data\\n        );\\n    }\\n\\n    function setHook(address hook_) external virtual override {\\n        if (!isHookable) revert NotPermissioned();\\n        _checkAccessControl(\\n            TokenTableUnlockerV2.setHook.selector,\\n            \\\"\\\",\\n            _msgSender(),\\n            true\\n        );\\n        hook = ITTHook(hook_);\\n        _callHook(TokenTableUnlockerV2.setHook.selector, msg.data);\\n    }\\n\\n    function disableCancel() external virtual override {\\n        _checkAccessControl(\\n            TokenTableUnlockerV2.disableCancel.selector,\\n            \\\"\\\",\\n            _msgSender(),\\n            true\\n        );\\n        isCancelable = false;\\n        _callHook(TokenTableUnlockerV2.disableCancel.selector, msg.data);\\n    }\\n\\n    function disableAccessControlDelegate() external virtual override {\\n        _checkAccessControl(\\n            TokenTableUnlockerV2.disableAccessControlDelegate.selector,\\n            \\\"\\\",\\n            _msgSender(),\\n            true\\n        );\\n        isAccessControllable = false;\\n        accessControlDelegate = ITTAccessControlDelegate(address(0));\\n        _callHook(\\n            TokenTableUnlockerV2.disableAccessControlDelegate.selector,\\n            msg.data\\n        );\\n    }\\n\\n    function disableHook() external virtual override {\\n        _checkAccessControl(\\n            TokenTableUnlockerV2.disableHook.selector,\\n            \\\"\\\",\\n            _msgSender(),\\n            true\\n        );\\n        isHookable = false;\\n        _callHook(TokenTableUnlockerV2.disableHook.selector, msg.data);\\n        hook = ITTHook(address(0));\\n    }\\n\\n    function transferOwnership(\\n        address newOwner\\n    ) public override(IOwnable, OwnableUpgradeable) {\\n        OwnableUpgradeable.transferOwnership(newOwner);\\n    }\\n\\n    function renounceOwnership() public override(IOwnable, OwnableUpgradeable) {\\n        OwnableUpgradeable.renounceOwnership();\\n    }\\n\\n    function owner()\\n        public\\n        view\\n        override(IOwnable, OwnableUpgradeable)\\n        returns (address)\\n    {\\n        return OwnableUpgradeable.owner();\\n    }\\n\\n    function _createPreset(\\n        bytes32 presetId,\\n        uint256[] memory linearStartTimestampsRelative,\\n        uint256 linearEndTimestampRelative,\\n        uint256[] memory linearBips,\\n        uint256[] memory numOfUnlocksForEachLinear\\n    ) internal virtual {\\n        if (!_presetIsEmpty(_unlockingSchedulePresets[presetId]))\\n            revert PresetExists();\\n        UnlockingSchedulePreset memory newPreset = UnlockingSchedulePreset({\\n            linearStartTimestampsRelative: linearStartTimestampsRelative,\\n            linearEndTimestampRelative: linearEndTimestampRelative,\\n            linearBips: linearBips,\\n            numOfUnlocksForEachLinear: numOfUnlocksForEachLinear\\n        });\\n        if (!_presetHasValidFormat(newPreset)) revert InvalidPresetFormat();\\n        _unlockingSchedulePresets[presetId] = newPreset;\\n        emit PresetCreated(presetId);\\n    }\\n\\n    function _createActual(\\n        address recipient,\\n        bytes32 presetId,\\n        uint256 startTimestampAbsolute,\\n        uint256 amountSkipped,\\n        uint256 totalAmount,\\n        uint256 amountDepositingNow\\n    ) internal virtual {\\n        uint256 actualId = futureToken.safeMint(recipient);\\n        UnlockingScheduleActual storage actual = unlockingScheduleActuals[\\n            actualId\\n        ];\\n        UnlockingSchedulePreset storage preset = _unlockingSchedulePresets[\\n            presetId\\n        ];\\n        if (_presetIsEmpty(preset)) revert InvalidPresetFormat();\\n        if (amountSkipped >= totalAmount) revert InvalidSkipAmount();\\n        actual.presetId = presetId;\\n        actual.startTimestampAbsolute = startTimestampAbsolute;\\n        actual.amountClaimed = amountSkipped;\\n        actual.totalAmount = totalAmount;\\n        emit ActualCreated(presetId, actualId);\\n        if (amountDepositingNow > 0) {\\n            actual.amountDeposited = amountDepositingNow;\\n            IERC20(getProjectToken()).safeTransferFrom(\\n                _msgSender(),\\n                address(this),\\n                amountDepositingNow\\n            );\\n            emit TokensDeposited(actualId, amountDepositingNow);\\n        }\\n    }\\n\\n    function _deposit(uint256 actualId, uint256 amount) internal {\\n        UnlockingScheduleActual storage actual = unlockingScheduleActuals[\\n            actualId\\n        ];\\n        IERC20(getProjectToken()).safeTransferFrom(\\n            _msgSender(),\\n            address(this),\\n            amount\\n        );\\n        actual.amountDeposited += amount;\\n        emit TokensDeposited(actualId, amount);\\n    }\\n\\n    function _claim(\\n        uint256 actualId,\\n        address overrideRecipient\\n    ) internal virtual {\\n        (\\n            uint256 deltaAmountClaimable,\\n            address recipient\\n        ) = _updateActualAndSend(actualId, overrideRecipient);\\n        emit TokensClaimed(\\n            actualId,\\n            _msgSender(),\\n            recipient,\\n            deltaAmountClaimable\\n        );\\n    }\\n\\n    function _callHook(\\n        bytes4 selector,\\n        bytes calldata context\\n    ) internal virtual {\\n        if (address(hook) == address(0)) return;\\n        hook.didCall(selector, context, _msgSender());\\n    }\\n\\n    // solhint-disable-next-line ordering\\n    function getEncodedPreset(\\n        bytes32 presetId\\n    ) external view virtual override returns (bytes memory) {\\n        UnlockingSchedulePreset memory preset = _unlockingSchedulePresets[\\n            presetId\\n        ];\\n        return\\n            abi.encode(\\n                preset.linearStartTimestampsRelative,\\n                preset.linearEndTimestampRelative,\\n                preset.linearBips,\\n                preset.numOfUnlocksForEachLinear\\n            );\\n    }\\n\\n    function calculateAmountClaimable(\\n        uint256 actualId\\n    )\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256 deltaAmountClaimable, uint256 updatedAmountClaimed)\\n    {\\n        UnlockingScheduleActual memory actual = unlockingScheduleActuals[\\n            actualId\\n        ];\\n        UnlockingSchedulePreset memory preset = _unlockingSchedulePresets[\\n            actual.presetId\\n        ];\\n        uint256 i;\\n        uint256 latestIncompleteLinearIndex;\\n        if (block.timestamp < actual.startTimestampAbsolute)\\n            return (0, actual.amountClaimed);\\n        uint256 claimTimestampRelative = block.timestamp -\\n            actual.startTimestampAbsolute;\\n        for (i = 0; i < preset.linearStartTimestampsRelative.length; i++) {\\n            if (\\n                preset.linearStartTimestampsRelative[i] <=\\n                claimTimestampRelative\\n            ) {\\n                latestIncompleteLinearIndex = i;\\n            } else {\\n                break;\\n            }\\n        }\\n        // 1. calculate completed linear index claimables in bips\\n        for (i = 0; i < latestIncompleteLinearIndex; i++) {\\n            updatedAmountClaimed += preset.linearBips[i];\\n        }\\n        // 2. calculate incomplete linear index claimable in bips\\n        uint256 latestIncompleteLinearDuration = 0;\\n        if (\\n            latestIncompleteLinearIndex ==\\n            preset.linearStartTimestampsRelative.length - 1\\n        ) {\\n            latestIncompleteLinearDuration =\\n                preset.linearEndTimestampRelative -\\n                preset.linearStartTimestampsRelative[\\n                    preset.linearStartTimestampsRelative.length - 1\\n                ];\\n        } else {\\n            latestIncompleteLinearDuration =\\n                preset.linearStartTimestampsRelative[\\n                    latestIncompleteLinearIndex + 1\\n                ] -\\n                preset.linearStartTimestampsRelative[\\n                    latestIncompleteLinearIndex\\n                ];\\n        }\\n        uint256 latestIncompleteLinearIntervalForEachUnlock = latestIncompleteLinearDuration /\\n                preset.numOfUnlocksForEachLinear[latestIncompleteLinearIndex];\\n        uint256 latestIncompleteLinearClaimableTimestampRelative = claimTimestampRelative -\\n                preset.linearStartTimestampsRelative[\\n                    latestIncompleteLinearIndex\\n                ];\\n        uint256 numOfClaimableUnlocksInIncompleteLinear = latestIncompleteLinearClaimableTimestampRelative /\\n                latestIncompleteLinearIntervalForEachUnlock;\\n        updatedAmountClaimed +=\\n            (preset.linearBips[latestIncompleteLinearIndex] *\\n                numOfClaimableUnlocksInIncompleteLinear) /\\n            preset.numOfUnlocksForEachLinear[latestIncompleteLinearIndex];\\n        updatedAmountClaimed =\\n            (updatedAmountClaimed * actual.totalAmount) /\\n            BIPS_PRECISION;\\n        if (updatedAmountClaimed > actual.totalAmount) {\\n            updatedAmountClaimed = actual.totalAmount;\\n        }\\n        if (actual.amountClaimed > updatedAmountClaimed) {\\n            deltaAmountClaimable = 0;\\n        } else {\\n            deltaAmountClaimable = updatedAmountClaimed - actual.amountClaimed;\\n        }\\n    }\\n\\n    function _updateActualAndSend(\\n        uint256 actualId,\\n        address overrideRecipient\\n    ) internal returns (uint256 deltaAmountClaimable_, address recipient) {\\n        (\\n            uint256 deltaAmountClaimable,\\n            uint256 updatedAmountClaimed\\n        ) = calculateAmountClaimable(actualId);\\n        UnlockingScheduleActual storage actual = unlockingScheduleActuals[\\n            actualId\\n        ];\\n        actual.amountClaimed = updatedAmountClaimed;\\n        if (actual.amountDeposited < deltaAmountClaimable)\\n            revert InsufficientDeposit(\\n                deltaAmountClaimable,\\n                actual.amountDeposited\\n            );\\n        actual.amountDeposited -= deltaAmountClaimable;\\n        if (overrideRecipient == address(0)) {\\n            recipient = futureToken.ownerOf(actualId);\\n        } else {\\n            recipient = overrideRecipient;\\n        }\\n        if (address(deployer) != address(0)) {\\n            uint256 feesCollected = deployer.feeCollector().getFee(\\n                address(this),\\n                deltaAmountClaimable\\n            );\\n            if (feesCollected > 0) {\\n                deltaAmountClaimable -= feesCollected;\\n                IERC20(getProjectToken()).safeTransfer(\\n                    deployer.feeCollector().owner(),\\n                    feesCollected\\n                );\\n            }\\n        }\\n        IERC20(getProjectToken()).safeTransfer(recipient, deltaAmountClaimable);\\n        deltaAmountClaimable_ = deltaAmountClaimable;\\n    }\\n\\n    function _checkAccessControl(\\n        bytes4 selector,\\n        bytes memory context,\\n        address operator,\\n        bool onlyOwner\\n    ) internal view {\\n        if (address(accessControlDelegate) == address(0)) {\\n            if (\\n                selector == this.claimCancelledActual.selector ||\\n                selector == this.claim.selector\\n            ) {\\n                (uint256 actualId, ) = abi.decode(context, (uint256, address));\\n                if (futureToken.ownerOf(actualId) != _msgSender()) {\\n                    revert NotPermissioned();\\n                }\\n            } else if (selector == this.batchClaim.selector) {\\n                (uint256[] memory actualId, ) = abi.decode(\\n                    context,\\n                    (uint256[], uint256[])\\n                );\\n                for (uint256 i = 0; i < actualId.length; i++) {\\n                    if (futureToken.ownerOf(actualId[i]) != _msgSender()) {\\n                        revert NotPermissioned();\\n                    }\\n                }\\n            }\\n            if (onlyOwner && _msgSender() == owner()) {\\n                return;\\n            } else if (onlyOwner && _msgSender() != owner()) {\\n                revert NotPermissioned();\\n            } else {\\n                return;\\n            }\\n        }\\n        if (\\n            !accessControlDelegate.hasPermissionToPerform(\\n                selector,\\n                context,\\n                operator\\n            )\\n        ) revert NotPermissioned();\\n    }\\n\\n    function _presetIsEmpty(\\n        UnlockingSchedulePreset storage preset\\n    ) internal view returns (bool) {\\n        return\\n            preset.linearBips.length *\\n                preset.linearStartTimestampsRelative.length *\\n                preset.numOfUnlocksForEachLinear.length *\\n                preset.linearEndTimestampRelative ==\\n            0;\\n    }\\n\\n    function _presetHasValidFormat(\\n        UnlockingSchedulePreset memory preset\\n    ) internal pure returns (bool) {\\n        uint256 total;\\n        for (uint256 i = 0; i < preset.linearBips.length; i++) {\\n            total += preset.linearBips[i];\\n        }\\n        return\\n            (total == BIPS_PRECISION) &&\\n            (preset.linearBips.length ==\\n                preset.linearStartTimestampsRelative.length) &&\\n            (preset.linearStartTimestampsRelative[\\n                preset.linearStartTimestampsRelative.length - 1\\n            ] < preset.linearEndTimestampRelative) &&\\n            (preset.numOfUnlocksForEachLinear.length ==\\n                preset.linearStartTimestampsRelative.length);\\n    }\\n}\\n\",\"keccak256\":\"0xdfb0854fa1f6424447258851a2ba92099f1e3839164a00a7f2cba4b622f670f0\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\ninterface IOwnable {\\n    function renounceOwnership() external;\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function owner() external view returns (address);\\n}\\n\",\"keccak256\":\"0xa44768e9a76737a2b848719ea3a418a188980c61e6726c62b52bad044c95c92c\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ITTAccessControlDelegate.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title ITTAccessControlDelegate\\n * @author Jack Xu @ EthSign\\n * @dev This delegate interface provides loose coupling between TokenTable\\n * unlocker and access control contracts. Any contract that implements this\\n * interface is a valid source of truth for the unlocker.\\n */\\ninterface ITTAccessControlDelegate {\\n    /**\\n     * @notice Checks if an operator has the adequate permissions to perform a\\n     * specific action.\\n     * @dev We check if the operator is permitted to call a certain function\\n     * given an actualID and contextual data.\\n     * @param selector The selector of the calling function.\\n     * @param context Any useful contextual data. This is usually the call\\n     * parameters encoded in order.\\n     * @param operator The entity whose permissions we are trying to verify.\\n     * @return A boolean value indicating if the operator is permitted to\\n     * perform a specific action.\\n     */\\n    function hasPermissionToPerform(\\n        bytes4 selector,\\n        bytes calldata context,\\n        address operator\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x9aebcbe70ff6aed2e200b5aeef2981cbddeba81c7fb5c6ed3daf97d0aededaf5\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ITTFutureTokenV2.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport {IERC721AQueryableUpgradeable} from \\\"erc721a-upgradeable/contracts/interfaces/IERC721AQueryableUpgradeable.sol\\\";\\n\\ninterface ITTFutureTokenV2 is IERC721AQueryableUpgradeable {\\n    function initialize(address projectToken, bool allowTransfer_) external;\\n\\n    function setAuthorizedMinterSingleUse(address authorizedMinter_) external;\\n\\n    function safeMint(address to) external returns (uint256 tokenId);\\n\\n    function getClaimInfo(\\n        uint256 tokenId\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 deltaAmountClaimable,\\n            uint256 amountAlreadyClaimed,\\n            bool isCancelable\\n        );\\n}\\n\",\"keccak256\":\"0x01431983d120cc918195bf19728f348819cbf759068cf2175d1743d76f82e3a1\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ITTHook.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title ITTHook\\n * @author Jack Xu @ EthSign\\n * @dev This hook is similar to the access control delegate, but the intent\\n * is made clearer with the removal of view and return type.\\n */\\ninterface ITTHook {\\n    /**\\n     * @notice Forwards the call context from the hooked contract.\\n     * @param selector The selector of the called function.\\n     * @param context The encoded call data from the called function.\\n     * @param caller The caller of the hooked contract.\\n     */\\n    function didCall(\\n        bytes4 selector,\\n        bytes calldata context,\\n        address caller\\n    ) external;\\n}\\n\",\"keccak256\":\"0xeb78e0a1a8b30215267fcfed3e0b4b6bbd8cd5536819d34e2c809a7535ad7ce6\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ITTTrackerTokenV2.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\ninterface ITTTrackerTokenV2 {\\n    function initialize(address ttuInstance_) external;\\n}\\n\",\"keccak256\":\"0x5be43a6966b728191e5c6036f56285149900554c98749c24b8b6b6934b942914\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ITTUDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport {ITokenTableUnlockerV2} from \\\"./ITokenTableUnlockerV2.sol\\\";\\nimport {ITTFutureTokenV2} from \\\"./ITTFutureTokenV2.sol\\\";\\nimport {ITTTrackerTokenV2} from \\\"./ITTTrackerTokenV2.sol\\\";\\nimport {ITTUFeeCollector} from \\\"./ITTUFeeCollector.sol\\\";\\n\\n/**\\n * @title TTUDeployer\\n * @author Jack Xu @ EthSign\\n * @dev This is the deployer for all TokenTable core and proxy contracts. All\\n * initial setup and configuration is automatically done here.\\n *\\n * To save gas and enable easy upgradeability, all deployed contracts are\\n * beacon proxy instances.\\n *\\n * You should avoid deploying TokenTable contracts individually unless you know\\n * what you're doing.\\n */\\ninterface ITTUDeployer {\\n    event TTUDeployerInitialized(\\n        address unlockerImpl,\\n        address futureTokenImpl,\\n        address trackerTokenImpl,\\n        address beaconManagerImpl,\\n        address feeCollector\\n    );\\n    event TokenTableSuiteDeployed(\\n        address by,\\n        string projectId,\\n        address unlocker,\\n        address futureToken,\\n        address trackerToken\\n    );\\n    event FeeCollectorChanged(address feeCollector);\\n\\n    error AlreadyDeployed(); // 0xa6ef0ba1\\n\\n    /**\\n     * @dev Exposes the fee collector variable.\\n     */\\n    function feeCollector() external returns (ITTUFeeCollector);\\n\\n    /**\\n     * @notice Deploys and configures a new set of TokenTable products.\\n     * @dev Emits: TokenTableSuiteDeployed. Throws: AlreadyDeployed().\\n     * @param projectToken The project token.\\n     * @param projectId A unique projectId (otherwise will revert).\\n     * @param disableAutoUpgrade When set to false, a Clone instead of a\\n     * BeaconProxy is created to prevent future upgradeability.\\n     * @param allowTransferableFT Allow FutureToken to be transferable.\\n     */\\n    function deployTTSuite(\\n        address projectToken,\\n        string calldata projectId,\\n        bool disableAutoUpgrade,\\n        bool allowTransferableFT\\n    )\\n        external\\n        returns (ITokenTableUnlockerV2, ITTFutureTokenV2, ITTTrackerTokenV2);\\n}\\n\",\"keccak256\":\"0xf27453934e922a75ca768e1d5f099ca5b655d338aee661e1ee0cdb1d62277544\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ITTUFeeCollector.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport {IOwnable} from \\\"./IOwnable.sol\\\";\\n\\n/**\\n * @title ITTUFeeCollector\\n * @author Jack Xu @ EthSign\\n * @dev TTUFeeCollector handles service fee calculation.\\n */\\ninterface ITTUFeeCollector is IOwnable {\\n    event DefaultFeeSet(uint256 bips);\\n    event CustomFeeSet(address unlockerAddress, uint256 bips);\\n\\n    /**\\n     * @notice Returns the amount of tokens deducted as fees.\\n     */\\n    function getFee(\\n        address unlockerAddress,\\n        uint256 tokenTransferred\\n    ) external view returns (uint256 tokensCollected);\\n}\\n\",\"keccak256\":\"0x2a207f87fc5895bce66010005f7b89363fafe05a72b1b627fff1839142aea0cb\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ITokenTableUnlockerV2.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport {IOwnable} from \\\"./IOwnable.sol\\\";\\n\\n/**\\n * @title ITokenTableUnlockerV2\\n * @author Jack Xu @ EthSign\\n * @dev The lightweight interface for TokenTableUnlockerV2, which handles token\\n * unlocking and distribution for TokenTable.\\n */\\nabstract contract ITokenTableUnlockerV2 is IOwnable {\\n    event PresetCreated(bytes32 presetId);\\n    event ActualCreated(bytes32 presetId, uint256 actualId);\\n    event TokensDeposited(uint256 actualId, uint256 amount);\\n    event TokensClaimed(\\n        uint256 actualId,\\n        address caller,\\n        address to,\\n        uint256 amount\\n    );\\n    event TokensWithdrawn(uint256 actualId, address by, uint256 amount);\\n    event ActualCancelled(\\n        uint256 actualId,\\n        uint256 amountUnlockedLeftover,\\n        uint256 amountRefunded,\\n        address refundFounderAddress\\n    );\\n\\n    error InvalidPresetFormat(); // 0x0ef8e8dc\\n    error PresetExists(); // 0x7cbb15b4\\n    error PresetDoesNotExist(); // 0xbd88ff7b\\n    error InvalidSkipAmount(); // 0x78c0fc43\\n    error InsufficientDeposit(\\n        uint256 deltaAmountClaimable,\\n        uint256 amountDeposited\\n    ); // 0x25c3f46e\\n    error NotPermissioned(); // 0x7f63bd0f\\n\\n    /**\\n     * @dev Exposing the initializer.\\n     */\\n    function initialize(\\n        address projectToken,\\n        address futureToken_,\\n        address deployer_\\n    ) external virtual;\\n\\n    /**\\n     * @notice Creates an unlocking schedule preset template.\\n     * @dev Emits: PresetCreated.\\n     * - Only callable by the owner if no access control delegate is set. If\\n     * delegate is set, access by anyone other than the owner depends on the\\n     * return value of the delegate.\\n     * @param presetId The ID of the preset we are trying to create. This is\\n     * determined off-chain and it can be anything that doesn't exist yet.\\n     * @param linearStartTimestampsRelative The relative start timestamps of\\n     * linear periods.\\n     * @param linearEndTimestampRelative The relative end timestamp of the\\n     * entire linear unlocking schedule.\\n     * @param linearBips Basis points (percentage of the total amount unlocked)\\n     * for each linear period. This must add up to BIPS_PRECISION.\\n     * @param numOfUnlocksForEachLinear The number of unlocks for each linear\\n     * unlocking period. The minimum value is 1 (unchecked).\\n     */\\n    function createPreset(\\n        bytes32 presetId,\\n        uint256[] calldata linearStartTimestampsRelative,\\n        uint256 linearEndTimestampRelative,\\n        uint256[] calldata linearBips,\\n        uint256[] calldata numOfUnlocksForEachLinear\\n    ) external virtual;\\n\\n    function batchCreatePreset(\\n        bytes32[] calldata presetId,\\n        uint256[][] calldata linearStartTimestampsRelative,\\n        uint256[] calldata linearEndTimestampRelative,\\n        uint256[][] calldata linearBips,\\n        uint256[][] memory numOfUnlocksForEachLinear\\n    ) external virtual;\\n\\n    /**\\n     * @notice Creates an actual unlocking schedule based on a preset.\\n     * @dev Emits: ActualCreated, TokensDeposited (only if amountDepositingNow\\n     * > 0).\\n     * - A FutureToken is minted in the process w/ tokenId == actualId;\\n     * - If amountDepositingNow > 0, the caller must call approve() on the\\n     * project token first so safeTransfer() does not revert\\n     * - There is no minimum deposit\\n     * - Only callable by the owner if no access control delegate is set. If\\n     * delegate is set, access by anyone other than the owner depends on the\\n     * return value of the delegate.\\n     * @param recipient The address of the stakeholder. A FutureToken will be\\n     * minted to that address.\\n     * @param presetId The ID of the preset we are trying to create. This is\\n     * determined off-chain and it can be anything that doesn't exist yet.\\n     * @param startTimestampAbsolute When the unlocking schedule should start\\n     * in UNIX epoch timestamp (seconds). Cannot be in the past.\\n     * @param amountSkipped If the project is being transferred into TokenTable\\n     * from a different platform, we can skip over what's already been unlocked\\n     * to keep the progress consistent.\\n     * @param totalAmount The total amount of tokens to be unlocked.\\n     * @param amountDepositingNow You can deposit some amount of tokens when\\n     * creating the actual schedule for convenience. If the amount deposited is\\n     * insufficient when the stakeholder attempts to claim, the transaction\\n     * will revert.\\n     */\\n    function createActual(\\n        address recipient,\\n        bytes32 presetId,\\n        uint256 startTimestampAbsolute,\\n        uint256 amountSkipped,\\n        uint256 totalAmount,\\n        uint256 amountDepositingNow\\n    ) external virtual;\\n\\n    function batchCreateActual(\\n        address[] calldata recipient,\\n        bytes32[] calldata presetId,\\n        uint256[] calldata startTimestampAbsolute,\\n        uint256[] calldata amountSkipped,\\n        uint256[] calldata totalAmount,\\n        uint256[] memory amountDepositingNow\\n    ) external virtual;\\n\\n    /**\\n     * @notice Makes a deposit into an actual unlocking schedule.\\n     * @dev Emits: TokensDeposited.\\n     * - The caller must call approve() on the project token first so\\n     * safeTransfer() does not revert.\\n     * - There is no minimum deposit.\\n     * - Only callable by the owner if no access control delegate is set. If\\n     * delegate is set, access by anyone other than the owner depends on the\\n     * return value of the delegate.\\n     * @param actualId The ID of the actual unlocking schedule that we are\\n     * intending to deposit into.\\n     * @param amount The amount of project tokens to be deposited.\\n     */\\n    function deposit(uint256 actualId, uint256 amount) external virtual;\\n\\n    function batchDeposit(\\n        uint256[] calldata actualId,\\n        uint256[] calldata amount\\n    ) external virtual;\\n\\n    /**\\n     * @notice Withdraws existing locked deposit from an actual schedule.\\n     * @dev Emits: TokensWithdrawn.\\n     * - Only callable by the owner if no access control delegate is set. If\\n     * delegate is set, access by anyone other than the owner depends on the\\n     * return value of the delegate.\\n     * @param actualId The ID of the actual unlocking schedule that we are\\n     * intending to withdraw from.\\n     * @param amount The amount of project tokens to be withdrawn.\\n     */\\n    function withdrawDeposit(uint256 actualId, uint256 amount) external virtual;\\n\\n    /**\\n     * @notice Claims claimable tokens for the specified actualId. If the\\n     * caller is the owner of the actualId or has permission, then the\\n     * tokens can be claimed to a different address (as specified in args)\\n     * @dev Emits: TokensClaimed.\\n     * - Only callable by the owner of the FutureToken if no access control\\n     * delegate is set. If delegate is set, access by anyone other than the\\n     * FutureToken owner depends on the return value of the delegate.\\n     * @param actualId The ID of the actual unlocking schedule that we are\\n     * intending to claim from.\\n     * @param overrideRecipient If we want to send the claimed tokens to an\\n     * address other than the owner of the FutureToken. This MUST pass through\\n     * access control, otherwise it will revert. If we want to send the claimed\\n     * tokens to the owner of the FutureToken (default behavior), pass in\\n     * `ethers.constants.AddressZero`.\\n     */\\n    function claim(\\n        uint256 actualId,\\n        address overrideRecipient\\n    ) external virtual;\\n\\n    function batchClaim(\\n        uint256[] calldata actualId,\\n        address[] calldata overrideRecipient\\n    ) external virtual;\\n\\n    /**\\n     * @notice Claims claimable tokens for the specified CANCELLED actualId. If\\n     * the caller is the owner of the actualId or has permission, then the\\n     * tokens can be claimed to a different address (as specified in args)\\n     * @dev Emits: TokensClaimed.\\n     * - Only callable by the owner of the FutureToken if no access control\\n     * delegate is set. If delegate is set, access by anyone other than the\\n     * FutureToken owner depends on the return value of the delegate.\\n     * @param actualId The ID of the actual unlocking schedule that we are\\n     * intending to claim from.\\n     * @param overrideRecipient If we want to send the claimed tokens to an\\n     * address other than the owner of the FutureToken. This MUST pass through\\n     * access control, otherwise it will revert. If we want to send the claimed\\n     * tokens to the owner of the FutureToken (default behavior), pass in\\n     * `ethers.constants.AddressZero`.\\n     */\\n    function claimCancelledActual(\\n        uint256 actualId,\\n        address overrideRecipient\\n    ) external virtual;\\n\\n    /**\\n     * @notice Cancels an actual unlocking schedule effective immediately.\\n     * Tokens not yet claimed but already unlocked will be tallied.\\n     * @dev Emits: ActualCancelled.\\n     * - Only callable by the owner if no access control delegate is set. If\\n     * delegate is set, access by anyone other than the owner depends on the\\n     * return value of the delegate.\\n     * @param actualId The ID of the actual unlocking schedule that we are\\n     * intending to cancel.\\n     * @param refundFounderAddress The address that the locked tokens will\\n     * be sent to. This does not have to be a founder's address. Using the zero\\n     * address means withdraw to sender's address.\\n     */\\n    function cancel(\\n        uint256 actualId,\\n        address refundFounderAddress\\n    ) external virtual returns (uint256 amountClaimed, uint256 amountRefunded);\\n\\n    /**\\n     * @notice Sets the access control delegate used to control claim behavior.\\n     * @dev Only callable by the owner.\\n     */\\n    function setAccessControlDelegate(\\n        address accessControlDelegate_\\n    ) external virtual;\\n\\n    /**\\n     * @notice Sets the hook contract.\\n     * @dev Only callable by the owner.\\n     */\\n    function setHook(address hook) external virtual;\\n\\n    /**\\n     * @notice Permanently disables the cancel() function.\\n     */\\n    function disableCancel() external virtual;\\n\\n    /**\\n     * @notice Permanently disables the access control delegate.\\n     */\\n    function disableAccessControlDelegate() external virtual;\\n\\n    /**\\n     * @notice Permanently disables the hook.\\n     */\\n    function disableHook() external virtual;\\n\\n    /**\\n     * @dev Exposes the public variable.\\n     */\\n    function isCancelable() external view virtual returns (bool);\\n\\n    /**\\n     * @dev Exposes the public variable.\\n     */\\n    function isAccessControllable() external view virtual returns (bool);\\n\\n    /**\\n     * @dev Exposes the public variable.\\n     */\\n    function isHookable() external view virtual returns (bool);\\n\\n    /**\\n     * @notice Returns an ABI-encoded preset, as nested objects cannot be\\n     * returned directly in Solidity.\\n     * @dev To decode in JS, use:\\n     *  ethers.utils.defaultAbiCoder.decode(\\n     *      ['uint256[]', 'uint256', 'uint256[]', 'uint256[]'],\\n     *      encodedPreset\\n     *  )\\n     * @param presetId The ID of the preset we are trying to read.\\n     */\\n    function getEncodedPreset(\\n        bytes32 presetId\\n    ) external view virtual returns (bytes memory);\\n\\n    /**\\n     * @notice Calculates the amount of unlocked tokens that have yet to be\\n     * claimed in an actual unlocking schedule.\\n     * @dev This is the most complex part of the smart contract. Quite a bit of\\n     * calculations are performed here.\\n     * @param actualId The ID of the actual unlocking schedule that we are\\n     * working with.\\n     * @return deltaAmountClaimable Amount of tokens claimable right now.\\n     * @return updatedAmountClaimed New total amount of tokens claimed. This is\\n     * the sum of all previously claimed tokens and deltaAmountClaimable.\\n     */\\n    function calculateAmountClaimable(\\n        uint256 actualId\\n    )\\n        public\\n        view\\n        virtual\\n        returns (uint256 deltaAmountClaimable, uint256 updatedAmountClaimed);\\n}\\n\",\"keccak256\":\"0xbee71f48b75bbbccef012d9c3335d13624bc0611e3a37805090904ea090d0913\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/TokenTableUnlockerV2DataModels.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title TokenTableUnlockerV2DataModels\\n * @author Jack Xu @ EthSign\\n * @dev Data models for TokenTableUnlockerV2.\\n *\\n * Note that all relative timestamps are relative to the start timestamp.\\n * Absolute timestamps are standard UNIX epoch timestamps in seconds.\\n *\\n * In this system, cliff unlocks are considered linear as well. This enables us\\n * to mix and match cliffs and linears at will, providing full customizability.\\n * Cliff waiting periods have a linear bip of 0 and cliff unlocking moments\\n * have a duration of 1 second.\\n *\\n * A preset is an unlocking schedule template that contains information that's\\n * shared across all stakeholders within a single round.\\n *\\n * An actual is an actual unlocking schedule for a single stakeholder and\\n * builds on top of an existing preset. An actual contains information that is\\n * different from one stakeholder to the next.\\n */\\nstruct UnlockingSchedulePreset {\\n    uint256[] linearStartTimestampsRelative;\\n    uint256 linearEndTimestampRelative;\\n    uint256[] linearBips;\\n    uint256[] numOfUnlocksForEachLinear;\\n}\\n\\nstruct UnlockingScheduleActual {\\n    bytes32 presetId;\\n    uint256 startTimestampAbsolute;\\n    uint256 amountClaimed;\\n    uint256 amountDeposited;\\n    uint256 totalAmount;\\n}\\n\",\"keccak256\":\"0x10a1ab2ae47df49321ded15b661af20234d067fe08a9892ac1dda0fec6413cc5\",\"license\":\"UNLICENSED\"},\"erc721a-upgradeable/contracts/ERC721AStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary ERC721AStorage {\\n    // Bypass for a `--via-ir` bug (https://github.com/chiru-labs/ERC721A/pull/364).\\n    struct TokenApprovalRef {\\n        address value;\\n    }\\n\\n    struct Layout {\\n        // =============================================================\\n        //                            STORAGE\\n        // =============================================================\\n\\n        // The next token ID to be minted.\\n        uint256 _currentIndex;\\n        // The number of tokens burned.\\n        uint256 _burnCounter;\\n        // Token name\\n        string _name;\\n        // Token symbol\\n        string _symbol;\\n        // Mapping from token ID to ownership details\\n        // An empty struct value does not necessarily mean the token is unowned.\\n        // See {_packedOwnershipOf} implementation for details.\\n        //\\n        // Bits Layout:\\n        // - [0..159]   `addr`\\n        // - [160..223] `startTimestamp`\\n        // - [224]      `burned`\\n        // - [225]      `nextInitialized`\\n        // - [232..255] `extraData`\\n        mapping(uint256 => uint256) _packedOwnerships;\\n        // Mapping owner address to address data.\\n        //\\n        // Bits Layout:\\n        // - [0..63]    `balance`\\n        // - [64..127]  `numberMinted`\\n        // - [128..191] `numberBurned`\\n        // - [192..255] `aux`\\n        mapping(address => uint256) _packedAddressData;\\n        // Mapping from token ID to approved address.\\n        mapping(uint256 => ERC721AStorage.TokenApprovalRef) _tokenApprovals;\\n        // Mapping from owner to operator approvals\\n        mapping(address => mapping(address => bool)) _operatorApprovals;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256('ERC721A.contracts.storage.ERC721A');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x318831b891d003c94fc2a92ed62a1468809f21e5be110fc59798d3c5c4eb2776\",\"license\":\"MIT\"},\"erc721a-upgradeable/contracts/ERC721AUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport './IERC721AUpgradeable.sol';\\nimport {ERC721AStorage} from './ERC721AStorage.sol';\\nimport './ERC721A__Initializable.sol';\\n\\n/**\\n * @dev Interface of ERC721 token receiver.\\n */\\ninterface ERC721A__IERC721ReceiverUpgradeable {\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\\n/**\\n * @title ERC721A\\n *\\n * @dev Implementation of the [ERC721](https://eips.ethereum.org/EIPS/eip-721)\\n * Non-Fungible Token Standard, including the Metadata extension.\\n * Optimized for lower gas during batch mints.\\n *\\n * Token IDs are minted in sequential order (e.g. 0, 1, 2, 3, ...)\\n * starting from `_startTokenId()`.\\n *\\n * Assumptions:\\n *\\n * - An owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\n * - The maximum token ID cannot exceed 2**256 - 1 (max value of uint256).\\n */\\ncontract ERC721AUpgradeable is ERC721A__Initializable, IERC721AUpgradeable {\\n    using ERC721AStorage for ERC721AStorage.Layout;\\n\\n    // =============================================================\\n    //                           CONSTANTS\\n    // =============================================================\\n\\n    // Mask of an entry in packed address data.\\n    uint256 private constant _BITMASK_ADDRESS_DATA_ENTRY = (1 << 64) - 1;\\n\\n    // The bit position of `numberMinted` in packed address data.\\n    uint256 private constant _BITPOS_NUMBER_MINTED = 64;\\n\\n    // The bit position of `numberBurned` in packed address data.\\n    uint256 private constant _BITPOS_NUMBER_BURNED = 128;\\n\\n    // The bit position of `aux` in packed address data.\\n    uint256 private constant _BITPOS_AUX = 192;\\n\\n    // Mask of all 256 bits in packed address data except the 64 bits for `aux`.\\n    uint256 private constant _BITMASK_AUX_COMPLEMENT = (1 << 192) - 1;\\n\\n    // The bit position of `startTimestamp` in packed ownership.\\n    uint256 private constant _BITPOS_START_TIMESTAMP = 160;\\n\\n    // The bit mask of the `burned` bit in packed ownership.\\n    uint256 private constant _BITMASK_BURNED = 1 << 224;\\n\\n    // The bit position of the `nextInitialized` bit in packed ownership.\\n    uint256 private constant _BITPOS_NEXT_INITIALIZED = 225;\\n\\n    // The bit mask of the `nextInitialized` bit in packed ownership.\\n    uint256 private constant _BITMASK_NEXT_INITIALIZED = 1 << 225;\\n\\n    // The bit position of `extraData` in packed ownership.\\n    uint256 private constant _BITPOS_EXTRA_DATA = 232;\\n\\n    // Mask of all 256 bits in a packed ownership except the 24 bits for `extraData`.\\n    uint256 private constant _BITMASK_EXTRA_DATA_COMPLEMENT = (1 << 232) - 1;\\n\\n    // The mask of the lower 160 bits for addresses.\\n    uint256 private constant _BITMASK_ADDRESS = (1 << 160) - 1;\\n\\n    // The maximum `quantity` that can be minted with {_mintERC2309}.\\n    // This limit is to prevent overflows on the address data entries.\\n    // For a limit of 5000, a total of 3.689e15 calls to {_mintERC2309}\\n    // is required to cause an overflow, which is unrealistic.\\n    uint256 private constant _MAX_MINT_ERC2309_QUANTITY_LIMIT = 5000;\\n\\n    // The `Transfer` event signature is given by:\\n    // `keccak256(bytes(\\\"Transfer(address,address,uint256)\\\"))`.\\n    bytes32 private constant _TRANSFER_EVENT_SIGNATURE =\\n        0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\\n\\n    // =============================================================\\n    //                          CONSTRUCTOR\\n    // =============================================================\\n\\n    function __ERC721A_init(string memory name_, string memory symbol_) internal onlyInitializingERC721A {\\n        __ERC721A_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721A_init_unchained(string memory name_, string memory symbol_) internal onlyInitializingERC721A {\\n        ERC721AStorage.layout()._name = name_;\\n        ERC721AStorage.layout()._symbol = symbol_;\\n        ERC721AStorage.layout()._currentIndex = _startTokenId();\\n    }\\n\\n    // =============================================================\\n    //                   TOKEN COUNTING OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the starting token ID.\\n     * To change the starting token ID, please override this function.\\n     */\\n    function _startTokenId() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Returns the next token ID to be minted.\\n     */\\n    function _nextTokenId() internal view virtual returns (uint256) {\\n        return ERC721AStorage.layout()._currentIndex;\\n    }\\n\\n    /**\\n     * @dev Returns the total number of tokens in existence.\\n     * Burned tokens will reduce the count.\\n     * To get the total number of tokens minted, please see {_totalMinted}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        // Counter underflow is impossible as _burnCounter cannot be incremented\\n        // more than `_currentIndex - _startTokenId()` times.\\n        unchecked {\\n            return ERC721AStorage.layout()._currentIndex - ERC721AStorage.layout()._burnCounter - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the total amount of tokens minted in the contract.\\n     */\\n    function _totalMinted() internal view virtual returns (uint256) {\\n        // Counter underflow is impossible as `_currentIndex` does not decrement,\\n        // and it is initialized to `_startTokenId()`.\\n        unchecked {\\n            return ERC721AStorage.layout()._currentIndex - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the total number of tokens burned.\\n     */\\n    function _totalBurned() internal view virtual returns (uint256) {\\n        return ERC721AStorage.layout()._burnCounter;\\n    }\\n\\n    // =============================================================\\n    //                    ADDRESS DATA OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the number of tokens in `owner`'s account.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\\n        return ERC721AStorage.layout()._packedAddressData[owner] & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the number of tokens minted by `owner`.\\n     */\\n    function _numberMinted(address owner) internal view returns (uint256) {\\n        return\\n            (ERC721AStorage.layout()._packedAddressData[owner] >> _BITPOS_NUMBER_MINTED) & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the number of tokens burned by or on behalf of `owner`.\\n     */\\n    function _numberBurned(address owner) internal view returns (uint256) {\\n        return\\n            (ERC721AStorage.layout()._packedAddressData[owner] >> _BITPOS_NUMBER_BURNED) & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\\n     */\\n    function _getAux(address owner) internal view returns (uint64) {\\n        return uint64(ERC721AStorage.layout()._packedAddressData[owner] >> _BITPOS_AUX);\\n    }\\n\\n    /**\\n     * Sets the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\\n     * If there are multiple variables, please pack them into a uint64.\\n     */\\n    function _setAux(address owner, uint64 aux) internal virtual {\\n        uint256 packed = ERC721AStorage.layout()._packedAddressData[owner];\\n        uint256 auxCasted;\\n        // Cast `aux` with assembly to avoid redundant masking.\\n        assembly {\\n            auxCasted := aux\\n        }\\n        packed = (packed & _BITMASK_AUX_COMPLEMENT) | (auxCasted << _BITPOS_AUX);\\n        ERC721AStorage.layout()._packedAddressData[owner] = packed;\\n    }\\n\\n    // =============================================================\\n    //                            IERC165\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        // The interface IDs are constants representing the first 4 bytes\\n        // of the XOR of all function selectors in the interface.\\n        // See: [ERC165](https://eips.ethereum.org/EIPS/eip-165)\\n        // (e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`)\\n        return\\n            interfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\\n            interfaceId == 0x80ac58cd || // ERC165 interface ID for ERC721.\\n            interfaceId == 0x5b5e139f; // ERC165 interface ID for ERC721Metadata.\\n    }\\n\\n    // =============================================================\\n    //                        IERC721Metadata\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return ERC721AStorage.layout()._name;\\n    }\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return ERC721AStorage.layout()._symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, _toString(tokenId))) : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, it can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return '';\\n    }\\n\\n    // =============================================================\\n    //                     OWNERSHIPS OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        return address(uint160(_packedOwnershipOf(tokenId)));\\n    }\\n\\n    /**\\n     * @dev Gas spent here starts off proportional to the maximum mint batch size.\\n     * It gradually moves to O(1) as tokens get transferred around over time.\\n     */\\n    function _ownershipOf(uint256 tokenId) internal view virtual returns (TokenOwnership memory) {\\n        return _unpackedOwnership(_packedOwnershipOf(tokenId));\\n    }\\n\\n    /**\\n     * @dev Returns the unpacked `TokenOwnership` struct at `index`.\\n     */\\n    function _ownershipAt(uint256 index) internal view virtual returns (TokenOwnership memory) {\\n        return _unpackedOwnership(ERC721AStorage.layout()._packedOwnerships[index]);\\n    }\\n\\n    /**\\n     * @dev Initializes the ownership slot minted at `index` for efficiency purposes.\\n     */\\n    function _initializeOwnershipAt(uint256 index) internal virtual {\\n        if (ERC721AStorage.layout()._packedOwnerships[index] == 0) {\\n            ERC721AStorage.layout()._packedOwnerships[index] = _packedOwnershipOf(index);\\n        }\\n    }\\n\\n    /**\\n     * Returns the packed ownership data of `tokenId`.\\n     */\\n    function _packedOwnershipOf(uint256 tokenId) private view returns (uint256 packed) {\\n        if (_startTokenId() <= tokenId) {\\n            packed = ERC721AStorage.layout()._packedOwnerships[tokenId];\\n            // If not burned.\\n            if (packed & _BITMASK_BURNED == 0) {\\n                // If the data at the starting slot does not exist, start the scan.\\n                if (packed == 0) {\\n                    if (tokenId >= ERC721AStorage.layout()._currentIndex) revert OwnerQueryForNonexistentToken();\\n                    // Invariant:\\n                    // There will always be an initialized ownership slot\\n                    // (i.e. `ownership.addr != address(0) && ownership.burned == false`)\\n                    // before an unintialized ownership slot\\n                    // (i.e. `ownership.addr == address(0) && ownership.burned == false`)\\n                    // Hence, `tokenId` will not underflow.\\n                    //\\n                    // We can directly compare the packed value.\\n                    // If the address is zero, packed will be zero.\\n                    for (;;) {\\n                        unchecked {\\n                            packed = ERC721AStorage.layout()._packedOwnerships[--tokenId];\\n                        }\\n                        if (packed == 0) continue;\\n                        return packed;\\n                    }\\n                }\\n                // Otherwise, the data exists and is not burned. We can skip the scan.\\n                // This is possible because we have already achieved the target condition.\\n                // This saves 2143 gas on transfers of initialized tokens.\\n                return packed;\\n            }\\n        }\\n        revert OwnerQueryForNonexistentToken();\\n    }\\n\\n    /**\\n     * @dev Returns the unpacked `TokenOwnership` struct from `packed`.\\n     */\\n    function _unpackedOwnership(uint256 packed) private pure returns (TokenOwnership memory ownership) {\\n        ownership.addr = address(uint160(packed));\\n        ownership.startTimestamp = uint64(packed >> _BITPOS_START_TIMESTAMP);\\n        ownership.burned = packed & _BITMASK_BURNED != 0;\\n        ownership.extraData = uint24(packed >> _BITPOS_EXTRA_DATA);\\n    }\\n\\n    /**\\n     * @dev Packs ownership data into a single uint256.\\n     */\\n    function _packOwnershipData(address owner, uint256 flags) private view returns (uint256 result) {\\n        assembly {\\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            owner := and(owner, _BITMASK_ADDRESS)\\n            // `owner | (block.timestamp << _BITPOS_START_TIMESTAMP) | flags`.\\n            result := or(owner, or(shl(_BITPOS_START_TIMESTAMP, timestamp()), flags))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the `nextInitialized` flag set if `quantity` equals 1.\\n     */\\n    function _nextInitializedFlag(uint256 quantity) private pure returns (uint256 result) {\\n        // For branchless setting of the `nextInitialized` flag.\\n        assembly {\\n            // `(quantity == 1) << _BITPOS_NEXT_INITIALIZED`.\\n            result := shl(_BITPOS_NEXT_INITIALIZED, eq(quantity, 1))\\n        }\\n    }\\n\\n    // =============================================================\\n    //                      APPROVAL OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account. See {ERC721A-_approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     */\\n    function approve(address to, uint256 tokenId) public payable virtual override {\\n        _approve(to, tokenId, true);\\n    }\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\\n\\n        return ERC721AStorage.layout()._tokenApprovals[tokenId].value;\\n    }\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom}\\n     * for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        ERC721AStorage.layout()._operatorApprovals[_msgSenderERC721A()][operator] = approved;\\n        emit ApprovalForAll(_msgSenderERC721A(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return ERC721AStorage.layout()._operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted. See {_mint}.\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            _startTokenId() <= tokenId &&\\n            tokenId < ERC721AStorage.layout()._currentIndex && // If within bounds,\\n            ERC721AStorage.layout()._packedOwnerships[tokenId] & _BITMASK_BURNED == 0; // and not burned.\\n    }\\n\\n    /**\\n     * @dev Returns whether `msgSender` is equal to `approvedAddress` or `owner`.\\n     */\\n    function _isSenderApprovedOrOwner(\\n        address approvedAddress,\\n        address owner,\\n        address msgSender\\n    ) private pure returns (bool result) {\\n        assembly {\\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            owner := and(owner, _BITMASK_ADDRESS)\\n            // Mask `msgSender` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            msgSender := and(msgSender, _BITMASK_ADDRESS)\\n            // `msgSender == owner || msgSender == approvedAddress`.\\n            result := or(eq(msgSender, owner), eq(msgSender, approvedAddress))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the storage slot and value for the approved address of `tokenId`.\\n     */\\n    function _getApprovedSlotAndAddress(uint256 tokenId)\\n        private\\n        view\\n        returns (uint256 approvedAddressSlot, address approvedAddress)\\n    {\\n        ERC721AStorage.TokenApprovalRef storage tokenApproval = ERC721AStorage.layout()._tokenApprovals[tokenId];\\n        // The following is equivalent to `approvedAddress = _tokenApprovals[tokenId].value`.\\n        assembly {\\n            approvedAddressSlot := tokenApproval.slot\\n            approvedAddress := sload(approvedAddressSlot)\\n        }\\n    }\\n\\n    // =============================================================\\n    //                      TRANSFER OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public payable virtual override {\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\n\\n        if (address(uint160(prevOwnershipPacked)) != from) revert TransferFromIncorrectOwner();\\n\\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\\n\\n        // The nested ifs save around 20+ gas over a compound boolean condition.\\n        if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\\n            if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\\n\\n        if (to == address(0)) revert TransferToZeroAddress();\\n\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\n\\n        // Clear approvals from the previous owner.\\n        assembly {\\n            if approvedAddress {\\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\\n                sstore(approvedAddressSlot, 0)\\n            }\\n        }\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\\n        unchecked {\\n            // We can directly increment and decrement the balances.\\n            --ERC721AStorage.layout()._packedAddressData[from]; // Updates: `balance -= 1`.\\n            ++ERC721AStorage.layout()._packedAddressData[to]; // Updates: `balance += 1`.\\n\\n            // Updates:\\n            // - `address` to the next owner.\\n            // - `startTimestamp` to the timestamp of transfering.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `true`.\\n            ERC721AStorage.layout()._packedOwnerships[tokenId] = _packOwnershipData(\\n                to,\\n                _BITMASK_NEXT_INITIALIZED | _nextExtraData(from, to, prevOwnershipPacked)\\n            );\\n\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\\n                uint256 nextTokenId = tokenId + 1;\\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\\n                if (ERC721AStorage.layout()._packedOwnerships[nextTokenId] == 0) {\\n                    // If the next slot is within bounds.\\n                    if (nextTokenId != ERC721AStorage.layout()._currentIndex) {\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\n                        ERC721AStorage.layout()._packedOwnerships[nextTokenId] = prevOwnershipPacked;\\n                    }\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n        _afterTokenTransfers(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public payable virtual override {\\n        safeTransferFrom(from, to, tokenId, '');\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public payable virtual override {\\n        transferFrom(from, to, tokenId);\\n        if (to.code.length != 0)\\n            if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before a set of serially-ordered token IDs\\n     * are about to be transferred. This includes minting.\\n     * And also called before burning one token.\\n     *\\n     * `startTokenId` - the first token ID to be transferred.\\n     * `quantity` - the amount to be transferred.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after a set of serially-ordered token IDs\\n     * have been transferred. This includes minting.\\n     * And also called after one token has been burned.\\n     *\\n     * `startTokenId` - the first token ID to be transferred.\\n     * `quantity` - the amount to be transferred.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` has been minted for `to`.\\n     * - When `to` is zero, `tokenId` has been burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _afterTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target contract.\\n     *\\n     * `from` - Previous owner of the given token ID.\\n     * `to` - Target address that will receive the token.\\n     * `tokenId` - Token ID to be transferred.\\n     * `_data` - Optional data to send along with the call.\\n     *\\n     * Returns whether the call correctly returned the expected magic value.\\n     */\\n    function _checkContractOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        try\\n            ERC721A__IERC721ReceiverUpgradeable(to).onERC721Received(_msgSenderERC721A(), from, tokenId, _data)\\n        returns (bytes4 retval) {\\n            return retval == ERC721A__IERC721ReceiverUpgradeable(to).onERC721Received.selector;\\n        } catch (bytes memory reason) {\\n            if (reason.length == 0) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            } else {\\n                assembly {\\n                    revert(add(32, reason), mload(reason))\\n                }\\n            }\\n        }\\n    }\\n\\n    // =============================================================\\n    //                        MINT OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event for each mint.\\n     */\\n    function _mint(address to, uint256 quantity) internal virtual {\\n        uint256 startTokenId = ERC721AStorage.layout()._currentIndex;\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are incredibly unrealistic.\\n        // `balance` and `numberMinted` have a maximum limit of 2**64.\\n        // `tokenId` has a maximum limit of 2**256.\\n        unchecked {\\n            // Updates:\\n            // - `balance += quantity`.\\n            // - `numberMinted += quantity`.\\n            //\\n            // We can directly add to the `balance` and `numberMinted`.\\n            ERC721AStorage.layout()._packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\\n\\n            // Updates:\\n            // - `address` to the owner.\\n            // - `startTimestamp` to the timestamp of minting.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `quantity == 1`.\\n            ERC721AStorage.layout()._packedOwnerships[startTokenId] = _packOwnershipData(\\n                to,\\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\\n            );\\n\\n            uint256 toMasked;\\n            uint256 end = startTokenId + quantity;\\n\\n            // Use assembly to loop and emit the `Transfer` event for gas savings.\\n            // The duplicated `log4` removes an extra check and reduces stack juggling.\\n            // The assembly, together with the surrounding Solidity code, have been\\n            // delicately arranged to nudge the compiler into producing optimized opcodes.\\n            assembly {\\n                // Mask `to` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n                toMasked := and(to, _BITMASK_ADDRESS)\\n                // Emit the `Transfer` event.\\n                log4(\\n                    0, // Start of data (0, since no data).\\n                    0, // End of data (0, since no data).\\n                    _TRANSFER_EVENT_SIGNATURE, // Signature.\\n                    0, // `address(0)`.\\n                    toMasked, // `to`.\\n                    startTokenId // `tokenId`.\\n                )\\n\\n                // The `iszero(eq(,))` check ensures that large values of `quantity`\\n                // that overflows uint256 will make the loop run out of gas.\\n                // The compiler will optimize the `iszero` away for performance.\\n                for {\\n                    let tokenId := add(startTokenId, 1)\\n                } iszero(eq(tokenId, end)) {\\n                    tokenId := add(tokenId, 1)\\n                } {\\n                    // Emit the `Transfer` event. Similar to above.\\n                    log4(0, 0, _TRANSFER_EVENT_SIGNATURE, 0, toMasked, tokenId)\\n                }\\n            }\\n            if (toMasked == 0) revert MintToZeroAddress();\\n\\n            ERC721AStorage.layout()._currentIndex = end;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * This function is intended for efficient minting only during contract creation.\\n     *\\n     * It emits only one {ConsecutiveTransfer} as defined in\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309),\\n     * instead of a sequence of {Transfer} event(s).\\n     *\\n     * Calling this function outside of contract creation WILL make your contract\\n     * non-compliant with the ERC721 standard.\\n     * For full ERC721 compliance, substituting ERC721 {Transfer} event(s) with the ERC2309\\n     * {ConsecutiveTransfer} event is only permissible during contract creation.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {ConsecutiveTransfer} event.\\n     */\\n    function _mintERC2309(address to, uint256 quantity) internal virtual {\\n        uint256 startTokenId = ERC721AStorage.layout()._currentIndex;\\n        if (to == address(0)) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n        if (quantity > _MAX_MINT_ERC2309_QUANTITY_LIMIT) revert MintERC2309QuantityExceedsLimit();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are unrealistic due to the above check for `quantity` to be below the limit.\\n        unchecked {\\n            // Updates:\\n            // - `balance += quantity`.\\n            // - `numberMinted += quantity`.\\n            //\\n            // We can directly add to the `balance` and `numberMinted`.\\n            ERC721AStorage.layout()._packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\\n\\n            // Updates:\\n            // - `address` to the owner.\\n            // - `startTimestamp` to the timestamp of minting.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `quantity == 1`.\\n            ERC721AStorage.layout()._packedOwnerships[startTokenId] = _packOwnershipData(\\n                to,\\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\\n            );\\n\\n            emit ConsecutiveTransfer(startTokenId, startTokenId + quantity - 1, address(0), to);\\n\\n            ERC721AStorage.layout()._currentIndex = startTokenId + quantity;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * See {_mint}.\\n     *\\n     * Emits a {Transfer} event for each mint.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, quantity);\\n\\n        unchecked {\\n            if (to.code.length != 0) {\\n                uint256 end = ERC721AStorage.layout()._currentIndex;\\n                uint256 index = end - quantity;\\n                do {\\n                    if (!_checkContractOnERC721Received(address(0), to, index++, _data)) {\\n                        revert TransferToNonERC721ReceiverImplementer();\\n                    }\\n                } while (index < end);\\n                // Reentrancy protection.\\n                if (ERC721AStorage.layout()._currentIndex != end) revert();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Equivalent to `_safeMint(to, quantity, '')`.\\n     */\\n    function _safeMint(address to, uint256 quantity) internal virtual {\\n        _safeMint(to, quantity, '');\\n    }\\n\\n    // =============================================================\\n    //                       APPROVAL OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Equivalent to `_approve(to, tokenId, false)`.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _approve(to, tokenId, false);\\n    }\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the\\n     * zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(\\n        address to,\\n        uint256 tokenId,\\n        bool approvalCheck\\n    ) internal virtual {\\n        address owner = ownerOf(tokenId);\\n\\n        if (approvalCheck)\\n            if (_msgSenderERC721A() != owner)\\n                if (!isApprovedForAll(owner, _msgSenderERC721A())) {\\n                    revert ApprovalCallerNotOwnerNorApproved();\\n                }\\n\\n        ERC721AStorage.layout()._tokenApprovals[tokenId].value = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    // =============================================================\\n    //                        BURN OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Equivalent to `_burn(tokenId, false)`.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        _burn(tokenId, false);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\n\\n        address from = address(uint160(prevOwnershipPacked));\\n\\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\\n\\n        if (approvalCheck) {\\n            // The nested ifs save around 20+ gas over a compound boolean condition.\\n            if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\\n                if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\\n        }\\n\\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Clear approvals from the previous owner.\\n        assembly {\\n            if approvedAddress {\\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\\n                sstore(approvedAddressSlot, 0)\\n            }\\n        }\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\\n        unchecked {\\n            // Updates:\\n            // - `balance -= 1`.\\n            // - `numberBurned += 1`.\\n            //\\n            // We can directly decrement the balance, and increment the number burned.\\n            // This is equivalent to `packed -= 1; packed += 1 << _BITPOS_NUMBER_BURNED;`.\\n            ERC721AStorage.layout()._packedAddressData[from] += (1 << _BITPOS_NUMBER_BURNED) - 1;\\n\\n            // Updates:\\n            // - `address` to the last owner.\\n            // - `startTimestamp` to the timestamp of burning.\\n            // - `burned` to `true`.\\n            // - `nextInitialized` to `true`.\\n            ERC721AStorage.layout()._packedOwnerships[tokenId] = _packOwnershipData(\\n                from,\\n                (_BITMASK_BURNED | _BITMASK_NEXT_INITIALIZED) | _nextExtraData(from, address(0), prevOwnershipPacked)\\n            );\\n\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\\n                uint256 nextTokenId = tokenId + 1;\\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\\n                if (ERC721AStorage.layout()._packedOwnerships[nextTokenId] == 0) {\\n                    // If the next slot is within bounds.\\n                    if (nextTokenId != ERC721AStorage.layout()._currentIndex) {\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\n                        ERC721AStorage.layout()._packedOwnerships[nextTokenId] = prevOwnershipPacked;\\n                    }\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, address(0), tokenId);\\n        _afterTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\n        unchecked {\\n            ERC721AStorage.layout()._burnCounter++;\\n        }\\n    }\\n\\n    // =============================================================\\n    //                     EXTRA DATA OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Directly sets the extra data for the ownership data `index`.\\n     */\\n    function _setExtraDataAt(uint256 index, uint24 extraData) internal virtual {\\n        uint256 packed = ERC721AStorage.layout()._packedOwnerships[index];\\n        if (packed == 0) revert OwnershipNotInitializedForExtraData();\\n        uint256 extraDataCasted;\\n        // Cast `extraData` with assembly to avoid redundant masking.\\n        assembly {\\n            extraDataCasted := extraData\\n        }\\n        packed = (packed & _BITMASK_EXTRA_DATA_COMPLEMENT) | (extraDataCasted << _BITPOS_EXTRA_DATA);\\n        ERC721AStorage.layout()._packedOwnerships[index] = packed;\\n    }\\n\\n    /**\\n     * @dev Called during each token transfer to set the 24bit `extraData` field.\\n     * Intended to be overridden by the cosumer contract.\\n     *\\n     * `previousExtraData` - the value of `extraData` before transfer.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _extraData(\\n        address from,\\n        address to,\\n        uint24 previousExtraData\\n    ) internal view virtual returns (uint24) {}\\n\\n    /**\\n     * @dev Returns the next extra data for the packed ownership data.\\n     * The returned result is shifted into position.\\n     */\\n    function _nextExtraData(\\n        address from,\\n        address to,\\n        uint256 prevOwnershipPacked\\n    ) private view returns (uint256) {\\n        uint24 extraData = uint24(prevOwnershipPacked >> _BITPOS_EXTRA_DATA);\\n        return uint256(_extraData(from, to, extraData)) << _BITPOS_EXTRA_DATA;\\n    }\\n\\n    // =============================================================\\n    //                       OTHER OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the message sender (defaults to `msg.sender`).\\n     *\\n     * If you are writing GSN compatible contracts, you need to override this function.\\n     */\\n    function _msgSenderERC721A() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    /**\\n     * @dev Converts a uint256 to its ASCII string decimal representation.\\n     */\\n    function _toString(uint256 value) internal pure virtual returns (string memory str) {\\n        assembly {\\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), but\\n            // we allocate 0xa0 bytes to keep the free memory pointer 32-byte word aligned.\\n            // We will need 1 word for the trailing zeros padding, 1 word for the length,\\n            // and 3 words for a maximum of 78 digits. Total: 5 * 0x20 = 0xa0.\\n            let m := add(mload(0x40), 0xa0)\\n            // Update the free memory pointer to allocate.\\n            mstore(0x40, m)\\n            // Assign the `str` to the end.\\n            str := sub(m, 0x20)\\n            // Zeroize the slot after the string.\\n            mstore(str, 0)\\n\\n            // Cache the end of the memory to calculate the length later.\\n            let end := str\\n\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            // prettier-ignore\\n            for { let temp := value } 1 {} {\\n                str := sub(str, 1)\\n                // Write the character to the pointer.\\n                // The ASCII index of the '0' character is 48.\\n                mstore8(str, add(48, mod(temp, 10)))\\n                // Keep dividing `temp` until zero.\\n                temp := div(temp, 10)\\n                // prettier-ignore\\n                if iszero(temp) { break }\\n            }\\n\\n            let length := sub(end, str)\\n            // Move the pointer 32 bytes leftwards to make room for the length.\\n            str := sub(str, 0x20)\\n            // Store the length.\\n            mstore(str, length)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe9fea2df3839d1cd69b652418759835e4aafabc67fe4523c365be5d9c6cb42ad\",\"license\":\"MIT\"},\"erc721a-upgradeable/contracts/ERC721A__Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable diamond facet contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\n\\nimport {ERC721A__InitializableStorage} from './ERC721A__InitializableStorage.sol';\\n\\nabstract contract ERC721A__Initializable {\\n    using ERC721A__InitializableStorage for ERC721A__InitializableStorage.Layout;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializerERC721A() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(\\n            ERC721A__InitializableStorage.layout()._initializing\\n                ? _isConstructor()\\n                : !ERC721A__InitializableStorage.layout()._initialized,\\n            'ERC721A__Initializable: contract is already initialized'\\n        );\\n\\n        bool isTopLevelCall = !ERC721A__InitializableStorage.layout()._initializing;\\n        if (isTopLevelCall) {\\n            ERC721A__InitializableStorage.layout()._initializing = true;\\n            ERC721A__InitializableStorage.layout()._initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            ERC721A__InitializableStorage.layout()._initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializingERC721A() {\\n        require(\\n            ERC721A__InitializableStorage.layout()._initializing,\\n            'ERC721A__Initializable: contract is not initializing'\\n        );\\n        _;\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        // extcodesize checks the size of the code stored in an address, and\\n        // address returns the current address. Since the code is still not\\n        // deployed when running a constructor, any checks on its code size will\\n        // yield zero, making it an effective way to detect if a contract is\\n        // under construction or not.\\n        address self = address(this);\\n        uint256 cs;\\n        assembly {\\n            cs := extcodesize(self)\\n        }\\n        return cs == 0;\\n    }\\n}\\n\",\"keccak256\":\"0x4a78c3bccd097e704d6c37cf90af892eae0e3fcb13dcc37e5c1ad6c36f4240f0\",\"license\":\"MIT\"},\"erc721a-upgradeable/contracts/ERC721A__InitializableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base storage for the  initialization function for upgradeable diamond facet contracts\\n **/\\n\\nlibrary ERC721A__InitializableStorage {\\n    struct Layout {\\n        /*\\n         * Indicates that the contract has been initialized.\\n         */\\n        bool _initialized;\\n        /*\\n         * Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256('ERC721A.contracts.storage.initializable.facet');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x361a8f273736b37718a98049c3f210381c41e4241ff24a36360e417b94ad87b4\",\"license\":\"MIT\"},\"erc721a-upgradeable/contracts/IERC721AUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Interface of ERC721A.\\n */\\ninterface IERC721AUpgradeable {\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error ApprovalCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error ApprovalQueryForNonexistentToken();\\n\\n    /**\\n     * Cannot query the balance for the zero address.\\n     */\\n    error BalanceQueryForZeroAddress();\\n\\n    /**\\n     * Cannot mint to the zero address.\\n     */\\n    error MintToZeroAddress();\\n\\n    /**\\n     * The quantity of tokens minted must be more than zero.\\n     */\\n    error MintZeroQuantity();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error OwnerQueryForNonexistentToken();\\n\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error TransferCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token must be owned by `from`.\\n     */\\n    error TransferFromIncorrectOwner();\\n\\n    /**\\n     * Cannot safely transfer to a contract that does not implement the\\n     * ERC721Receiver interface.\\n     */\\n    error TransferToNonERC721ReceiverImplementer();\\n\\n    /**\\n     * Cannot transfer to the zero address.\\n     */\\n    error TransferToZeroAddress();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error URIQueryForNonexistentToken();\\n\\n    /**\\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\\n     */\\n    error MintERC2309QuantityExceedsLimit();\\n\\n    /**\\n     * The `extraData` cannot be set on an unintialized ownership slot.\\n     */\\n    error OwnershipNotInitializedForExtraData();\\n\\n    // =============================================================\\n    //                            STRUCTS\\n    // =============================================================\\n\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Stores the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n        // Arbitrary data similar to `startTimestamp` that can be set via {_extraData}.\\n        uint24 extraData;\\n    }\\n\\n    // =============================================================\\n    //                         TOKEN COUNTERS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the total number of tokens in existence.\\n     * Burned tokens will reduce the count.\\n     * To get the total number of tokens minted, please see {_totalMinted}.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    // =============================================================\\n    //                            IERC165\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    // =============================================================\\n    //                            IERC721\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables\\n     * (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in `owner`'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`,\\n     * checking first that contract recipients are aware of the ERC721 protocol\\n     * to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move\\n     * this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external payable;\\n\\n    /**\\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom}\\n     * whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the\\n     * zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external payable;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom}\\n     * for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    // =============================================================\\n    //                        IERC721Metadata\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    // =============================================================\\n    //                           IERC2309\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId`\\n     * (inclusive) is transferred from `from` to `to`, as defined in the\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard.\\n     *\\n     * See {_mintERC2309} for more details.\\n     */\\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\\n}\\n\",\"keccak256\":\"0xa8e2bf92476033e48df3911783487b46bcd20f6490a6fdc8c93ca7a0e94bca20\",\"license\":\"MIT\"},\"erc721a-upgradeable/contracts/extensions/ERC721AQueryableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport './IERC721AQueryableUpgradeable.sol';\\nimport '../ERC721AUpgradeable.sol';\\nimport '../ERC721A__Initializable.sol';\\n\\n/**\\n * @title ERC721AQueryable.\\n *\\n * @dev ERC721A subclass with convenience query functions.\\n */\\nabstract contract ERC721AQueryableUpgradeable is\\n    ERC721A__Initializable,\\n    ERC721AUpgradeable,\\n    IERC721AQueryableUpgradeable\\n{\\n    function __ERC721AQueryable_init() internal onlyInitializingERC721A {\\n        __ERC721AQueryable_init_unchained();\\n    }\\n\\n    function __ERC721AQueryable_init_unchained() internal onlyInitializingERC721A {}\\n\\n    /**\\n     * @dev Returns the `TokenOwnership` struct at `tokenId` without reverting.\\n     *\\n     * If the `tokenId` is out of bounds:\\n     *\\n     * - `addr = address(0)`\\n     * - `startTimestamp = 0`\\n     * - `burned = false`\\n     * - `extraData = 0`\\n     *\\n     * If the `tokenId` is burned:\\n     *\\n     * - `addr = <Address of owner before token was burned>`\\n     * - `startTimestamp = <Timestamp when token was burned>`\\n     * - `burned = true`\\n     * - `extraData = <Extra data when token was burned>`\\n     *\\n     * Otherwise:\\n     *\\n     * - `addr = <Address of owner>`\\n     * - `startTimestamp = <Timestamp of start of ownership>`\\n     * - `burned = false`\\n     * - `extraData = <Extra data at start of ownership>`\\n     */\\n    function explicitOwnershipOf(uint256 tokenId) public view virtual override returns (TokenOwnership memory) {\\n        TokenOwnership memory ownership;\\n        if (tokenId < _startTokenId() || tokenId >= _nextTokenId()) {\\n            return ownership;\\n        }\\n        ownership = _ownershipAt(tokenId);\\n        if (ownership.burned) {\\n            return ownership;\\n        }\\n        return _ownershipOf(tokenId);\\n    }\\n\\n    /**\\n     * @dev Returns an array of `TokenOwnership` structs at `tokenIds` in order.\\n     * See {ERC721AQueryable-explicitOwnershipOf}\\n     */\\n    function explicitOwnershipsOf(uint256[] calldata tokenIds)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (TokenOwnership[] memory)\\n    {\\n        unchecked {\\n            uint256 tokenIdsLength = tokenIds.length;\\n            TokenOwnership[] memory ownerships = new TokenOwnership[](tokenIdsLength);\\n            for (uint256 i; i != tokenIdsLength; ++i) {\\n                ownerships[i] = explicitOwnershipOf(tokenIds[i]);\\n            }\\n            return ownerships;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an array of token IDs owned by `owner`,\\n     * in the range [`start`, `stop`)\\n     * (i.e. `start <= tokenId < stop`).\\n     *\\n     * This function allows for tokens to be queried if the collection\\n     * grows too big for a single call of {ERC721AQueryable-tokensOfOwner}.\\n     *\\n     * Requirements:\\n     *\\n     * - `start < stop`\\n     */\\n    function tokensOfOwnerIn(\\n        address owner,\\n        uint256 start,\\n        uint256 stop\\n    ) external view virtual override returns (uint256[] memory) {\\n        unchecked {\\n            if (start >= stop) revert InvalidQueryRange();\\n            uint256 tokenIdsIdx;\\n            uint256 stopLimit = _nextTokenId();\\n            // Set `start = max(start, _startTokenId())`.\\n            if (start < _startTokenId()) {\\n                start = _startTokenId();\\n            }\\n            // Set `stop = min(stop, stopLimit)`.\\n            if (stop > stopLimit) {\\n                stop = stopLimit;\\n            }\\n            uint256 tokenIdsMaxLength = balanceOf(owner);\\n            // Set `tokenIdsMaxLength = min(balanceOf(owner), stop - start)`,\\n            // to cater for cases where `balanceOf(owner)` is too big.\\n            if (start < stop) {\\n                uint256 rangeLength = stop - start;\\n                if (rangeLength < tokenIdsMaxLength) {\\n                    tokenIdsMaxLength = rangeLength;\\n                }\\n            } else {\\n                tokenIdsMaxLength = 0;\\n            }\\n            uint256[] memory tokenIds = new uint256[](tokenIdsMaxLength);\\n            if (tokenIdsMaxLength == 0) {\\n                return tokenIds;\\n            }\\n            // We need to call `explicitOwnershipOf(start)`,\\n            // because the slot at `start` may not be initialized.\\n            TokenOwnership memory ownership = explicitOwnershipOf(start);\\n            address currOwnershipAddr;\\n            // If the starting slot exists (i.e. not burned), initialize `currOwnershipAddr`.\\n            // `ownership.address` will not be zero, as `start` is clamped to the valid token ID range.\\n            if (!ownership.burned) {\\n                currOwnershipAddr = ownership.addr;\\n            }\\n            for (uint256 i = start; i != stop && tokenIdsIdx != tokenIdsMaxLength; ++i) {\\n                ownership = _ownershipAt(i);\\n                if (ownership.burned) {\\n                    continue;\\n                }\\n                if (ownership.addr != address(0)) {\\n                    currOwnershipAddr = ownership.addr;\\n                }\\n                if (currOwnershipAddr == owner) {\\n                    tokenIds[tokenIdsIdx++] = i;\\n                }\\n            }\\n            // Downsize the array to fit.\\n            assembly {\\n                mstore(tokenIds, tokenIdsIdx)\\n            }\\n            return tokenIds;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an array of token IDs owned by `owner`.\\n     *\\n     * This function scans the ownership mapping and is O(`totalSupply`) in complexity.\\n     * It is meant to be called off-chain.\\n     *\\n     * See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into\\n     * multiple smaller scans if the collection is large enough to cause\\n     * an out-of-gas error (10K collections should be fine).\\n     */\\n    function tokensOfOwner(address owner) external view virtual override returns (uint256[] memory) {\\n        unchecked {\\n            uint256 tokenIdsIdx;\\n            address currOwnershipAddr;\\n            uint256 tokenIdsLength = balanceOf(owner);\\n            uint256[] memory tokenIds = new uint256[](tokenIdsLength);\\n            TokenOwnership memory ownership;\\n            for (uint256 i = _startTokenId(); tokenIdsIdx != tokenIdsLength; ++i) {\\n                ownership = _ownershipAt(i);\\n                if (ownership.burned) {\\n                    continue;\\n                }\\n                if (ownership.addr != address(0)) {\\n                    currOwnershipAddr = ownership.addr;\\n                }\\n                if (currOwnershipAddr == owner) {\\n                    tokenIds[tokenIdsIdx++] = i;\\n                }\\n            }\\n            return tokenIds;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbf2709d257cd1510200ca0557a5a08594ea6b83d5c7a13e672ac83b6f06dd728\",\"license\":\"MIT\"},\"erc721a-upgradeable/contracts/extensions/IERC721AQueryableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport '../IERC721AUpgradeable.sol';\\n\\n/**\\n * @dev Interface of ERC721AQueryable.\\n */\\ninterface IERC721AQueryableUpgradeable is IERC721AUpgradeable {\\n    /**\\n     * Invalid query range (`start` >= `stop`).\\n     */\\n    error InvalidQueryRange();\\n\\n    /**\\n     * @dev Returns the `TokenOwnership` struct at `tokenId` without reverting.\\n     *\\n     * If the `tokenId` is out of bounds:\\n     *\\n     * - `addr = address(0)`\\n     * - `startTimestamp = 0`\\n     * - `burned = false`\\n     * - `extraData = 0`\\n     *\\n     * If the `tokenId` is burned:\\n     *\\n     * - `addr = <Address of owner before token was burned>`\\n     * - `startTimestamp = <Timestamp when token was burned>`\\n     * - `burned = true`\\n     * - `extraData = <Extra data when token was burned>`\\n     *\\n     * Otherwise:\\n     *\\n     * - `addr = <Address of owner>`\\n     * - `startTimestamp = <Timestamp of start of ownership>`\\n     * - `burned = false`\\n     * - `extraData = <Extra data at start of ownership>`\\n     */\\n    function explicitOwnershipOf(uint256 tokenId) external view returns (TokenOwnership memory);\\n\\n    /**\\n     * @dev Returns an array of `TokenOwnership` structs at `tokenIds` in order.\\n     * See {ERC721AQueryable-explicitOwnershipOf}\\n     */\\n    function explicitOwnershipsOf(uint256[] memory tokenIds) external view returns (TokenOwnership[] memory);\\n\\n    /**\\n     * @dev Returns an array of token IDs owned by `owner`,\\n     * in the range [`start`, `stop`)\\n     * (i.e. `start <= tokenId < stop`).\\n     *\\n     * This function allows for tokens to be queried if the collection\\n     * grows too big for a single call of {ERC721AQueryable-tokensOfOwner}.\\n     *\\n     * Requirements:\\n     *\\n     * - `start < stop`\\n     */\\n    function tokensOfOwnerIn(\\n        address owner,\\n        uint256 start,\\n        uint256 stop\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Returns an array of token IDs owned by `owner`.\\n     *\\n     * This function scans the ownership mapping and is O(`totalSupply`) in complexity.\\n     * It is meant to be called off-chain.\\n     *\\n     * See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into\\n     * multiple smaller scans if the collection is large enough to cause\\n     * an out-of-gas error (10K collections should be fine).\\n     */\\n    function tokensOfOwner(address owner) external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0xf83cc229afc5ac227be4e372ab6a680201b8b25773351c1cd0a588b1b6e53821\",\"license\":\"MIT\"},\"erc721a-upgradeable/contracts/interfaces/IERC721AQueryableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport '../extensions/IERC721AQueryableUpgradeable.sol';\\n\",\"keccak256\":\"0xacb0462122256671a3814a2b74c1f28c64f4a322cad552a62ef607ca558df27c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001c62000022565b620000e4565b600054610100900460ff16156200008f5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161015620000e2576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b61337f80620000f46000396000f3fe608060405234801561001057600080fd5b50600436106102065760003560e01c80637733e0fb1161011a578063bae04c9a116100ad578063d8fb068b1161007c578063d8fb068b1461045e578063ddd5e1b214610471578063e2bbb15814610484578063e301b8b514610497578063f2fde38b146104fc57600080fd5b8063bae04c9a14610412578063bfc56c3f14610425578063c0c53b8b14610438578063d5f394881461044b57600080fd5b80638d17c825116100e95780638d17c825146103c45780638da5cb5b146103e4578063a2c6df4f146103ec578063adad72f3146103ff57600080fd5b80637733e0fb1461038d5780637d4e4e8c146103955780637f5a7c7b146103a9578063882a0810146103bc57600080fd5b806338616d8c1161019d5780634837c5961161016c5780634837c5961461033b5780635550ac471461034c57806357d682c41461035f5780636efcc14e14610372578063715018a61461038557600080fd5b806338616d8c146102c25780633aa4327c146102d55780633dfd38731461030057806342734d451461031357600080fd5b80631bffb491116101d95780631bffb491146102685780631f50e2ba1461027c5780632788dbed1461028f5780632de1d431146102a257600080fd5b806301c3c8601461020b578063084d2b9b146102345780631153352c1461024b57806317a69da414610260575b600080fd5b609b5461021f90600160a81b900460ff1681565b60405190151581526020015b60405180910390f35b61023d61271081565b60405190815260200161022b565b61025e6102593660046128bb565b61050f565b005b61025e610572565b609b5461021f90600160a01b900460ff1681565b61025e61028a3660046128d8565b6105c9565b61025e61029d36600461294d565b610750565b6102b56102b03660046129b9565b610803565b60405161022b9190612a22565b61025e6102d03660046128bb565b610968565b6099546102e8906001600160a01b031681565b6040516001600160a01b03909116815260200161022b565b61025e61030e3660046128bb565b6109b4565b6103266103213660046129b9565b610a2e565b6040805192835260208301919091520161022b565b6065546001600160a01b03166102e8565b61025e61035a36600461294d565b610e40565b61032661036d3660046128d8565b610ee3565b61025e610380366004612b0b565b6110d5565b61025e6111e2565b61025e6111ec565b609b5461021f90600160b01b900460ff1681565b609b546102e8906001600160a01b031681565b61025e61122e565b61023d6103d23660046129b9565b609e6020526000908152604090205481565b6102e8611280565b61025e6103fa366004612c21565b611299565b61025e61040d366004612c6d565b6112e4565b61025e610420366004612d1a565b6113c5565b61025e610433366004612dbc565b611482565b61025e610446366004612ea3565b6115e3565b6098546102e8906001600160a01b031681565b609a546102e8906001600160a01b031681565b61025e61047f3660046128d8565b61174f565b61025e610492366004612d1a565b6117ae565b6104d46104a53660046129b9565b609d60205260009081526040902080546001820154600283015460038401546004909401549293919290919085565b604080519586526020860194909452928401919091526060830152608082015260a00161022b565b61025e61050a3660046128bb565b6117f1565b6105176117fa565b609b54600160a81b900460ff1661054157604051637f63bd0f60e01b815260040160405180910390fd5b609a80546001600160a01b0319166001600160a01b03831617905561056f630454cd4b60e21b600036611859565b50565b604080516020810190915260008152610597906305e9a76960e21b90335b60016118d9565b609b805460ff60b01b191690556105b76305e9a76960e21b600036611859565b609b80546001600160a01b0319169055565b6105d1611be2565b61061e631f50e2ba60e01b83836040516020016106019291909182526001600160a01b0316602082015260400190565b6040516020818303038152906040526106173390565b60006118d9565b60006001600160a01b0382166106a2576099546040516331a9108f60e11b8152600481018590526001600160a01b0390911690636352211e90602401602060405180830381865afa158015610677573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069b9190612eee565b90506106a5565b50805b6000838152609e6020526040812080549190556106df82826106cf6065546001600160a01b031690565b6001600160a01b03169190611c3b565b604080518581523360208201526001600160a01b038416818301526060810183905290517f9c4945d842cc8c6704877a0defcd9ab09f6d77b24a369a95c2610506c6c38ee79181900360800190a1610740630fa8715d60e11b600036611859565b505061074c6001606655565b5050565b610758611be2565b61077a632788dbed60e01b858585856040516020016106019493929190612f3d565b60005b838110156107df576107cd85858381811061079a5761079a612fa2565b905060200201358484848181106107b3576107b3612fa2565b90506020020160208101906107c891906128bb565b611ca5565b806107d781612fce565b91505061077d565b506107f3632788dbed60e01b600036611859565b6107fd6001606655565b50505050565b6000818152609c602090815260408083208151815460a09481028201850190935260808101838152606095949193849284919084018282801561086557602002820191906000526020600020905b815481526020019060010190808311610851575b5050505050815260200160018201548152602001600282018054806020026020016040519081016040528092919081815260200182805480156108c757602002820191906000526020600020905b8154815260200190600101908083116108b3575b505050505081526020016003820180548060200260200160405190810160405280929190818152602001828054801561091f57602002820191906000526020600020905b81548152602001906001019080831161090b575b505050505081525050905080600001518160200151826040015183606001516040516020016109519493929190613022565b604051602081830303815290604052915050919050565b6065546001600160a01b031615610992576040516311f9360560e31b815260040160405180910390fd5b606580546001600160a01b0319166001600160a01b0392909216919091179055565b609b54600160b01b900460ff166109de57604051637f63bd0f60e01b815260040160405180910390fd5b604080516020810190915260008152610a0090633dfd387360e01b9033610590565b609b80546001600160a01b0319166001600160a01b03831617905561056f633dfd387360e01b600036611859565b6000818152609d60209081526040808320815160a08082018452825480835260018401548387015260028401548386015260038401546060840152600490930154608080840191909152928652609c85528386208451815496870281018301909552928401858152869592948694909390928492918491840182828015610ad457602002820191906000526020600020905b815481526020019060010190808311610ac0575b505050505081526020016001820154815260200160028201805480602002602001604051908101604052809291908181526020018280548015610b3657602002820191906000526020600020905b815481526020019060010190808311610b22575b5050505050815260200160038201805480602002602001604051908101604052809291908181526020018280548015610b8e57602002820191906000526020600020905b815481526020019060010190808311610b7a575b50505050508152505090506000808360200151421015610bba5750505060400151600094909350915050565b6000846020015142610bcc9190613061565b9050600092505b835151831015610c20578084600001518481518110610bf457610bf4612fa2565b602002602001015111610c0957829150610c0e565b610c20565b82610c1881612fce565b935050610bd3565b600092505b81831015610c6a5783604001518381518110610c4357610c43612fa2565b602002602001015186610c56919061307a565b955082610c6281612fce565b935050610c25565b835151600090610c7c90600190613061565b8303610cc05784518051610c9290600190613061565b81518110610ca257610ca2612fa2565b60200260200101518560200151610cb99190613061565b9050610d13565b8451805184908110610cd457610cd4612fa2565b60200260200101518560000151846001610cee919061307a565b81518110610cfe57610cfe612fa2565b6020026020010151610d109190613061565b90505b600085606001518481518110610d2b57610d2b612fa2565b602002602001015182610d3e919061308d565b9050600086600001518581518110610d5857610d58612fa2565b602002602001015184610d6b9190613061565b90506000610d79838361308d565b905087606001518681518110610d9157610d91612fa2565b60200260200101518189604001518881518110610db057610db0612fa2565b6020026020010151610dc291906130af565b610dcc919061308d565b610dd6908b61307a565b995061271089608001518b610deb91906130af565b610df5919061308d565b995088608001518a1115610e0b57886080015199505b8989604001511115610e205760009a50610e32565b6040890151610e2f908b613061565b9a505b505050505050505050915091565b610e78635550ac4760e01b85858585604051602001610e6294939291906130c6565b6040516020818303038152906040526105903390565b60005b83811015610ecf57610ebd858583818110610e9857610e98612fa2565b90506020020135848484818110610eb157610eb1612fa2565b90506020020135611d0c565b80610ec781612fce565b915050610e7b565b506107fd635550ac4760e01b600036611859565b600080610eee611be2565b609b54600160a01b900460ff16610f1857604051637f63bd0f60e01b815260040160405180910390fd5b610f486357d682c460e01b8585604051602001610e629291909182526001600160a01b0316602082015260400190565b610f5184610a2e565b506000858152609e6020526040812080549294508492909190610f7590849061307a565b90915550506000848152609d6020908152604091829020825160a081018452815481526001820154928101929092526002810154928201929092526003820154606082018190526004909201546080820152908311156110015760608101516040516312e1fa3760e11b8152610ff8918591600401918252602082015260400190565b60405180910390fd5b82816060018181516110139190613061565b9052506060810151915061103484836106cf6065546001600160a01b031690565b60408051868152602081018590529081018390526001600160a01b03851660608201527fd16afe7af99c1463a26fb2e837ad180ef355fe9e0810e2250f83d90f960b629c9060800160405180910390a16000858152609d602052604081208181556001810182905560028101829055600381018290556004018190556110c3906315f5a0b160e21b9036611859565b506110ce6001606655565b9250929050565b6040805160208101909152600081526110f79063377e60a760e11b9033610590565b60005b888110156111c1576111af8c8c8381811061111757611117612fa2565b905060200201602081019061112c91906128bb565b8b8b8481811061113e5761113e612fa2565b905060200201358a8a8581811061115757611157612fa2565b9050602002013589898681811061117057611170612fa2565b9050602002013588888781811061118957611189612fa2565b905060200201358787815181106111a2576111a2612fa2565b6020026020010151611d9a565b806111b981612fce565b9150506110fa565b506111d563377e60a760e11b600036611859565b5050505050505050505050565b6111ea611f2c565b565b60408051602081019091526000815261120e90637733e0fb60e01b9033610590565b609b805460ff60a01b191690556111ea637733e0fb60e01b600036611859565b60408051602081019091526000815261125090630882a08160e41b9033610590565b609b805460ff60a81b19169055609a80546001600160a01b03191690556111ea630882a08160e41b600036611859565b60006112946033546001600160a01b031690565b905090565b6040805160208101909152600081526112bb9063a2c6df4f60e01b9033610590565b6112c9868686868686611d9a565b6112dc63a2c6df4f60e01b600036611859565b505050505050565b6040805160208101909152600081526113069063adad72f360e01b9033610590565b6113a88888888080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808b0282810182019093528a82528c94509092508a918a9182919085019084908082843760009201919091525050604080516020808b0282810182019093528a82529093508a925089918291850190849080828437600092019190915250611f3e92505050565b6113bb63adad72f360e01b600036611859565b5050505050505050565b60408051602081018490529081018290526113eb90635d70264d60e11b90606001610e62565b6000828152609d602052604081206003810180549192849261140e908490613061565b9091555061142b905033836106cf6065546001600160a01b031690565b6040805184815233602082015280820184905290517f3f5fbaf86658fdadee77f1d46e7f8a72424ad9839eda6a1dc6eb0a4228e4226e9181900360600190a161147d635d70264d60e11b600036611859565b505050565b6040805160208101909152600081526114a49063bfc56c3f60e01b9033610590565b60005b888110156115c4576115b28a8a838181106114c4576114c4612fa2565b905060200201358989848181106114dd576114dd612fa2565b90506020028101906114ef91906130ed565b808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508b92508a915086905081811061153557611535612fa2565b9050602002013587878681811061154e5761154e612fa2565b905060200281019061156091906130ed565b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050885189925088915081106115a5576115a5612fa2565b6020026020010151611f3e565b806115bc81612fce565b9150506114a7565b506115d863bfc56c3f60e01b600036611859565b505050505050505050565b600054610100900460ff16158080156116035750600054600160ff909116105b8061161d5750303b15801561161d575060005460ff166001145b6116805760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610ff8565b6000805460ff1916600117905580156116a3576000805461ff0019166101001790555b6116ab61205b565b6116b48461208b565b609980546001600160a01b038086166001600160a01b03199283161790925560988054928516929091169190911790556116ec6120b2565b609b805462ffffff60a01b19166201010160a01b17905580156107fd576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a150505050565b611757611be2565b61178763ddd5e1b260e01b83836040516020016106019291909182526001600160a01b0316602082015260400190565b6117918282611ca5565b6117a4636eeaf0d960e11b600036611859565b61074c6001606655565b60408051602081018490529081018290526117d490631c57762b60e31b90606001610e62565b6117de8282611d0c565b61074c631c57762b60e31b600036611859565b61056f816120d9565b33611803611280565b6001600160a01b0316146111ea5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610ff8565b609b546001600160a01b031661186e57505050565b609b546001600160a01b03166374a14fd4848484336040518563ffffffff1660e01b81526004016118a29493929190613137565b600060405180830381600087803b1580156118bc57600080fd5b505af11580156118d0573d6000803e3d6000fd5b50505050505050565b609a546001600160a01b0316611b50576001600160e01b03198416630fa8715d60e11b148061191857506001600160e01b03198416636eeaf0d960e11b145b156119d5576000838060200190518101906119339190613189565b509050336099546040516331a9108f60e11b8152600481018490526001600160a01b039283169290911690636352211e90602401602060405180830381865afa158015611984573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119a89190612eee565b6001600160a01b0316146119cf57604051637f63bd0f60e01b815260040160405180910390fd5b50611ade565b63d877241360e01b6001600160e01b0319851601611ade57600083806020019051810190611a039190613209565b50905060005b8151811015611adb57609954825133916001600160a01b031690636352211e90859085908110611a3b57611a3b612fa2565b60200260200101516040518263ffffffff1660e01b8152600401611a6191815260200190565b602060405180830381865afa158015611a7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aa29190612eee565b6001600160a01b031614611ac957604051637f63bd0f60e01b815260040160405180910390fd5b80611ad381612fce565b915050611a09565b50505b808015611b035750611aee611280565b6001600160a01b0316336001600160a01b0316145b6107fd57808015611b2d5750611b17611280565b6001600160a01b0316336001600160a01b031614155b15611b4b57604051637f63bd0f60e01b815260040160405180910390fd5b6107fd565b609a5460405163d975021d60e01b81526001600160a01b039091169063d975021d90611b849087908790879060040161326d565b602060405180830381865afa158015611ba1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bc591906132a7565b6107fd57604051637f63bd0f60e01b815260040160405180910390fd5b600260665403611c345760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610ff8565b6002606655565b6040516001600160a01b03831660248201526044810182905261147d90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261214f565b6001606655565b600080611cb28484612221565b915091507f9c4945d842cc8c6704877a0defcd9ab09f6d77b24a369a95c2610506c6c38ee784611cdf3390565b604080519283526001600160a01b0391821660208401529084169082015260608101849052608001611741565b6000828152609d60205260409020611d43333084611d326065546001600160a01b031690565b6001600160a01b031692919061253b565b81816003016000828254611d57919061307a565b909155505060408051848152602081018490527f41fb7ad419fc7623dde1142cd095a12727aa6965ab1d484a6d0d9327403d98ba910160405180910390a1505050565b6099546040516340d097c360e01b81526001600160a01b03888116600483015260009216906340d097c3906024016020604051808303816000875af1158015611de7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e0b91906132c9565b6000818152609d602090815260408083208a8452609c90925290912091925090611e3481612573565b15611e52576040516303be3a3760e21b815260040160405180910390fd5b848610611e72576040516378c0fc4360e01b815260040160405180910390fd5b87825560018201879055600282018690556004820185905560408051898152602081018590527f836cf6e4827fcb14b6226db1383bbae421b3ff8545414c8e5609bb709baae421910160405180910390a183156115d85760038201849055611ee8333086611d326065546001600160a01b031690565b60408051848152602081018690527f41fb7ad419fc7623dde1142cd095a12727aa6965ab1d484a6d0d9327403d98ba910160405180910390a1505050505050505050565b611f346117fa565b6111ea60006125ad565b6000858152609c60205260409020611f5590612573565b611f7257604051631f2ec56d60e21b815260040160405180910390fd5b604080516080810182528581526020810185905290810183905260608101829052611f9c816125ff565b611fb9576040516303be3a3760e21b815260040160405180910390fd5b6000868152609c60209081526040909120825180518493611fde928492910190612846565b506020828101516001830155604083015180516120019260028501920190612846565b506060820151805161201d916003840191602090910190612846565b50506040518781527fdb70f000fd1b55bab727e36e3adf29333c24708fae670635637944d26e8c579e915060200160405180910390a1505050505050565b600054610100900460ff166120825760405162461bcd60e51b8152600401610ff8906132e2565b6111ea336125ad565b600054610100900460ff166109925760405162461bcd60e51b8152600401610ff8906132e2565b600054610100900460ff16611c9e5760405162461bcd60e51b8152600401610ff8906132e2565b6120e16117fa565b6001600160a01b0381166121465760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610ff8565b61056f816125ad565b60006121a4826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166126b69092919063ffffffff16565b80519091501561147d57808060200190518101906121c291906132a7565b61147d5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610ff8565b60008060008061223086610a2e565b6000888152609d60205260409020600281018290556003810154929450909250908311156122815760038101546040516312e1fa3760e11b8152610ff8918591600401918252602082015260400190565b828160030160008282546122959190613061565b90915550506001600160a01b03861661231c576099546040516331a9108f60e11b8152600481018990526001600160a01b0390911690636352211e90602401602060405180830381865afa1580156122f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123159190612eee565b9350612320565b8593505b6098546001600160a01b03161561251757609854604080516331056e5760e21b815290516000926001600160a01b03169163c415b95c916004808301926020929190829003018187875af115801561237c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123a09190612eee565b6040516313b7ae0d60e21b8152306004820152602481018690526001600160a01b039190911690634edeb83490604401602060405180830381865afa1580156123ed573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061241191906132c9565b90508015612515576124238185613061565b9350612515609860009054906101000a90046001600160a01b03166001600160a01b031663c415b95c6040518163ffffffff1660e01b81526004016020604051808303816000875af115801561247d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124a19190612eee565b6001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156124de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125029190612eee565b826106cf6065546001600160a01b031690565b505b61252e84846106cf6065546001600160a01b031690565b8294505050509250929050565b6040516001600160a01b03808516602483015283166044820152606481018290526107fd9085906323b872dd60e01b90608401611c67565b60018101546003820154825460028401546000939291612592916130af565b61259c91906130af565b6125a691906130af565b1592915050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008060005b83604001515181101561264f578360400151818151811061262857612628612fa2565b60200260200101518261263b919061307a565b91508061264781612fce565b915050612605565b50612710811480156126675750825151604084015151145b801561269d575060208301518351805161268390600190613061565b8151811061269357612693612fa2565b6020026020010151105b80156126af5750825151606084015151145b9392505050565b60606126c584846000856126cd565b949350505050565b60608247101561272e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610ff8565b600080866001600160a01b0316858760405161274a919061332d565b60006040518083038185875af1925050503d8060008114612787576040519150601f19603f3d011682016040523d82523d6000602084013e61278c565b606091505b509150915061279d878383876127a8565b979650505050505050565b60608315612817578251600003612810576001600160a01b0385163b6128105760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610ff8565b50816126c5565b6126c5838381511561282c5781518083602001fd5b8060405162461bcd60e51b8152600401610ff89190612a22565b828054828255906000526020600020908101928215612881579160200282015b82811115612881578251825591602001919060010190612866565b5061288d929150612891565b5090565b5b8082111561288d5760008155600101612892565b6001600160a01b038116811461056f57600080fd5b6000602082840312156128cd57600080fd5b81356126af816128a6565b600080604083850312156128eb57600080fd5b8235915060208301356128fd816128a6565b809150509250929050565b60008083601f84011261291a57600080fd5b50813567ffffffffffffffff81111561293257600080fd5b6020830191508360208260051b85010111156110ce57600080fd5b6000806000806040858703121561296357600080fd5b843567ffffffffffffffff8082111561297b57600080fd5b61298788838901612908565b909650945060208701359150808211156129a057600080fd5b506129ad87828801612908565b95989497509550505050565b6000602082840312156129cb57600080fd5b5035919050565b60005b838110156129ed5781810151838201526020016129d5565b50506000910152565b60008151808452612a0e8160208601602086016129d2565b601f01601f19169290920160200192915050565b6020815260006126af60208301846129f6565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612a7457612a74612a35565b604052919050565b600067ffffffffffffffff821115612a9657612a96612a35565b5060051b60200190565b600082601f830112612ab157600080fd5b81356020612ac6612ac183612a7c565b612a4b565b82815260059290921b84018101918181019086841115612ae557600080fd5b8286015b84811015612b005780358352918301918301612ae9565b509695505050505050565b600080600080600080600080600080600060c08c8e031215612b2c57600080fd5b67ffffffffffffffff808d351115612b4357600080fd5b612b508e8e358f01612908565b909c509a5060208d0135811015612b6657600080fd5b612b768e60208f01358f01612908565b909a50985060408d0135811015612b8c57600080fd5b612b9c8e60408f01358f01612908565b909850965060608d0135811015612bb257600080fd5b612bc28e60608f01358f01612908565b909650945060808d0135811015612bd857600080fd5b612be88e60808f01358f01612908565b909450925060a08d0135811015612bfe57600080fd5b50612c0f8d60a08e01358e01612aa0565b90509295989b509295989b9093969950565b60008060008060008060c08789031215612c3a57600080fd5b8635612c45816128a6565b9860208801359850604088013597606081013597506080810135965060a00135945092505050565b60008060008060008060008060a0898b031215612c8957600080fd5b88359750602089013567ffffffffffffffff80821115612ca857600080fd5b612cb48c838d01612908565b909950975060408b0135965060608b0135915080821115612cd457600080fd5b612ce08c838d01612908565b909650945060808b0135915080821115612cf957600080fd5b50612d068b828c01612908565b999c989b5096995094979396929594505050565b60008060408385031215612d2d57600080fd5b50508035926020909101359150565b600082601f830112612d4d57600080fd5b81356020612d5d612ac183612a7c565b82815260059290921b84018101918181019086841115612d7c57600080fd5b8286015b84811015612b0057803567ffffffffffffffff811115612da05760008081fd5b612dae8986838b0101612aa0565b845250918301918301612d80565b600080600080600080600080600060a08a8c031215612dda57600080fd5b893567ffffffffffffffff80821115612df257600080fd5b612dfe8d838e01612908565b909b50995060208c0135915080821115612e1757600080fd5b612e238d838e01612908565b909950975060408c0135915080821115612e3c57600080fd5b612e488d838e01612908565b909750955060608c0135915080821115612e6157600080fd5b612e6d8d838e01612908565b909550935060808c0135915080821115612e8657600080fd5b50612e938c828d01612d3c565b9150509295985092959850929598565b600080600060608486031215612eb857600080fd5b8335612ec3816128a6565b92506020840135612ed3816128a6565b91506040840135612ee3816128a6565b809150509250925092565b600060208284031215612f0057600080fd5b81516126af816128a6565b81835260006001600160fb1b03831115612f2457600080fd5b8260051b80836020870137939093016020019392505050565b604081526000612f51604083018688612f0b565b8281036020848101919091528482528591810160005b86811015612f95578335612f7a816128a6565b6001600160a01b031682529282019290820190600101612f67565b5098975050505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201612fe057612fe0612fb8565b5060010190565b600081518084526020808501945080840160005b8381101561301757815187529582019590820190600101612ffb565b509495945050505050565b6080815260006130356080830187612fe7565b856020840152828103604084015261304d8186612fe7565b9050828103606084015261279d8185612fe7565b8181038181111561307457613074612fb8565b92915050565b8082018082111561307457613074612fb8565b6000826130aa57634e487b7160e01b600052601260045260246000fd5b500490565b808202811582820484141761307457613074612fb8565b6040815260006130da604083018688612f0b565b828103602084015261279d818587612f0b565b6000808335601e1984360301811261310457600080fd5b83018035915067ffffffffffffffff82111561311f57600080fd5b6020019150600581901b36038213156110ce57600080fd5b63ffffffff60e01b85168152606060208201528260608201528284608083013760008184016080908101919091526001600160a01b03929092166040820152601f909201601f19169091010192915050565b6000806040838503121561319c57600080fd5b8251915060208301516128fd816128a6565b600082601f8301126131bf57600080fd5b815160206131cf612ac183612a7c565b82815260059290921b840181019181810190868411156131ee57600080fd5b8286015b84811015612b0057805183529183019183016131f2565b6000806040838503121561321c57600080fd5b825167ffffffffffffffff8082111561323457600080fd5b613240868387016131ae565b9350602085015191508082111561325657600080fd5b50613263858286016131ae565b9150509250929050565b63ffffffff60e01b8416815260606020820152600061328f60608301856129f6565b905060018060a01b0383166040830152949350505050565b6000602082840312156132b957600080fd5b815180151581146126af57600080fd5b6000602082840312156132db57600080fd5b5051919050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000825161333f8184602087016129d2565b919091019291505056fea264697066735822122076b554f775158c86af5b13cc9b49273cddf9a294c8312e45f9ea9dc8e3ec7d3f64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102065760003560e01c80637733e0fb1161011a578063bae04c9a116100ad578063d8fb068b1161007c578063d8fb068b1461045e578063ddd5e1b214610471578063e2bbb15814610484578063e301b8b514610497578063f2fde38b146104fc57600080fd5b8063bae04c9a14610412578063bfc56c3f14610425578063c0c53b8b14610438578063d5f394881461044b57600080fd5b80638d17c825116100e95780638d17c825146103c45780638da5cb5b146103e4578063a2c6df4f146103ec578063adad72f3146103ff57600080fd5b80637733e0fb1461038d5780637d4e4e8c146103955780637f5a7c7b146103a9578063882a0810146103bc57600080fd5b806338616d8c1161019d5780634837c5961161016c5780634837c5961461033b5780635550ac471461034c57806357d682c41461035f5780636efcc14e14610372578063715018a61461038557600080fd5b806338616d8c146102c25780633aa4327c146102d55780633dfd38731461030057806342734d451461031357600080fd5b80631bffb491116101d95780631bffb491146102685780631f50e2ba1461027c5780632788dbed1461028f5780632de1d431146102a257600080fd5b806301c3c8601461020b578063084d2b9b146102345780631153352c1461024b57806317a69da414610260575b600080fd5b609b5461021f90600160a81b900460ff1681565b60405190151581526020015b60405180910390f35b61023d61271081565b60405190815260200161022b565b61025e6102593660046128bb565b61050f565b005b61025e610572565b609b5461021f90600160a01b900460ff1681565b61025e61028a3660046128d8565b6105c9565b61025e61029d36600461294d565b610750565b6102b56102b03660046129b9565b610803565b60405161022b9190612a22565b61025e6102d03660046128bb565b610968565b6099546102e8906001600160a01b031681565b6040516001600160a01b03909116815260200161022b565b61025e61030e3660046128bb565b6109b4565b6103266103213660046129b9565b610a2e565b6040805192835260208301919091520161022b565b6065546001600160a01b03166102e8565b61025e61035a36600461294d565b610e40565b61032661036d3660046128d8565b610ee3565b61025e610380366004612b0b565b6110d5565b61025e6111e2565b61025e6111ec565b609b5461021f90600160b01b900460ff1681565b609b546102e8906001600160a01b031681565b61025e61122e565b61023d6103d23660046129b9565b609e6020526000908152604090205481565b6102e8611280565b61025e6103fa366004612c21565b611299565b61025e61040d366004612c6d565b6112e4565b61025e610420366004612d1a565b6113c5565b61025e610433366004612dbc565b611482565b61025e610446366004612ea3565b6115e3565b6098546102e8906001600160a01b031681565b609a546102e8906001600160a01b031681565b61025e61047f3660046128d8565b61174f565b61025e610492366004612d1a565b6117ae565b6104d46104a53660046129b9565b609d60205260009081526040902080546001820154600283015460038401546004909401549293919290919085565b604080519586526020860194909452928401919091526060830152608082015260a00161022b565b61025e61050a3660046128bb565b6117f1565b6105176117fa565b609b54600160a81b900460ff1661054157604051637f63bd0f60e01b815260040160405180910390fd5b609a80546001600160a01b0319166001600160a01b03831617905561056f630454cd4b60e21b600036611859565b50565b604080516020810190915260008152610597906305e9a76960e21b90335b60016118d9565b609b805460ff60b01b191690556105b76305e9a76960e21b600036611859565b609b80546001600160a01b0319169055565b6105d1611be2565b61061e631f50e2ba60e01b83836040516020016106019291909182526001600160a01b0316602082015260400190565b6040516020818303038152906040526106173390565b60006118d9565b60006001600160a01b0382166106a2576099546040516331a9108f60e11b8152600481018590526001600160a01b0390911690636352211e90602401602060405180830381865afa158015610677573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069b9190612eee565b90506106a5565b50805b6000838152609e6020526040812080549190556106df82826106cf6065546001600160a01b031690565b6001600160a01b03169190611c3b565b604080518581523360208201526001600160a01b038416818301526060810183905290517f9c4945d842cc8c6704877a0defcd9ab09f6d77b24a369a95c2610506c6c38ee79181900360800190a1610740630fa8715d60e11b600036611859565b505061074c6001606655565b5050565b610758611be2565b61077a632788dbed60e01b858585856040516020016106019493929190612f3d565b60005b838110156107df576107cd85858381811061079a5761079a612fa2565b905060200201358484848181106107b3576107b3612fa2565b90506020020160208101906107c891906128bb565b611ca5565b806107d781612fce565b91505061077d565b506107f3632788dbed60e01b600036611859565b6107fd6001606655565b50505050565b6000818152609c602090815260408083208151815460a09481028201850190935260808101838152606095949193849284919084018282801561086557602002820191906000526020600020905b815481526020019060010190808311610851575b5050505050815260200160018201548152602001600282018054806020026020016040519081016040528092919081815260200182805480156108c757602002820191906000526020600020905b8154815260200190600101908083116108b3575b505050505081526020016003820180548060200260200160405190810160405280929190818152602001828054801561091f57602002820191906000526020600020905b81548152602001906001019080831161090b575b505050505081525050905080600001518160200151826040015183606001516040516020016109519493929190613022565b604051602081830303815290604052915050919050565b6065546001600160a01b031615610992576040516311f9360560e31b815260040160405180910390fd5b606580546001600160a01b0319166001600160a01b0392909216919091179055565b609b54600160b01b900460ff166109de57604051637f63bd0f60e01b815260040160405180910390fd5b604080516020810190915260008152610a0090633dfd387360e01b9033610590565b609b80546001600160a01b0319166001600160a01b03831617905561056f633dfd387360e01b600036611859565b6000818152609d60209081526040808320815160a08082018452825480835260018401548387015260028401548386015260038401546060840152600490930154608080840191909152928652609c85528386208451815496870281018301909552928401858152869592948694909390928492918491840182828015610ad457602002820191906000526020600020905b815481526020019060010190808311610ac0575b505050505081526020016001820154815260200160028201805480602002602001604051908101604052809291908181526020018280548015610b3657602002820191906000526020600020905b815481526020019060010190808311610b22575b5050505050815260200160038201805480602002602001604051908101604052809291908181526020018280548015610b8e57602002820191906000526020600020905b815481526020019060010190808311610b7a575b50505050508152505090506000808360200151421015610bba5750505060400151600094909350915050565b6000846020015142610bcc9190613061565b9050600092505b835151831015610c20578084600001518481518110610bf457610bf4612fa2565b602002602001015111610c0957829150610c0e565b610c20565b82610c1881612fce565b935050610bd3565b600092505b81831015610c6a5783604001518381518110610c4357610c43612fa2565b602002602001015186610c56919061307a565b955082610c6281612fce565b935050610c25565b835151600090610c7c90600190613061565b8303610cc05784518051610c9290600190613061565b81518110610ca257610ca2612fa2565b60200260200101518560200151610cb99190613061565b9050610d13565b8451805184908110610cd457610cd4612fa2565b60200260200101518560000151846001610cee919061307a565b81518110610cfe57610cfe612fa2565b6020026020010151610d109190613061565b90505b600085606001518481518110610d2b57610d2b612fa2565b602002602001015182610d3e919061308d565b9050600086600001518581518110610d5857610d58612fa2565b602002602001015184610d6b9190613061565b90506000610d79838361308d565b905087606001518681518110610d9157610d91612fa2565b60200260200101518189604001518881518110610db057610db0612fa2565b6020026020010151610dc291906130af565b610dcc919061308d565b610dd6908b61307a565b995061271089608001518b610deb91906130af565b610df5919061308d565b995088608001518a1115610e0b57886080015199505b8989604001511115610e205760009a50610e32565b6040890151610e2f908b613061565b9a505b505050505050505050915091565b610e78635550ac4760e01b85858585604051602001610e6294939291906130c6565b6040516020818303038152906040526105903390565b60005b83811015610ecf57610ebd858583818110610e9857610e98612fa2565b90506020020135848484818110610eb157610eb1612fa2565b90506020020135611d0c565b80610ec781612fce565b915050610e7b565b506107fd635550ac4760e01b600036611859565b600080610eee611be2565b609b54600160a01b900460ff16610f1857604051637f63bd0f60e01b815260040160405180910390fd5b610f486357d682c460e01b8585604051602001610e629291909182526001600160a01b0316602082015260400190565b610f5184610a2e565b506000858152609e6020526040812080549294508492909190610f7590849061307a565b90915550506000848152609d6020908152604091829020825160a081018452815481526001820154928101929092526002810154928201929092526003820154606082018190526004909201546080820152908311156110015760608101516040516312e1fa3760e11b8152610ff8918591600401918252602082015260400190565b60405180910390fd5b82816060018181516110139190613061565b9052506060810151915061103484836106cf6065546001600160a01b031690565b60408051868152602081018590529081018390526001600160a01b03851660608201527fd16afe7af99c1463a26fb2e837ad180ef355fe9e0810e2250f83d90f960b629c9060800160405180910390a16000858152609d602052604081208181556001810182905560028101829055600381018290556004018190556110c3906315f5a0b160e21b9036611859565b506110ce6001606655565b9250929050565b6040805160208101909152600081526110f79063377e60a760e11b9033610590565b60005b888110156111c1576111af8c8c8381811061111757611117612fa2565b905060200201602081019061112c91906128bb565b8b8b8481811061113e5761113e612fa2565b905060200201358a8a8581811061115757611157612fa2565b9050602002013589898681811061117057611170612fa2565b9050602002013588888781811061118957611189612fa2565b905060200201358787815181106111a2576111a2612fa2565b6020026020010151611d9a565b806111b981612fce565b9150506110fa565b506111d563377e60a760e11b600036611859565b5050505050505050505050565b6111ea611f2c565b565b60408051602081019091526000815261120e90637733e0fb60e01b9033610590565b609b805460ff60a01b191690556111ea637733e0fb60e01b600036611859565b60408051602081019091526000815261125090630882a08160e41b9033610590565b609b805460ff60a81b19169055609a80546001600160a01b03191690556111ea630882a08160e41b600036611859565b60006112946033546001600160a01b031690565b905090565b6040805160208101909152600081526112bb9063a2c6df4f60e01b9033610590565b6112c9868686868686611d9a565b6112dc63a2c6df4f60e01b600036611859565b505050505050565b6040805160208101909152600081526113069063adad72f360e01b9033610590565b6113a88888888080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808b0282810182019093528a82528c94509092508a918a9182919085019084908082843760009201919091525050604080516020808b0282810182019093528a82529093508a925089918291850190849080828437600092019190915250611f3e92505050565b6113bb63adad72f360e01b600036611859565b5050505050505050565b60408051602081018490529081018290526113eb90635d70264d60e11b90606001610e62565b6000828152609d602052604081206003810180549192849261140e908490613061565b9091555061142b905033836106cf6065546001600160a01b031690565b6040805184815233602082015280820184905290517f3f5fbaf86658fdadee77f1d46e7f8a72424ad9839eda6a1dc6eb0a4228e4226e9181900360600190a161147d635d70264d60e11b600036611859565b505050565b6040805160208101909152600081526114a49063bfc56c3f60e01b9033610590565b60005b888110156115c4576115b28a8a838181106114c4576114c4612fa2565b905060200201358989848181106114dd576114dd612fa2565b90506020028101906114ef91906130ed565b808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508b92508a915086905081811061153557611535612fa2565b9050602002013587878681811061154e5761154e612fa2565b905060200281019061156091906130ed565b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050885189925088915081106115a5576115a5612fa2565b6020026020010151611f3e565b806115bc81612fce565b9150506114a7565b506115d863bfc56c3f60e01b600036611859565b505050505050505050565b600054610100900460ff16158080156116035750600054600160ff909116105b8061161d5750303b15801561161d575060005460ff166001145b6116805760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610ff8565b6000805460ff1916600117905580156116a3576000805461ff0019166101001790555b6116ab61205b565b6116b48461208b565b609980546001600160a01b038086166001600160a01b03199283161790925560988054928516929091169190911790556116ec6120b2565b609b805462ffffff60a01b19166201010160a01b17905580156107fd576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a150505050565b611757611be2565b61178763ddd5e1b260e01b83836040516020016106019291909182526001600160a01b0316602082015260400190565b6117918282611ca5565b6117a4636eeaf0d960e11b600036611859565b61074c6001606655565b60408051602081018490529081018290526117d490631c57762b60e31b90606001610e62565b6117de8282611d0c565b61074c631c57762b60e31b600036611859565b61056f816120d9565b33611803611280565b6001600160a01b0316146111ea5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610ff8565b609b546001600160a01b031661186e57505050565b609b546001600160a01b03166374a14fd4848484336040518563ffffffff1660e01b81526004016118a29493929190613137565b600060405180830381600087803b1580156118bc57600080fd5b505af11580156118d0573d6000803e3d6000fd5b50505050505050565b609a546001600160a01b0316611b50576001600160e01b03198416630fa8715d60e11b148061191857506001600160e01b03198416636eeaf0d960e11b145b156119d5576000838060200190518101906119339190613189565b509050336099546040516331a9108f60e11b8152600481018490526001600160a01b039283169290911690636352211e90602401602060405180830381865afa158015611984573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119a89190612eee565b6001600160a01b0316146119cf57604051637f63bd0f60e01b815260040160405180910390fd5b50611ade565b63d877241360e01b6001600160e01b0319851601611ade57600083806020019051810190611a039190613209565b50905060005b8151811015611adb57609954825133916001600160a01b031690636352211e90859085908110611a3b57611a3b612fa2565b60200260200101516040518263ffffffff1660e01b8152600401611a6191815260200190565b602060405180830381865afa158015611a7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aa29190612eee565b6001600160a01b031614611ac957604051637f63bd0f60e01b815260040160405180910390fd5b80611ad381612fce565b915050611a09565b50505b808015611b035750611aee611280565b6001600160a01b0316336001600160a01b0316145b6107fd57808015611b2d5750611b17611280565b6001600160a01b0316336001600160a01b031614155b15611b4b57604051637f63bd0f60e01b815260040160405180910390fd5b6107fd565b609a5460405163d975021d60e01b81526001600160a01b039091169063d975021d90611b849087908790879060040161326d565b602060405180830381865afa158015611ba1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bc591906132a7565b6107fd57604051637f63bd0f60e01b815260040160405180910390fd5b600260665403611c345760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610ff8565b6002606655565b6040516001600160a01b03831660248201526044810182905261147d90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261214f565b6001606655565b600080611cb28484612221565b915091507f9c4945d842cc8c6704877a0defcd9ab09f6d77b24a369a95c2610506c6c38ee784611cdf3390565b604080519283526001600160a01b0391821660208401529084169082015260608101849052608001611741565b6000828152609d60205260409020611d43333084611d326065546001600160a01b031690565b6001600160a01b031692919061253b565b81816003016000828254611d57919061307a565b909155505060408051848152602081018490527f41fb7ad419fc7623dde1142cd095a12727aa6965ab1d484a6d0d9327403d98ba910160405180910390a1505050565b6099546040516340d097c360e01b81526001600160a01b03888116600483015260009216906340d097c3906024016020604051808303816000875af1158015611de7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e0b91906132c9565b6000818152609d602090815260408083208a8452609c90925290912091925090611e3481612573565b15611e52576040516303be3a3760e21b815260040160405180910390fd5b848610611e72576040516378c0fc4360e01b815260040160405180910390fd5b87825560018201879055600282018690556004820185905560408051898152602081018590527f836cf6e4827fcb14b6226db1383bbae421b3ff8545414c8e5609bb709baae421910160405180910390a183156115d85760038201849055611ee8333086611d326065546001600160a01b031690565b60408051848152602081018690527f41fb7ad419fc7623dde1142cd095a12727aa6965ab1d484a6d0d9327403d98ba910160405180910390a1505050505050505050565b611f346117fa565b6111ea60006125ad565b6000858152609c60205260409020611f5590612573565b611f7257604051631f2ec56d60e21b815260040160405180910390fd5b604080516080810182528581526020810185905290810183905260608101829052611f9c816125ff565b611fb9576040516303be3a3760e21b815260040160405180910390fd5b6000868152609c60209081526040909120825180518493611fde928492910190612846565b506020828101516001830155604083015180516120019260028501920190612846565b506060820151805161201d916003840191602090910190612846565b50506040518781527fdb70f000fd1b55bab727e36e3adf29333c24708fae670635637944d26e8c579e915060200160405180910390a1505050505050565b600054610100900460ff166120825760405162461bcd60e51b8152600401610ff8906132e2565b6111ea336125ad565b600054610100900460ff166109925760405162461bcd60e51b8152600401610ff8906132e2565b600054610100900460ff16611c9e5760405162461bcd60e51b8152600401610ff8906132e2565b6120e16117fa565b6001600160a01b0381166121465760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610ff8565b61056f816125ad565b60006121a4826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166126b69092919063ffffffff16565b80519091501561147d57808060200190518101906121c291906132a7565b61147d5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610ff8565b60008060008061223086610a2e565b6000888152609d60205260409020600281018290556003810154929450909250908311156122815760038101546040516312e1fa3760e11b8152610ff8918591600401918252602082015260400190565b828160030160008282546122959190613061565b90915550506001600160a01b03861661231c576099546040516331a9108f60e11b8152600481018990526001600160a01b0390911690636352211e90602401602060405180830381865afa1580156122f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123159190612eee565b9350612320565b8593505b6098546001600160a01b03161561251757609854604080516331056e5760e21b815290516000926001600160a01b03169163c415b95c916004808301926020929190829003018187875af115801561237c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123a09190612eee565b6040516313b7ae0d60e21b8152306004820152602481018690526001600160a01b039190911690634edeb83490604401602060405180830381865afa1580156123ed573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061241191906132c9565b90508015612515576124238185613061565b9350612515609860009054906101000a90046001600160a01b03166001600160a01b031663c415b95c6040518163ffffffff1660e01b81526004016020604051808303816000875af115801561247d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124a19190612eee565b6001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156124de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125029190612eee565b826106cf6065546001600160a01b031690565b505b61252e84846106cf6065546001600160a01b031690565b8294505050509250929050565b6040516001600160a01b03808516602483015283166044820152606481018290526107fd9085906323b872dd60e01b90608401611c67565b60018101546003820154825460028401546000939291612592916130af565b61259c91906130af565b6125a691906130af565b1592915050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008060005b83604001515181101561264f578360400151818151811061262857612628612fa2565b60200260200101518261263b919061307a565b91508061264781612fce565b915050612605565b50612710811480156126675750825151604084015151145b801561269d575060208301518351805161268390600190613061565b8151811061269357612693612fa2565b6020026020010151105b80156126af5750825151606084015151145b9392505050565b60606126c584846000856126cd565b949350505050565b60608247101561272e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610ff8565b600080866001600160a01b0316858760405161274a919061332d565b60006040518083038185875af1925050503d8060008114612787576040519150601f19603f3d011682016040523d82523d6000602084013e61278c565b606091505b509150915061279d878383876127a8565b979650505050505050565b60608315612817578251600003612810576001600160a01b0385163b6128105760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610ff8565b50816126c5565b6126c5838381511561282c5781518083602001fd5b8060405162461bcd60e51b8152600401610ff89190612a22565b828054828255906000526020600020908101928215612881579160200282015b82811115612881578251825591602001919060010190612866565b5061288d929150612891565b5090565b5b8082111561288d5760008155600101612892565b6001600160a01b038116811461056f57600080fd5b6000602082840312156128cd57600080fd5b81356126af816128a6565b600080604083850312156128eb57600080fd5b8235915060208301356128fd816128a6565b809150509250929050565b60008083601f84011261291a57600080fd5b50813567ffffffffffffffff81111561293257600080fd5b6020830191508360208260051b85010111156110ce57600080fd5b6000806000806040858703121561296357600080fd5b843567ffffffffffffffff8082111561297b57600080fd5b61298788838901612908565b909650945060208701359150808211156129a057600080fd5b506129ad87828801612908565b95989497509550505050565b6000602082840312156129cb57600080fd5b5035919050565b60005b838110156129ed5781810151838201526020016129d5565b50506000910152565b60008151808452612a0e8160208601602086016129d2565b601f01601f19169290920160200192915050565b6020815260006126af60208301846129f6565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612a7457612a74612a35565b604052919050565b600067ffffffffffffffff821115612a9657612a96612a35565b5060051b60200190565b600082601f830112612ab157600080fd5b81356020612ac6612ac183612a7c565b612a4b565b82815260059290921b84018101918181019086841115612ae557600080fd5b8286015b84811015612b005780358352918301918301612ae9565b509695505050505050565b600080600080600080600080600080600060c08c8e031215612b2c57600080fd5b67ffffffffffffffff808d351115612b4357600080fd5b612b508e8e358f01612908565b909c509a5060208d0135811015612b6657600080fd5b612b768e60208f01358f01612908565b909a50985060408d0135811015612b8c57600080fd5b612b9c8e60408f01358f01612908565b909850965060608d0135811015612bb257600080fd5b612bc28e60608f01358f01612908565b909650945060808d0135811015612bd857600080fd5b612be88e60808f01358f01612908565b909450925060a08d0135811015612bfe57600080fd5b50612c0f8d60a08e01358e01612aa0565b90509295989b509295989b9093969950565b60008060008060008060c08789031215612c3a57600080fd5b8635612c45816128a6565b9860208801359850604088013597606081013597506080810135965060a00135945092505050565b60008060008060008060008060a0898b031215612c8957600080fd5b88359750602089013567ffffffffffffffff80821115612ca857600080fd5b612cb48c838d01612908565b909950975060408b0135965060608b0135915080821115612cd457600080fd5b612ce08c838d01612908565b909650945060808b0135915080821115612cf957600080fd5b50612d068b828c01612908565b999c989b5096995094979396929594505050565b60008060408385031215612d2d57600080fd5b50508035926020909101359150565b600082601f830112612d4d57600080fd5b81356020612d5d612ac183612a7c565b82815260059290921b84018101918181019086841115612d7c57600080fd5b8286015b84811015612b0057803567ffffffffffffffff811115612da05760008081fd5b612dae8986838b0101612aa0565b845250918301918301612d80565b600080600080600080600080600060a08a8c031215612dda57600080fd5b893567ffffffffffffffff80821115612df257600080fd5b612dfe8d838e01612908565b909b50995060208c0135915080821115612e1757600080fd5b612e238d838e01612908565b909950975060408c0135915080821115612e3c57600080fd5b612e488d838e01612908565b909750955060608c0135915080821115612e6157600080fd5b612e6d8d838e01612908565b909550935060808c0135915080821115612e8657600080fd5b50612e938c828d01612d3c565b9150509295985092959850929598565b600080600060608486031215612eb857600080fd5b8335612ec3816128a6565b92506020840135612ed3816128a6565b91506040840135612ee3816128a6565b809150509250925092565b600060208284031215612f0057600080fd5b81516126af816128a6565b81835260006001600160fb1b03831115612f2457600080fd5b8260051b80836020870137939093016020019392505050565b604081526000612f51604083018688612f0b565b8281036020848101919091528482528591810160005b86811015612f95578335612f7a816128a6565b6001600160a01b031682529282019290820190600101612f67565b5098975050505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201612fe057612fe0612fb8565b5060010190565b600081518084526020808501945080840160005b8381101561301757815187529582019590820190600101612ffb565b509495945050505050565b6080815260006130356080830187612fe7565b856020840152828103604084015261304d8186612fe7565b9050828103606084015261279d8185612fe7565b8181038181111561307457613074612fb8565b92915050565b8082018082111561307457613074612fb8565b6000826130aa57634e487b7160e01b600052601260045260246000fd5b500490565b808202811582820484141761307457613074612fb8565b6040815260006130da604083018688612f0b565b828103602084015261279d818587612f0b565b6000808335601e1984360301811261310457600080fd5b83018035915067ffffffffffffffff82111561311f57600080fd5b6020019150600581901b36038213156110ce57600080fd5b63ffffffff60e01b85168152606060208201528260608201528284608083013760008184016080908101919091526001600160a01b03929092166040820152601f909201601f19169091010192915050565b6000806040838503121561319c57600080fd5b8251915060208301516128fd816128a6565b600082601f8301126131bf57600080fd5b815160206131cf612ac183612a7c565b82815260059290921b840181019181810190868411156131ee57600080fd5b8286015b84811015612b0057805183529183019183016131f2565b6000806040838503121561321c57600080fd5b825167ffffffffffffffff8082111561323457600080fd5b613240868387016131ae565b9350602085015191508082111561325657600080fd5b50613263858286016131ae565b9150509250929050565b63ffffffff60e01b8416815260606020820152600061328f60608301856129f6565b905060018060a01b0383166040830152949350505050565b6000602082840312156132b957600080fd5b815180151581146126af57600080fd5b6000602082840312156132db57600080fd5b5051919050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000825161333f8184602087016129d2565b919091019291505056fea264697066735822122076b554f775158c86af5b13cc9b49273cddf9a294c8312e45f9ea9dc8e3ec7d3f64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "calculateAmountClaimable(uint256)": {
        "details": "This is the most complex part of the smart contract. Quite a bit of calculations are performed here.",
        "params": {
          "actualId": "The ID of the actual unlocking schedule that we are working with."
        },
        "returns": {
          "deltaAmountClaimable": "Amount of tokens claimable right now.",
          "updatedAmountClaimed": "New total amount of tokens claimed. This is the sum of all previously claimed tokens and deltaAmountClaimable."
        }
      },
      "cancel(uint256,address)": {
        "details": "Emits: ActualCancelled. - Only callable by the owner if no access control delegate is set. If delegate is set, access by anyone other than the owner depends on the return value of the delegate.",
        "params": {
          "actualId": "The ID of the actual unlocking schedule that we are intending to cancel.",
          "refundFounderAddress": "The address that the locked tokens will be sent to. This does not have to be a founder's address. Using the zero address means withdraw to sender's address."
        }
      },
      "claim(uint256,address)": {
        "details": "Emits: TokensClaimed. - Only callable by the owner of the FutureToken if no access control delegate is set. If delegate is set, access by anyone other than the FutureToken owner depends on the return value of the delegate.",
        "params": {
          "actualId": "The ID of the actual unlocking schedule that we are intending to claim from.",
          "overrideRecipient": "If we want to send the claimed tokens to an address other than the owner of the FutureToken. This MUST pass through access control, otherwise it will revert. If we want to send the claimed tokens to the owner of the FutureToken (default behavior), pass in `ethers.constants.AddressZero`."
        }
      },
      "claimCancelledActual(uint256,address)": {
        "details": "Emits: TokensClaimed. - Only callable by the owner of the FutureToken if no access control delegate is set. If delegate is set, access by anyone other than the FutureToken owner depends on the return value of the delegate.",
        "params": {
          "actualId": "The ID of the actual unlocking schedule that we are intending to claim from.",
          "overrideRecipient": "If we want to send the claimed tokens to an address other than the owner of the FutureToken. This MUST pass through access control, otherwise it will revert. If we want to send the claimed tokens to the owner of the FutureToken (default behavior), pass in `ethers.constants.AddressZero`."
        }
      },
      "createActual(address,bytes32,uint256,uint256,uint256,uint256)": {
        "details": "Emits: ActualCreated, TokensDeposited (only if amountDepositingNow > 0). - A FutureToken is minted in the process w/ tokenId == actualId; - If amountDepositingNow > 0, the caller must call approve() on the project token first so safeTransfer() does not revert - There is no minimum deposit - Only callable by the owner if no access control delegate is set. If delegate is set, access by anyone other than the owner depends on the return value of the delegate.",
        "params": {
          "amountDepositingNow": "You can deposit some amount of tokens when creating the actual schedule for convenience. If the amount deposited is insufficient when the stakeholder attempts to claim, the transaction will revert.",
          "amountSkipped": "If the project is being transferred into TokenTable from a different platform, we can skip over what's already been unlocked to keep the progress consistent.",
          "presetId": "The ID of the preset we are trying to create. This is determined off-chain and it can be anything that doesn't exist yet.",
          "recipient": "The address of the stakeholder. A FutureToken will be minted to that address.",
          "startTimestampAbsolute": "When the unlocking schedule should start in UNIX epoch timestamp (seconds). Cannot be in the past.",
          "totalAmount": "The total amount of tokens to be unlocked."
        }
      },
      "createPreset(bytes32,uint256[],uint256,uint256[],uint256[])": {
        "details": "Emits: PresetCreated. - Only callable by the owner if no access control delegate is set. If delegate is set, access by anyone other than the owner depends on the return value of the delegate.",
        "params": {
          "linearBips": "Basis points (percentage of the total amount unlocked) for each linear period. This must add up to BIPS_PRECISION.",
          "linearEndTimestampRelative": "The relative end timestamp of the entire linear unlocking schedule.",
          "linearStartTimestampsRelative": "The relative start timestamps of linear periods.",
          "numOfUnlocksForEachLinear": "The number of unlocks for each linear unlocking period. The minimum value is 1 (unchecked).",
          "presetId": "The ID of the preset we are trying to create. This is determined off-chain and it can be anything that doesn't exist yet."
        }
      },
      "deposit(uint256,uint256)": {
        "details": "Emits: TokensDeposited. - The caller must call approve() on the project token first so safeTransfer() does not revert. - There is no minimum deposit. - Only callable by the owner if no access control delegate is set. If delegate is set, access by anyone other than the owner depends on the return value of the delegate.",
        "params": {
          "actualId": "The ID of the actual unlocking schedule that we are intending to deposit into.",
          "amount": "The amount of project tokens to be deposited."
        }
      },
      "getEncodedPreset(bytes32)": {
        "details": "To decode in JS, use:  ethers.utils.defaultAbiCoder.decode(      ['uint256[]', 'uint256', 'uint256[]', 'uint256[]'],      encodedPreset  )",
        "params": {
          "presetId": "The ID of the preset we are trying to read."
        }
      },
      "initialize(address,address,address)": {
        "details": "Exposing the initializer."
      },
      "setAccessControlDelegate(address)": {
        "details": "Only callable by the owner."
      },
      "withdrawDeposit(uint256,uint256)": {
        "details": "Emits: TokensWithdrawn. - Only callable by the owner if no access control delegate is set. If delegate is set, access by anyone other than the owner depends on the return value of the delegate.",
        "params": {
          "actualId": "The ID of the actual unlocking schedule that we are intending to withdraw from.",
          "amount": "The amount of project tokens to be withdrawn."
        }
      }
    },
    "stateVariables": {
      "isAccessControllable": {
        "details": "Exposes the public variable."
      },
      "isCancelable": {
        "details": "Exposes the public variable."
      },
      "isHookable": {
        "details": "Exposes the public variable."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "calculateAmountClaimable(uint256)": {
        "notice": "Calculates the amount of unlocked tokens that have yet to be claimed in an actual unlocking schedule."
      },
      "cancel(uint256,address)": {
        "notice": "Cancels an actual unlocking schedule effective immediately. Tokens not yet claimed but already unlocked will be tallied."
      },
      "claim(uint256,address)": {
        "notice": "Claims claimable tokens for the specified actualId. If the caller is the owner of the actualId or has permission, then the tokens can be claimed to a different address (as specified in args)"
      },
      "claimCancelledActual(uint256,address)": {
        "notice": "Claims claimable tokens for the specified CANCELLED actualId. If the caller is the owner of the actualId or has permission, then the tokens can be claimed to a different address (as specified in args)"
      },
      "createActual(address,bytes32,uint256,uint256,uint256,uint256)": {
        "notice": "Creates an actual unlocking schedule based on a preset."
      },
      "createPreset(bytes32,uint256[],uint256,uint256[],uint256[])": {
        "notice": "Creates an unlocking schedule preset template."
      },
      "deposit(uint256,uint256)": {
        "notice": "Makes a deposit into an actual unlocking schedule."
      },
      "disableAccessControlDelegate()": {
        "notice": "Permanently disables the access control delegate."
      },
      "disableCancel()": {
        "notice": "Permanently disables the cancel() function."
      },
      "disableHook()": {
        "notice": "Permanently disables the hook."
      },
      "getEncodedPreset(bytes32)": {
        "notice": "Returns an ABI-encoded preset, as nested objects cannot be returned directly in Solidity."
      },
      "setAccessControlDelegate(address)": {
        "notice": "Sets the access control delegate used to control claim behavior."
      },
      "withdrawDeposit(uint256,uint256)": {
        "notice": "Withdraws existing locked deposit from an actual schedule."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/core/TokenTableUnlockerV2.sol:TokenTableUnlockerV2",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 141,
        "contract": "contracts/core/TokenTableUnlockerV2.sol:TokenTableUnlockerV2",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 698,
        "contract": "contracts/core/TokenTableUnlockerV2.sol:TokenTableUnlockerV2",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/core/TokenTableUnlockerV2.sol:TokenTableUnlockerV2",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/core/TokenTableUnlockerV2.sol:TokenTableUnlockerV2",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2812,
        "contract": "contracts/core/TokenTableUnlockerV2.sol:TokenTableUnlockerV2",
        "label": "_projectToken",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 314,
        "contract": "contracts/core/TokenTableUnlockerV2.sol:TokenTableUnlockerV2",
        "label": "_status",
        "offset": 0,
        "slot": "102",
        "type": "t_uint256"
      },
      {
        "astId": 372,
        "contract": "contracts/core/TokenTableUnlockerV2.sol:TokenTableUnlockerV2",
        "label": "__gap",
        "offset": 0,
        "slot": "103",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2901,
        "contract": "contracts/core/TokenTableUnlockerV2.sol:TokenTableUnlockerV2",
        "label": "deployer",
        "offset": 0,
        "slot": "152",
        "type": "t_contract(ITTUDeployer)4899"
      },
      {
        "astId": 2904,
        "contract": "contracts/core/TokenTableUnlockerV2.sol:TokenTableUnlockerV2",
        "label": "futureToken",
        "offset": 0,
        "slot": "153",
        "type": "t_contract(ITTFutureTokenV2)4807"
      },
      {
        "astId": 2907,
        "contract": "contracts/core/TokenTableUnlockerV2.sol:TokenTableUnlockerV2",
        "label": "accessControlDelegate",
        "offset": 0,
        "slot": "154",
        "type": "t_contract(ITTAccessControlDelegate)4770"
      },
      {
        "astId": 2910,
        "contract": "contracts/core/TokenTableUnlockerV2.sol:TokenTableUnlockerV2",
        "label": "hook",
        "offset": 0,
        "slot": "155",
        "type": "t_contract(ITTHook)4821"
      },
      {
        "astId": 2913,
        "contract": "contracts/core/TokenTableUnlockerV2.sol:TokenTableUnlockerV2",
        "label": "isCancelable",
        "offset": 20,
        "slot": "155",
        "type": "t_bool"
      },
      {
        "astId": 2916,
        "contract": "contracts/core/TokenTableUnlockerV2.sol:TokenTableUnlockerV2",
        "label": "isAccessControllable",
        "offset": 21,
        "slot": "155",
        "type": "t_bool"
      },
      {
        "astId": 2919,
        "contract": "contracts/core/TokenTableUnlockerV2.sol:TokenTableUnlockerV2",
        "label": "isHookable",
        "offset": 22,
        "slot": "155",
        "type": "t_bool"
      },
      {
        "astId": 2924,
        "contract": "contracts/core/TokenTableUnlockerV2.sol:TokenTableUnlockerV2",
        "label": "_unlockingSchedulePresets",
        "offset": 0,
        "slot": "156",
        "type": "t_mapping(t_bytes32,t_struct(UnlockingSchedulePreset)5218_storage)"
      },
      {
        "astId": 2929,
        "contract": "contracts/core/TokenTableUnlockerV2.sol:TokenTableUnlockerV2",
        "label": "unlockingScheduleActuals",
        "offset": 0,
        "slot": "157",
        "type": "t_mapping(t_uint256,t_struct(UnlockingScheduleActual)5229_storage)"
      },
      {
        "astId": 2933,
        "contract": "contracts/core/TokenTableUnlockerV2.sol:TokenTableUnlockerV2",
        "label": "amountUnlockedLeftoverForActuals",
        "offset": 0,
        "slot": "158",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ITTAccessControlDelegate)4770": {
        "encoding": "inplace",
        "label": "contract ITTAccessControlDelegate",
        "numberOfBytes": "20"
      },
      "t_contract(ITTFutureTokenV2)4807": {
        "encoding": "inplace",
        "label": "contract ITTFutureTokenV2",
        "numberOfBytes": "20"
      },
      "t_contract(ITTHook)4821": {
        "encoding": "inplace",
        "label": "contract ITTHook",
        "numberOfBytes": "20"
      },
      "t_contract(ITTUDeployer)4899": {
        "encoding": "inplace",
        "label": "contract ITTUDeployer",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_struct(UnlockingSchedulePreset)5218_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct UnlockingSchedulePreset)",
        "numberOfBytes": "32",
        "value": "t_struct(UnlockingSchedulePreset)5218_storage"
      },
      "t_mapping(t_uint256,t_struct(UnlockingScheduleActual)5229_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct UnlockingScheduleActual)",
        "numberOfBytes": "32",
        "value": "t_struct(UnlockingScheduleActual)5229_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(UnlockingScheduleActual)5229_storage": {
        "encoding": "inplace",
        "label": "struct UnlockingScheduleActual",
        "members": [
          {
            "astId": 5220,
            "contract": "contracts/core/TokenTableUnlockerV2.sol:TokenTableUnlockerV2",
            "label": "presetId",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 5222,
            "contract": "contracts/core/TokenTableUnlockerV2.sol:TokenTableUnlockerV2",
            "label": "startTimestampAbsolute",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5224,
            "contract": "contracts/core/TokenTableUnlockerV2.sol:TokenTableUnlockerV2",
            "label": "amountClaimed",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5226,
            "contract": "contracts/core/TokenTableUnlockerV2.sol:TokenTableUnlockerV2",
            "label": "amountDeposited",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5228,
            "contract": "contracts/core/TokenTableUnlockerV2.sol:TokenTableUnlockerV2",
            "label": "totalAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(UnlockingSchedulePreset)5218_storage": {
        "encoding": "inplace",
        "label": "struct UnlockingSchedulePreset",
        "members": [
          {
            "astId": 5209,
            "contract": "contracts/core/TokenTableUnlockerV2.sol:TokenTableUnlockerV2",
            "label": "linearStartTimestampsRelative",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 5211,
            "contract": "contracts/core/TokenTableUnlockerV2.sol:TokenTableUnlockerV2",
            "label": "linearEndTimestampRelative",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5214,
            "contract": "contracts/core/TokenTableUnlockerV2.sol:TokenTableUnlockerV2",
            "label": "linearBips",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 5217,
            "contract": "contracts/core/TokenTableUnlockerV2.sol:TokenTableUnlockerV2",
            "label": "numOfUnlocksForEachLinear",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
