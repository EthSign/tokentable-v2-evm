{
  "address": "0x03688D459F172B058d39241456Ae213FC4E26941",
  "abi": [
    {
      "inputs": [],
      "name": "AlreadyDeployed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "feeCollector",
          "type": "address"
        }
      ],
      "name": "FeeCollectorChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "unlockerImpl",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "futureTokenImpl",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "trackerTokenImpl",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "beaconManagerImpl",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "feeCollector",
          "type": "address"
        }
      ],
      "name": "TTUDeployerInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "projectId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "unlocker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "futureToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "trackerToken",
          "type": "address"
        }
      ],
      "name": "TokenTableSuiteDeployed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "beaconManager",
      "outputs": [
        {
          "internalType": "contract TTUV2BeaconManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "projectToken",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "projectId",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "disableAutoUpgrade",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "allowTransferableFT",
          "type": "bool"
        }
      ],
      "name": "deployTTSuite",
      "outputs": [
        {
          "internalType": "contract ITokenTableUnlockerV2",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "contract ITTFutureTokenV2",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "contract ITTTrackerTokenV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeCollector",
      "outputs": [
        {
          "internalType": "contract ITTUFeeCollector",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "registry",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract TTUV2BeaconManager",
          "name": "_beaconManager",
          "type": "address"
        }
      ],
      "name": "setBeaconManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ITTUFeeCollector",
          "name": "feeCollector_",
          "type": "address"
        }
      ],
      "name": "setFeeCollector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0a569fd2a0803651c4c7004787b398e291e98c9c23ea31eabab32281fa0fbea6",
  "receipt": {
    "to": null,
    "from": "0x55D22d83752a9bE59B8959f97FCf3b2CAbca5094",
    "contractAddress": "0x03688D459F172B058d39241456Ae213FC4E26941",
    "transactionIndex": 0,
    "gasUsed": "1380931",
    "logsBloom": "0x
    "blockHash": "0x5fdd9dd76542f8d0a04a5b0678cfb73ef41b0587bd36a301e5a9846323a5479e",
    "transactionHash": "0x0a569fd2a0803651c4c7004787b398e291e98c9c23ea31eabab32281fa0fbea6",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 41570536,
        "transactionHash": "0x0a569fd2a0803651c4c7004787b398e291e98c9c23ea31eabab32281fa0fbea6",
        "address": "0x03688D459F172B058d39241456Ae213FC4E26941",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000055d22d83752a9be59b8959f97fcf3b2cabca5094"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x5fdd9dd76542f8d0a04a5b0678cfb73ef41b0587bd36a301e5a9846323a5479e"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 41570536,
        "transactionHash": "0x0a569fd2a0803651c4c7004787b398e291e98c9c23ea31eabab32281fa0fbea6",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000055d22d83752a9be59b8959f97fcf3b2cabca5094",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x000000000000000000000000000000000000000000000000021baa6fe493640000000000000000000000000000000000000000000000000005ff1aa4d027c67e0000000000000000000000000000000000000000000034f10b9db81935ff22ee00000000000000000000000000000000000000000000000003e37034eb94627e0000000000000000000000000000000000000000000034f10db962891a9286ee",
        "logIndex": 1,
        "blockHash": "0x5fdd9dd76542f8d0a04a5b0678cfb73ef41b0587bd36a301e5a9846323a5479e"
      }
    ],
    "blockNumber": 41570536,
    "cumulativeGasUsed": "1380931",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "021a07a15f9bce891ed814f5bd0e945a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AlreadyDeployed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeCollector\",\"type\":\"address\"}],\"name\":\"FeeCollectorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"unlockerImpl\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"futureTokenImpl\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trackerTokenImpl\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beaconManagerImpl\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeCollector\",\"type\":\"address\"}],\"name\":\"TTUDeployerInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"projectId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"unlocker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"futureToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trackerToken\",\"type\":\"address\"}],\"name\":\"TokenTableSuiteDeployed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"beaconManager\",\"outputs\":[{\"internalType\":\"contract TTUV2BeaconManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"projectToken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"projectId\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"disableAutoUpgrade\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"allowTransferableFT\",\"type\":\"bool\"}],\"name\":\"deployTTSuite\",\"outputs\":[{\"internalType\":\"contract ITokenTableUnlockerV2\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"contract ITTFutureTokenV2\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"contract ITTTrackerTokenV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"contract ITTUFeeCollector\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract TTUV2BeaconManager\",\"name\":\"_beaconManager\",\"type\":\"address\"}],\"name\":\"setBeaconManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITTUFeeCollector\",\"name\":\"feeCollector_\",\"type\":\"address\"}],\"name\":\"setFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deployTTSuite(address,string,bool,bool)\":{\"details\":\"Emits: TokenTableSuiteDeployed. Throws: AlreadyDeployed().\",\"params\":{\"allowTransferableFT\":\"Allow FutureToken to be transferable.\",\"disableAutoUpgrade\":\"When set to false, a Clone instead of a BeaconProxy is created to prevent future upgradeability.\",\"projectId\":\"A unique projectId (otherwise will revert).\",\"projectToken\":\"The project token.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"feeCollector\":{\"details\":\"Exposes the fee collector variable.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deployTTSuite(address,string,bool,bool)\":{\"notice\":\"Deploys and configures a new set of TokenTable products.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/proxy/TTUDeployerLite.sol\":\"TTUDeployerLite\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabf3f59bc0e5423eae45e459dbe92e7052c6983628d39008590edc852a62f94a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/beacon/BeaconProxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IBeacon.sol\\\";\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"../ERC1967/ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that gets the implementation address for each call from an {UpgradeableBeacon}.\\n *\\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\\n * conflict with the storage layout of the implementation behind the proxy.\\n *\\n * _Available since v3.4._\\n */\\ncontract BeaconProxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the proxy with `beacon`.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\\n     * will typically be an encoded function call, and allows initializing the storage of the proxy like a Solidity\\n     * constructor.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract with the interface {IBeacon}.\\n     */\\n    constructor(address beacon, bytes memory data) payable {\\n        _upgradeBeaconToAndCall(beacon, data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current beacon address.\\n     */\\n    function _beacon() internal view virtual returns (address) {\\n        return _getBeacon();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address of the associated beacon.\\n     */\\n    function _implementation() internal view virtual override returns (address) {\\n        return IBeacon(_getBeacon()).implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the proxy to use a new beacon. Deprecated: see {_upgradeBeaconToAndCall}.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract.\\n     * - The implementation returned by `beacon` must be a contract.\\n     */\\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\\n        _upgradeBeaconToAndCall(beacon, data, false);\\n    }\\n}\\n\",\"keccak256\":\"0x85439e74ab467b6a23d45d32bdc9506cbc3760320289afd605f11638c4138e95\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/UpgradeableBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IBeacon.sol\\\";\\nimport \\\"../../access/Ownable.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their\\n * implementation contract, which is where they will delegate all function calls.\\n *\\n * An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.\\n */\\ncontract UpgradeableBeacon is IBeacon, Ownable {\\n    address private _implementation;\\n\\n    /**\\n     * @dev Emitted when the implementation returned by the beacon is changed.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Sets the address of the initial implementation, and the deployer account as the owner who can upgrade the\\n     * beacon.\\n     */\\n    constructor(address implementation_) {\\n        _setImplementation(implementation_);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function implementation() public view virtual override returns (address) {\\n        return _implementation;\\n    }\\n\\n    /**\\n     * @dev Upgrades the beacon to a new implementation.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * Requirements:\\n     *\\n     * - msg.sender must be the owner of the contract.\\n     * - `newImplementation` must be a contract.\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyOwner {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Sets the implementation contract address for this beacon\\n     *\\n     * Requirements:\\n     *\\n     * - `newImplementation` must be a contract.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"UpgradeableBeacon: implementation is not a contract\\\");\\n        _implementation = newImplementation;\\n    }\\n}\\n\",\"keccak256\":\"0x6ec71aef5659f3f74011169948d2fcda8c6599be5bb38f986380a8737f96cc0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"contracts/interfaces/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\ninterface IOwnable {\\n    function renounceOwnership() external;\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function owner() external view returns (address);\\n}\\n\",\"keccak256\":\"0xa44768e9a76737a2b848719ea3a418a188980c61e6726c62b52bad044c95c92c\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ITTFutureTokenV2.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport {IERC721AQueryableUpgradeable} from \\\"erc721a-upgradeable/contracts/interfaces/IERC721AQueryableUpgradeable.sol\\\";\\n\\ninterface ITTFutureTokenV2 is IERC721AQueryableUpgradeable {\\n    function initialize(address projectToken, bool allowTransfer_) external;\\n\\n    function setAuthorizedMinterSingleUse(address authorizedMinter_) external;\\n\\n    function safeMint(address to) external returns (uint256 tokenId);\\n\\n    function getClaimInfo(\\n        uint256 tokenId\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 deltaAmountClaimable,\\n            uint256 amountAlreadyClaimed,\\n            bool isCancelable\\n        );\\n}\\n\",\"keccak256\":\"0x01431983d120cc918195bf19728f348819cbf759068cf2175d1743d76f82e3a1\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ITTTrackerTokenV2.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\ninterface ITTTrackerTokenV2 {\\n    function initialize(address ttuInstance_) external;\\n}\\n\",\"keccak256\":\"0x5be43a6966b728191e5c6036f56285149900554c98749c24b8b6b6934b942914\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ITTUDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport {ITokenTableUnlockerV2} from \\\"./ITokenTableUnlockerV2.sol\\\";\\nimport {ITTFutureTokenV2} from \\\"./ITTFutureTokenV2.sol\\\";\\nimport {ITTTrackerTokenV2} from \\\"./ITTTrackerTokenV2.sol\\\";\\nimport {ITTUFeeCollector} from \\\"./ITTUFeeCollector.sol\\\";\\n\\n/**\\n * @title TTUDeployer\\n * @author Jack Xu @ EthSign\\n * @dev This is the deployer for all TokenTable core and proxy contracts. All\\n * initial setup and configuration is automatically done here.\\n *\\n * To save gas and enable easy upgradeability, all deployed contracts are\\n * beacon proxy instances.\\n *\\n * You should avoid deploying TokenTable contracts individually unless you know\\n * what you're doing.\\n */\\ninterface ITTUDeployer {\\n    event TTUDeployerInitialized(\\n        address unlockerImpl,\\n        address futureTokenImpl,\\n        address trackerTokenImpl,\\n        address beaconManagerImpl,\\n        address feeCollector\\n    );\\n    event TokenTableSuiteDeployed(\\n        address by,\\n        string projectId,\\n        address unlocker,\\n        address futureToken,\\n        address trackerToken\\n    );\\n    event FeeCollectorChanged(address feeCollector);\\n\\n    error AlreadyDeployed(); // 0xa6ef0ba1\\n\\n    /**\\n     * @dev Exposes the fee collector variable.\\n     */\\n    function feeCollector() external returns (ITTUFeeCollector);\\n\\n    /**\\n     * @notice Deploys and configures a new set of TokenTable products.\\n     * @dev Emits: TokenTableSuiteDeployed. Throws: AlreadyDeployed().\\n     * @param projectToken The project token.\\n     * @param projectId A unique projectId (otherwise will revert).\\n     * @param disableAutoUpgrade When set to false, a Clone instead of a\\n     * BeaconProxy is created to prevent future upgradeability.\\n     * @param allowTransferableFT Allow FutureToken to be transferable.\\n     */\\n    function deployTTSuite(\\n        address projectToken,\\n        string calldata projectId,\\n        bool disableAutoUpgrade,\\n        bool allowTransferableFT\\n    )\\n        external\\n        returns (ITokenTableUnlockerV2, ITTFutureTokenV2, ITTTrackerTokenV2);\\n}\\n\",\"keccak256\":\"0xf27453934e922a75ca768e1d5f099ca5b655d338aee661e1ee0cdb1d62277544\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ITTUFeeCollector.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport {IOwnable} from \\\"./IOwnable.sol\\\";\\n\\n/**\\n * @title ITTUFeeCollector\\n * @author Jack Xu @ EthSign\\n * @dev TTUFeeCollector handles service fee calculation.\\n */\\ninterface ITTUFeeCollector is IOwnable {\\n    event DefaultFeeSet(uint256 bips);\\n    event CustomFeeSet(address unlockerAddress, uint256 bips);\\n\\n    /**\\n     * @notice Returns the amount of tokens deducted as fees.\\n     */\\n    function getFee(\\n        address unlockerAddress,\\n        uint256 tokenTransferred\\n    ) external view returns (uint256 tokensCollected);\\n}\\n\",\"keccak256\":\"0x2a207f87fc5895bce66010005f7b89363fafe05a72b1b627fff1839142aea0cb\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ITokenTableUnlockerV2.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport {IOwnable} from \\\"./IOwnable.sol\\\";\\n\\n/**\\n * @title ITokenTableUnlockerV2\\n * @author Jack Xu @ EthSign\\n * @dev The lightweight interface for TokenTableUnlockerV2, which handles token\\n * unlocking and distribution for TokenTable.\\n */\\nabstract contract ITokenTableUnlockerV2 is IOwnable {\\n    event PresetCreated(bytes32 presetId);\\n    event ActualCreated(bytes32 presetId, uint256 actualId);\\n    event TokensDeposited(uint256 actualId, uint256 amount);\\n    event TokensClaimed(\\n        uint256 actualId,\\n        address caller,\\n        address to,\\n        uint256 amount\\n    );\\n    event TokensWithdrawn(uint256 actualId, address by, uint256 amount);\\n    event ActualCancelled(\\n        uint256 actualId,\\n        uint256 amountUnlockedLeftover,\\n        uint256 amountRefunded,\\n        address refundFounderAddress\\n    );\\n\\n    error InvalidPresetFormat(); // 0x0ef8e8dc\\n    error PresetExists(); // 0x7cbb15b4\\n    error PresetDoesNotExist(); // 0xbd88ff7b\\n    error InvalidSkipAmount(); // 0x78c0fc43\\n    error InsufficientDeposit(\\n        uint256 deltaAmountClaimable,\\n        uint256 amountDeposited\\n    ); // 0x25c3f46e\\n    error NotPermissioned(); // 0x7f63bd0f\\n\\n    /**\\n     * @dev Exposing the initializer.\\n     */\\n    function initialize(\\n        address projectToken,\\n        address futureToken_,\\n        address deployer_\\n    ) external virtual;\\n\\n    /**\\n     * @notice Creates an unlocking schedule preset template.\\n     * @dev Emits: PresetCreated.\\n     * - Only callable by the owner if no access control delegate is set. If\\n     * delegate is set, access by anyone other than the owner depends on the\\n     * return value of the delegate.\\n     * @param presetId The ID of the preset we are trying to create. This is\\n     * determined off-chain and it can be anything that doesn't exist yet.\\n     * @param linearStartTimestampsRelative The relative start timestamps of\\n     * linear periods.\\n     * @param linearEndTimestampRelative The relative end timestamp of the\\n     * entire linear unlocking schedule.\\n     * @param linearBips Basis points (percentage of the total amount unlocked)\\n     * for each linear period. This must add up to BIPS_PRECISION.\\n     * @param numOfUnlocksForEachLinear The number of unlocks for each linear\\n     * unlocking period. The minimum value is 1 (unchecked).\\n     */\\n    function createPreset(\\n        bytes32 presetId,\\n        uint256[] calldata linearStartTimestampsRelative,\\n        uint256 linearEndTimestampRelative,\\n        uint256[] calldata linearBips,\\n        uint256[] calldata numOfUnlocksForEachLinear\\n    ) external virtual;\\n\\n    function batchCreatePreset(\\n        bytes32[] calldata presetId,\\n        uint256[][] calldata linearStartTimestampsRelative,\\n        uint256[] calldata linearEndTimestampRelative,\\n        uint256[][] calldata linearBips,\\n        uint256[][] memory numOfUnlocksForEachLinear\\n    ) external virtual;\\n\\n    /**\\n     * @notice Creates an actual unlocking schedule based on a preset.\\n     * @dev Emits: ActualCreated, TokensDeposited (only if amountDepositingNow\\n     * > 0).\\n     * - A FutureToken is minted in the process w/ tokenId == actualId;\\n     * - If amountDepositingNow > 0, the caller must call approve() on the\\n     * project token first so safeTransfer() does not revert\\n     * - There is no minimum deposit\\n     * - Only callable by the owner if no access control delegate is set. If\\n     * delegate is set, access by anyone other than the owner depends on the\\n     * return value of the delegate.\\n     * @param recipient The address of the stakeholder. A FutureToken will be\\n     * minted to that address.\\n     * @param presetId The ID of the preset we are trying to create. This is\\n     * determined off-chain and it can be anything that doesn't exist yet.\\n     * @param startTimestampAbsolute When the unlocking schedule should start\\n     * in UNIX epoch timestamp (seconds). Cannot be in the past.\\n     * @param amountSkipped If the project is being transferred into TokenTable\\n     * from a different platform, we can skip over what's already been unlocked\\n     * to keep the progress consistent.\\n     * @param totalAmount The total amount of tokens to be unlocked.\\n     * @param amountDepositingNow You can deposit some amount of tokens when\\n     * creating the actual schedule for convenience. If the amount deposited is\\n     * insufficient when the stakeholder attempts to claim, the transaction\\n     * will revert.\\n     */\\n    function createActual(\\n        address recipient,\\n        bytes32 presetId,\\n        uint256 startTimestampAbsolute,\\n        uint256 amountSkipped,\\n        uint256 totalAmount,\\n        uint256 amountDepositingNow\\n    ) external virtual;\\n\\n    function batchCreateActual(\\n        address[] calldata recipient,\\n        bytes32[] calldata presetId,\\n        uint256[] calldata startTimestampAbsolute,\\n        uint256[] calldata amountSkipped,\\n        uint256[] calldata totalAmount,\\n        uint256[] memory amountDepositingNow\\n    ) external virtual;\\n\\n    /**\\n     * @notice Makes a deposit into an actual unlocking schedule.\\n     * @dev Emits: TokensDeposited.\\n     * - The caller must call approve() on the project token first so\\n     * safeTransfer() does not revert.\\n     * - There is no minimum deposit.\\n     * - Only callable by the owner if no access control delegate is set. If\\n     * delegate is set, access by anyone other than the owner depends on the\\n     * return value of the delegate.\\n     * @param actualId The ID of the actual unlocking schedule that we are\\n     * intending to deposit into.\\n     * @param amount The amount of project tokens to be deposited.\\n     */\\n    function deposit(uint256 actualId, uint256 amount) external virtual;\\n\\n    function batchDeposit(\\n        uint256[] calldata actualId,\\n        uint256[] calldata amount\\n    ) external virtual;\\n\\n    /**\\n     * @notice Withdraws existing locked deposit from an actual schedule.\\n     * @dev Emits: TokensWithdrawn.\\n     * - Only callable by the owner if no access control delegate is set. If\\n     * delegate is set, access by anyone other than the owner depends on the\\n     * return value of the delegate.\\n     * @param actualId The ID of the actual unlocking schedule that we are\\n     * intending to withdraw from.\\n     * @param amount The amount of project tokens to be withdrawn.\\n     */\\n    function withdrawDeposit(uint256 actualId, uint256 amount) external virtual;\\n\\n    /**\\n     * @notice Claims claimable tokens for the specified actualId. If the\\n     * caller is the owner of the actualId or has permission, then the\\n     * tokens can be claimed to a different address (as specified in args)\\n     * @dev Emits: TokensClaimed.\\n     * - Only callable by the owner of the FutureToken if no access control\\n     * delegate is set. If delegate is set, access by anyone other than the\\n     * FutureToken owner depends on the return value of the delegate.\\n     * @param actualId The ID of the actual unlocking schedule that we are\\n     * intending to claim from.\\n     * @param overrideRecipient If we want to send the claimed tokens to an\\n     * address other than the owner of the FutureToken. This MUST pass through\\n     * access control, otherwise it will revert. If we want to send the claimed\\n     * tokens to the owner of the FutureToken (default behavior), pass in\\n     * `ethers.constants.AddressZero`.\\n     */\\n    function claim(\\n        uint256 actualId,\\n        address overrideRecipient\\n    ) external virtual;\\n\\n    function batchClaim(\\n        uint256[] calldata actualId,\\n        address[] calldata overrideRecipient\\n    ) external virtual;\\n\\n    /**\\n     * @notice Claims claimable tokens for the specified CANCELLED actualId. If\\n     * the caller is the owner of the actualId or has permission, then the\\n     * tokens can be claimed to a different address (as specified in args)\\n     * @dev Emits: TokensClaimed.\\n     * - Only callable by the owner of the FutureToken if no access control\\n     * delegate is set. If delegate is set, access by anyone other than the\\n     * FutureToken owner depends on the return value of the delegate.\\n     * @param actualId The ID of the actual unlocking schedule that we are\\n     * intending to claim from.\\n     * @param overrideRecipient If we want to send the claimed tokens to an\\n     * address other than the owner of the FutureToken. This MUST pass through\\n     * access control, otherwise it will revert. If we want to send the claimed\\n     * tokens to the owner of the FutureToken (default behavior), pass in\\n     * `ethers.constants.AddressZero`.\\n     */\\n    function claimCancelledActual(\\n        uint256 actualId,\\n        address overrideRecipient\\n    ) external virtual;\\n\\n    /**\\n     * @notice Cancels an actual unlocking schedule effective immediately.\\n     * Tokens not yet claimed but already unlocked will be tallied.\\n     * @dev Emits: ActualCancelled.\\n     * - Only callable by the owner if no access control delegate is set. If\\n     * delegate is set, access by anyone other than the owner depends on the\\n     * return value of the delegate.\\n     * @param actualId The ID of the actual unlocking schedule that we are\\n     * intending to cancel.\\n     * @param refundFounderAddress The address that the locked tokens will\\n     * be sent to. This does not have to be a founder's address. Using the zero\\n     * address means withdraw to sender's address.\\n     */\\n    function cancel(\\n        uint256 actualId,\\n        address refundFounderAddress\\n    ) external virtual returns (uint256 amountClaimed, uint256 amountRefunded);\\n\\n    /**\\n     * @notice Sets the access control delegate used to control claim behavior.\\n     * @dev Only callable by the owner.\\n     */\\n    function setAccessControlDelegate(\\n        address accessControlDelegate_\\n    ) external virtual;\\n\\n    /**\\n     * @notice Sets the hook contract.\\n     * @dev Only callable by the owner.\\n     */\\n    function setHook(address hook) external virtual;\\n\\n    /**\\n     * @notice Permanently disables the cancel() function.\\n     */\\n    function disableCancel() external virtual;\\n\\n    /**\\n     * @notice Permanently disables the access control delegate.\\n     */\\n    function disableAccessControlDelegate() external virtual;\\n\\n    /**\\n     * @notice Permanently disables the hook.\\n     */\\n    function disableHook() external virtual;\\n\\n    /**\\n     * @dev Exposes the public variable.\\n     */\\n    function isCancelable() external view virtual returns (bool);\\n\\n    /**\\n     * @dev Exposes the public variable.\\n     */\\n    function isAccessControllable() external view virtual returns (bool);\\n\\n    /**\\n     * @dev Exposes the public variable.\\n     */\\n    function isHookable() external view virtual returns (bool);\\n\\n    /**\\n     * @notice Returns an ABI-encoded preset, as nested objects cannot be\\n     * returned directly in Solidity.\\n     * @dev To decode in JS, use:\\n     *  ethers.utils.defaultAbiCoder.decode(\\n     *      ['uint256[]', 'uint256', 'uint256[]', 'uint256[]'],\\n     *      encodedPreset\\n     *  )\\n     * @param presetId The ID of the preset we are trying to read.\\n     */\\n    function getEncodedPreset(\\n        bytes32 presetId\\n    ) external view virtual returns (bytes memory);\\n\\n    /**\\n     * @notice Calculates the amount of unlocked tokens that have yet to be\\n     * claimed in an actual unlocking schedule.\\n     * @dev This is the most complex part of the smart contract. Quite a bit of\\n     * calculations are performed here.\\n     * @param actualId The ID of the actual unlocking schedule that we are\\n     * working with.\\n     * @return deltaAmountClaimable Amount of tokens claimable right now.\\n     * @return updatedAmountClaimed New total amount of tokens claimed. This is\\n     * the sum of all previously claimed tokens and deltaAmountClaimable.\\n     */\\n    function calculateAmountClaimable(\\n        uint256 actualId\\n    )\\n        public\\n        view\\n        virtual\\n        returns (uint256 deltaAmountClaimable, uint256 updatedAmountClaimed);\\n}\\n\",\"keccak256\":\"0xbee71f48b75bbbccef012d9c3335d13624bc0611e3a37805090904ea090d0913\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(\\n                0x00,\\n                or(\\n                    shr(0xe8, shl(0x60, implementation)),\\n                    0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000\\n                )\\n            )\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(\\n                0x20,\\n                or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3)\\n            )\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(\\n        address implementation,\\n        bytes32 salt\\n    ) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(\\n                0x00,\\n                or(\\n                    shr(0xe8, shl(0x60, implementation)),\\n                    0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000\\n                )\\n            )\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(\\n                0x20,\\n                or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3)\\n            )\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt\\n    ) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x09a35b75022caddf24c9cc1d17c612551d992a3f4fb02b1709bb5150840c6ce0\",\"license\":\"MIT\"},\"contracts/proxy/TTUDeployerLite.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport {ITTUDeployer} from \\\"../interfaces/ITTUDeployer.sol\\\";\\nimport {TTUV2BeaconManager} from \\\"./TTUV2BeaconManager.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {ITokenTableUnlockerV2} from \\\"../interfaces/ITokenTableUnlockerV2.sol\\\";\\nimport {ITTFutureTokenV2} from \\\"../interfaces/ITTFutureTokenV2.sol\\\";\\nimport {ITTTrackerTokenV2} from \\\"../interfaces/ITTTrackerTokenV2.sol\\\";\\nimport {ITTUFeeCollector} from \\\"../interfaces/ITTUFeeCollector.sol\\\";\\nimport {BeaconProxy} from \\\"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\\\";\\nimport {Clones} from \\\"../libraries/Clones.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract TTUDeployerLite is ITTUDeployer, Ownable {\\n    TTUV2BeaconManager public beaconManager;\\n    ITTUFeeCollector public override feeCollector;\\n    mapping(string => bool) public registry;\\n\\n    function setBeaconManager(\\n        TTUV2BeaconManager _beaconManager\\n    ) external onlyOwner {\\n        beaconManager = _beaconManager;\\n    }\\n\\n    function setFeeCollector(\\n        ITTUFeeCollector feeCollector_\\n    ) external onlyOwner {\\n        feeCollector = feeCollector_;\\n        emit FeeCollectorChanged(address(feeCollector));\\n    }\\n\\n    function deployTTSuite(\\n        address projectToken,\\n        string calldata projectId,\\n        bool disableAutoUpgrade,\\n        bool allowTransferableFT\\n    )\\n        external\\n        returns (ITokenTableUnlockerV2, ITTFutureTokenV2, ITTTrackerTokenV2)\\n    {\\n        if (registry[projectId]) revert AlreadyDeployed();\\n        registry[projectId] = true;\\n\\n        ITTFutureTokenV2 futureToken;\\n        ITokenTableUnlockerV2 unlocker;\\n        ITTTrackerTokenV2 trackerToken;\\n        if (disableAutoUpgrade) {\\n            futureToken = ITTFutureTokenV2(\\n                Clones.clone(beaconManager.futureTokenBeacon().implementation())\\n            );\\n            futureToken.initialize(projectToken, allowTransferableFT);\\n            unlocker = ITokenTableUnlockerV2(\\n                Clones.clone(beaconManager.unlockerBeacon().implementation())\\n            );\\n            unlocker.initialize(\\n                projectToken,\\n                address(futureToken),\\n                address(this)\\n            );\\n            trackerToken = ITTTrackerTokenV2(\\n                Clones.clone(\\n                    beaconManager.trackerTokenBeacon().implementation()\\n                )\\n            );\\n            trackerToken.initialize(address(unlocker));\\n        } else {\\n            futureToken = ITTFutureTokenV2(\\n                address(\\n                    new BeaconProxy(\\n                        address(beaconManager.futureTokenBeacon()),\\n                        abi.encodeWithSelector(\\n                            ITTFutureTokenV2.initialize.selector,\\n                            projectToken,\\n                            allowTransferableFT\\n                        )\\n                    )\\n                )\\n            );\\n            unlocker = ITokenTableUnlockerV2(\\n                address(\\n                    new BeaconProxy(\\n                        address(beaconManager.unlockerBeacon()),\\n                        abi.encodeWithSelector(\\n                            ITokenTableUnlockerV2.initialize.selector,\\n                            projectToken,\\n                            futureToken,\\n                            this\\n                        )\\n                    )\\n                )\\n            );\\n            trackerToken = ITTTrackerTokenV2(\\n                address(\\n                    new BeaconProxy(\\n                        address(beaconManager.trackerTokenBeacon()),\\n                        abi.encodeWithSelector(\\n                            ITTTrackerTokenV2.initialize.selector,\\n                            address(unlocker)\\n                        )\\n                    )\\n                )\\n            );\\n        }\\n\\n        unlocker.transferOwnership(msg.sender);\\n        futureToken.setAuthorizedMinterSingleUse(address(unlocker));\\n        emit TokenTableSuiteDeployed(\\n            msg.sender,\\n            projectId,\\n            address(unlocker),\\n            address(futureToken),\\n            address(trackerToken)\\n        );\\n        return (unlocker, futureToken, trackerToken);\\n    }\\n}\\n\",\"keccak256\":\"0x4bdc754c2c1e7c461908648fac30a8409a9da3e7136150d2158cac9d25423939\",\"license\":\"UNLICENSED\"},\"contracts/proxy/TTUV2BeaconManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport {UpgradeableBeacon} from \\\"@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title TTUV2BeaconManager\\n * @author Jack Xu @ EthSign\\n * @dev This contract manages the upgradeable beacons that we use to seamlessly\\n * upgrade TokenTableUnlocker, TTFutureToken, and TTTrackerToken on behalf of\\n * our users in the future.\\n *\\n * This contract should be deployed using TTUDeployer.\\n */\\ncontract TTUV2BeaconManager is Ownable {\\n    UpgradeableBeacon public immutable unlockerBeacon;\\n    UpgradeableBeacon public immutable futureTokenBeacon;\\n    UpgradeableBeacon public immutable trackerTokenBeacon;\\n\\n    constructor(\\n        address unlockerImpl,\\n        address futureTokenImpl,\\n        address trackerTokenImpl\\n    ) {\\n        unlockerBeacon = new UpgradeableBeacon(unlockerImpl);\\n        futureTokenBeacon = new UpgradeableBeacon(futureTokenImpl);\\n        trackerTokenBeacon = new UpgradeableBeacon(trackerTokenImpl);\\n    }\\n\\n    function upgradeUnlocker(address newImpl) external onlyOwner {\\n        unlockerBeacon.upgradeTo(newImpl);\\n    }\\n\\n    function upgradeFutureToken(address newImpl) external onlyOwner {\\n        futureTokenBeacon.upgradeTo(newImpl);\\n    }\\n\\n    function upgradePreviewToken(address newImpl) external onlyOwner {\\n        trackerTokenBeacon.upgradeTo(newImpl);\\n    }\\n}\\n\",\"keccak256\":\"0x72dd1993b92cfca76bbefa8fa1cb66471696544fee905d9fe197834c0dea6633\",\"license\":\"UNLICENSED\"},\"erc721a-upgradeable/contracts/IERC721AUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Interface of ERC721A.\\n */\\ninterface IERC721AUpgradeable {\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error ApprovalCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error ApprovalQueryForNonexistentToken();\\n\\n    /**\\n     * Cannot query the balance for the zero address.\\n     */\\n    error BalanceQueryForZeroAddress();\\n\\n    /**\\n     * Cannot mint to the zero address.\\n     */\\n    error MintToZeroAddress();\\n\\n    /**\\n     * The quantity of tokens minted must be more than zero.\\n     */\\n    error MintZeroQuantity();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error OwnerQueryForNonexistentToken();\\n\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error TransferCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token must be owned by `from`.\\n     */\\n    error TransferFromIncorrectOwner();\\n\\n    /**\\n     * Cannot safely transfer to a contract that does not implement the\\n     * ERC721Receiver interface.\\n     */\\n    error TransferToNonERC721ReceiverImplementer();\\n\\n    /**\\n     * Cannot transfer to the zero address.\\n     */\\n    error TransferToZeroAddress();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error URIQueryForNonexistentToken();\\n\\n    /**\\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\\n     */\\n    error MintERC2309QuantityExceedsLimit();\\n\\n    /**\\n     * The `extraData` cannot be set on an unintialized ownership slot.\\n     */\\n    error OwnershipNotInitializedForExtraData();\\n\\n    // =============================================================\\n    //                            STRUCTS\\n    // =============================================================\\n\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Stores the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n        // Arbitrary data similar to `startTimestamp` that can be set via {_extraData}.\\n        uint24 extraData;\\n    }\\n\\n    // =============================================================\\n    //                         TOKEN COUNTERS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the total number of tokens in existence.\\n     * Burned tokens will reduce the count.\\n     * To get the total number of tokens minted, please see {_totalMinted}.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    // =============================================================\\n    //                            IERC165\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    // =============================================================\\n    //                            IERC721\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables\\n     * (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in `owner`'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`,\\n     * checking first that contract recipients are aware of the ERC721 protocol\\n     * to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move\\n     * this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external payable;\\n\\n    /**\\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom}\\n     * whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the\\n     * zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external payable;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom}\\n     * for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    // =============================================================\\n    //                        IERC721Metadata\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    // =============================================================\\n    //                           IERC2309\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId`\\n     * (inclusive) is transferred from `from` to `to`, as defined in the\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard.\\n     *\\n     * See {_mintERC2309} for more details.\\n     */\\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\\n}\\n\",\"keccak256\":\"0xa8e2bf92476033e48df3911783487b46bcd20f6490a6fdc8c93ca7a0e94bca20\",\"license\":\"MIT\"},\"erc721a-upgradeable/contracts/extensions/IERC721AQueryableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport '../IERC721AUpgradeable.sol';\\n\\n/**\\n * @dev Interface of ERC721AQueryable.\\n */\\ninterface IERC721AQueryableUpgradeable is IERC721AUpgradeable {\\n    /**\\n     * Invalid query range (`start` >= `stop`).\\n     */\\n    error InvalidQueryRange();\\n\\n    /**\\n     * @dev Returns the `TokenOwnership` struct at `tokenId` without reverting.\\n     *\\n     * If the `tokenId` is out of bounds:\\n     *\\n     * - `addr = address(0)`\\n     * - `startTimestamp = 0`\\n     * - `burned = false`\\n     * - `extraData = 0`\\n     *\\n     * If the `tokenId` is burned:\\n     *\\n     * - `addr = <Address of owner before token was burned>`\\n     * - `startTimestamp = <Timestamp when token was burned>`\\n     * - `burned = true`\\n     * - `extraData = <Extra data when token was burned>`\\n     *\\n     * Otherwise:\\n     *\\n     * - `addr = <Address of owner>`\\n     * - `startTimestamp = <Timestamp of start of ownership>`\\n     * - `burned = false`\\n     * - `extraData = <Extra data at start of ownership>`\\n     */\\n    function explicitOwnershipOf(uint256 tokenId) external view returns (TokenOwnership memory);\\n\\n    /**\\n     * @dev Returns an array of `TokenOwnership` structs at `tokenIds` in order.\\n     * See {ERC721AQueryable-explicitOwnershipOf}\\n     */\\n    function explicitOwnershipsOf(uint256[] memory tokenIds) external view returns (TokenOwnership[] memory);\\n\\n    /**\\n     * @dev Returns an array of token IDs owned by `owner`,\\n     * in the range [`start`, `stop`)\\n     * (i.e. `start <= tokenId < stop`).\\n     *\\n     * This function allows for tokens to be queried if the collection\\n     * grows too big for a single call of {ERC721AQueryable-tokensOfOwner}.\\n     *\\n     * Requirements:\\n     *\\n     * - `start < stop`\\n     */\\n    function tokensOfOwnerIn(\\n        address owner,\\n        uint256 start,\\n        uint256 stop\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Returns an array of token IDs owned by `owner`.\\n     *\\n     * This function scans the ownership mapping and is O(`totalSupply`) in complexity.\\n     * It is meant to be called off-chain.\\n     *\\n     * See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into\\n     * multiple smaller scans if the collection is large enough to cause\\n     * an out-of-gas error (10K collections should be fine).\\n     */\\n    function tokensOfOwner(address owner) external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0xf83cc229afc5ac227be4e372ab6a680201b8b25773351c1cd0a588b1b6e53821\",\"license\":\"MIT\"},\"erc721a-upgradeable/contracts/interfaces/IERC721AQueryableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport '../extensions/IERC721AQueryableUpgradeable.sol';\\n\",\"keccak256\":\"0xacb0462122256671a3814a2b74c1f28c64f4a322cad552a62ef607ca558df27c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61179b8061007e6000396000f3fe60806040523480156200001157600080fd5b50600436106200009f5760003560e01c8063a29e2d99116200006e578063a29e2d991462000135578063a42dce801462000177578063c415b95c146200018e578063d30b5ef414620001a2578063f2fde38b14620001b957600080fd5b80635a4fba0214620000a4578063715018a614620000d55780638da5cb5b14620000e157806392a296c914620000f3575b600080fd5b600154620000b8906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b620000df620001d0565b005b6000546001600160a01b0316620000b8565b620001246200010436600462000bbd565b805160208183018101805160038252928201919093012091525460ff1681565b6040519015158152602001620000cc565b6200014c6200014636600462000c9f565b620001e8565b604080516001600160a01b0394851681529284166020840152921691810191909152606001620000cc565b620000df6200018836600462000d51565b62000944565b600254620000b8906001600160a01b031681565b620000df620001b336600462000d51565b620009a2565b620000df620001ca36600462000d51565b620009ce565b620001da62000a51565b620001e6600062000aad565b565b6000806000600387876040516200020192919062000d78565b9081526040519081900360200190205460ff1615620002335760405163a6ef0ba160e01b815260040160405180910390fd5b6001600388886040516200024992919062000d78565b908152604051908190036020019020805491151560ff19909216919091179055600080808715620005405760015460408051631e3997bf60e21b8152905162000351926001600160a01b0316916378e65efc9160048083019260209291908290030181865afa158015620002c1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002e7919062000d88565b6001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000325573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200034b919062000d88565b62000afd565b60405163400ada7560e01b81526001600160a01b038d8116600483015289151560248301529194509084169063400ada7590604401600060405180830381600087803b158015620003a157600080fd5b505af1158015620003b6573d6000803e3d6000fd5b5050505062000412600160009054906101000a90046001600160a01b03166001600160a01b031663ec5319876040518163ffffffff1660e01b8152600401602060405180830381865afa158015620002c1573d6000803e3d6000fd5b60405163c0c53b8b60e01b81526001600160a01b038d8116600483015285811660248301523060448301529193509083169063c0c53b8b90606401600060405180830381600087803b1580156200046857600080fd5b505af11580156200047d573d6000803e3d6000fd5b50505050620004d9600160009054906101000a90046001600160a01b03166001600160a01b031663d63ea2c56040518163ffffffff1660e01b8152600401602060405180830381865afa158015620002c1573d6000803e3d6000fd5b60405163189acdbd60e31b81526001600160a01b0384811660048301529192509082169063c4d66de890602401600060405180830381600087803b1580156200052157600080fd5b505af115801562000536573d6000803e3d6000fd5b5050505062000839565b600160009054906101000a90046001600160a01b03166001600160a01b03166378e65efc6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000594573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620005ba919062000d88565b604080516001600160a01b038e16602482015289151560448083019190915282518083039091018152606490910182526020810180516001600160e01b031663400ada7560e01b1790529051620006119062000b99565b6200061e92919062000da8565b604051809103906000f0801580156200063b573d6000803e3d6000fd5b509250600160009054906101000a90046001600160a01b03166001600160a01b031663ec5319876040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000692573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006b8919062000d88565b604080516001600160a01b038e81166024830152861660448201523060648083019190915282518083039091018152608490910182526020810180516001600160e01b031663c0c53b8b60e01b1790529051620007159062000b99565b6200072292919062000da8565b604051809103906000f0801580156200073f573d6000803e3d6000fd5b509150600160009054906101000a90046001600160a01b03166001600160a01b031663d63ea2c56040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000796573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620007bc919062000d88565b604080516001600160a01b03851660248083019190915282518083039091018152604490910182526020810180516001600160e01b031663189acdbd60e31b17905290516200080b9062000b99565b6200081892919062000da8565b604051809103906000f08015801562000835573d6000803e3d6000fd5b5090505b60405163f2fde38b60e01b81523360048201526001600160a01b0383169063f2fde38b90602401600060405180830381600087803b1580156200087b57600080fd5b505af115801562000890573d6000803e3d6000fd5b5050604051630ab148ff60e31b81526001600160a01b0385811660048301528616925063558a47f89150602401600060405180830381600087803b158015620008d857600080fd5b505af1158015620008ed573d6000803e3d6000fd5b505050507f17df396a3d7d1aee90dda3191f7e75531702775925951ea64827321bbc37412c338b8b8587866040516200092c9695949392919062000e08565b60405180910390a1909a919950975095505050505050565b6200094e62000a51565b600280546001600160a01b0319166001600160a01b0383169081179091556040519081527f9c1996a14d26c3ecd833c10222d012447ef07b09b15000f3a34318ff039c0bdc9060200160405180910390a150565b620009ac62000a51565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b620009d862000a51565b6001600160a01b03811662000a435760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b62000a4e8162000aad565b50565b6000546001600160a01b03163314620001e65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640162000a3a565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008260601b60e81c176000526e5af43d82803e903d91602b57fd5bf38260781b17602052603760096000f090506001600160a01b03811662000b945760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b604482015260640162000a3a565b919050565b6109008062000e6683390190565b634e487b7160e01b600052604160045260246000fd5b60006020828403121562000bd057600080fd5b813567ffffffffffffffff8082111562000be957600080fd5b818401915084601f83011262000bfe57600080fd5b81358181111562000c135762000c1362000ba7565b604051601f8201601f19908116603f0116810190838211818310171562000c3e5762000c3e62000ba7565b8160405282815287602084870101111562000c5857600080fd5b826020860160208301376000928101602001929092525095945050505050565b6001600160a01b038116811462000a4e57600080fd5b8035801515811462000b9457600080fd5b60008060008060006080868803121562000cb857600080fd5b853562000cc58162000c78565b9450602086013567ffffffffffffffff8082111562000ce357600080fd5b818801915088601f83011262000cf857600080fd5b81358181111562000d0857600080fd5b89602082850101111562000d1b57600080fd5b60208301965080955050505062000d356040870162000c8e565b915062000d456060870162000c8e565b90509295509295909350565b60006020828403121562000d6457600080fd5b813562000d718162000c78565b9392505050565b8183823760009101908152919050565b60006020828403121562000d9b57600080fd5b815162000d718162000c78565b60018060a01b038316815260006020604081840152835180604085015260005b8181101562000de65785810183015185820160600152820162000dc8565b506000606082860101526060601f19601f830116850101925050509392505050565b6001600160a01b03878116825260a0602083018190528201869052600090868860c0850137600060c0888501810191909152958116604084015293841660608301525091166080820152601f909201601f1916909101019291505056fe60806040526040516109003803806109008339810160408190526100229161045b565b61002e82826000610035565b5050610585565b61003e83610100565b6040516001600160a01b038416907f1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e90600090a260008251118061007f5750805b156100fb576100f9836001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156100c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100e9919061051b565b836102a360201b6100291760201c565b505b505050565b610113816102cf60201b6100551760201c565b6101725760405162461bcd60e51b815260206004820152602560248201527f455243313936373a206e657720626561636f6e206973206e6f74206120636f6e6044820152641d1c9858dd60da1b60648201526084015b60405180910390fd5b6101e6816001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101d7919061051b565b6102cf60201b6100551760201c565b61024b5760405162461bcd60e51b815260206004820152603060248201527f455243313936373a20626561636f6e20696d706c656d656e746174696f6e206960448201526f1cc81b9bdd08184818dbdb9d1c9858dd60821b6064820152608401610169565b806102827fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d5060001b6102de60201b6100641760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b60606102c883836040518060600160405280602781526020016108d9602791396102e1565b9392505050565b6001600160a01b03163b151590565b90565b6060600080856001600160a01b0316856040516102fe9190610536565b600060405180830381855af49150503d8060008114610339576040519150601f19603f3d011682016040523d82523d6000602084013e61033e565b606091505b5090925090506103508683838761035a565b9695505050505050565b606083156103c95782516000036103c2576001600160a01b0385163b6103c25760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610169565b50816103d3565b6103d383836103db565b949350505050565b8151156103eb5781518083602001fd5b8060405162461bcd60e51b81526004016101699190610552565b80516001600160a01b038116811461041c57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b8381101561045257818101518382015260200161043a565b50506000910152565b6000806040838503121561046e57600080fd5b61047783610405565b60208401519092506001600160401b038082111561049457600080fd5b818501915085601f8301126104a857600080fd5b8151818111156104ba576104ba610421565b604051601f8201601f19908116603f011681019083821181831017156104e2576104e2610421565b816040528281528860208487010111156104fb57600080fd5b61050c836020830160208801610437565b80955050505050509250929050565b60006020828403121561052d57600080fd5b6102c882610405565b60008251610548818460208701610437565b9190910192915050565b6020815260008251806020840152610571816040850160208701610437565b601f01601f19169190910160400192915050565b610345806105946000396000f3fe60806040523661001357610011610017565b005b6100115b610027610022610067565b610100565b565b606061004e83836040518060600160405280602781526020016102e960279139610124565b9392505050565b6001600160a01b03163b151590565b90565b600061009a7fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50546001600160a01b031690565b6001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156100d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100fb919061024c565b905090565b3660008037600080366000845af43d6000803e80801561011f573d6000f35b3d6000fd5b6060600080856001600160a01b0316856040516101419190610299565b600060405180830381855af49150503d806000811461017c576040519150601f19603f3d011682016040523d82523d6000602084013e610181565b606091505b50915091506101928683838761019c565b9695505050505050565b60608315610210578251600003610209576001600160a01b0385163b6102095760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064015b60405180910390fd5b508161021a565b61021a8383610222565b949350505050565b8151156102325781518083602001fd5b8060405162461bcd60e51b815260040161020091906102b5565b60006020828403121561025e57600080fd5b81516001600160a01b038116811461004e57600080fd5b60005b83811015610290578181015183820152602001610278565b50506000910152565b600082516102ab818460208701610275565b9190910192915050565b60208152600082518060208401526102d4816040850160208701610275565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122022a6bf5ebbb7518c40e703958b5c8e4d70ca6715c1e1ccf9e9591bfc86e066d164736f6c63430008110033416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220351acad60da563f05f621bdfa00684f73c72b5ee7ffac215d752ebe0b78dba9a64736f6c63430008110033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b50600436106200009f5760003560e01c8063a29e2d99116200006e578063a29e2d991462000135578063a42dce801462000177578063c415b95c146200018e578063d30b5ef414620001a2578063f2fde38b14620001b957600080fd5b80635a4fba0214620000a4578063715018a614620000d55780638da5cb5b14620000e157806392a296c914620000f3575b600080fd5b600154620000b8906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b620000df620001d0565b005b6000546001600160a01b0316620000b8565b620001246200010436600462000bbd565b805160208183018101805160038252928201919093012091525460ff1681565b6040519015158152602001620000cc565b6200014c6200014636600462000c9f565b620001e8565b604080516001600160a01b0394851681529284166020840152921691810191909152606001620000cc565b620000df6200018836600462000d51565b62000944565b600254620000b8906001600160a01b031681565b620000df620001b336600462000d51565b620009a2565b620000df620001ca36600462000d51565b620009ce565b620001da62000a51565b620001e6600062000aad565b565b6000806000600387876040516200020192919062000d78565b9081526040519081900360200190205460ff1615620002335760405163a6ef0ba160e01b815260040160405180910390fd5b6001600388886040516200024992919062000d78565b908152604051908190036020019020805491151560ff19909216919091179055600080808715620005405760015460408051631e3997bf60e21b8152905162000351926001600160a01b0316916378e65efc9160048083019260209291908290030181865afa158015620002c1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002e7919062000d88565b6001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000325573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200034b919062000d88565b62000afd565b60405163400ada7560e01b81526001600160a01b038d8116600483015289151560248301529194509084169063400ada7590604401600060405180830381600087803b158015620003a157600080fd5b505af1158015620003b6573d6000803e3d6000fd5b5050505062000412600160009054906101000a90046001600160a01b03166001600160a01b031663ec5319876040518163ffffffff1660e01b8152600401602060405180830381865afa158015620002c1573d6000803e3d6000fd5b60405163c0c53b8b60e01b81526001600160a01b038d8116600483015285811660248301523060448301529193509083169063c0c53b8b90606401600060405180830381600087803b1580156200046857600080fd5b505af11580156200047d573d6000803e3d6000fd5b50505050620004d9600160009054906101000a90046001600160a01b03166001600160a01b031663d63ea2c56040518163ffffffff1660e01b8152600401602060405180830381865afa158015620002c1573d6000803e3d6000fd5b60405163189acdbd60e31b81526001600160a01b0384811660048301529192509082169063c4d66de890602401600060405180830381600087803b1580156200052157600080fd5b505af115801562000536573d6000803e3d6000fd5b5050505062000839565b600160009054906101000a90046001600160a01b03166001600160a01b03166378e65efc6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000594573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620005ba919062000d88565b604080516001600160a01b038e16602482015289151560448083019190915282518083039091018152606490910182526020810180516001600160e01b031663400ada7560e01b1790529051620006119062000b99565b6200061e92919062000da8565b604051809103906000f0801580156200063b573d6000803e3d6000fd5b509250600160009054906101000a90046001600160a01b03166001600160a01b031663ec5319876040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000692573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006b8919062000d88565b604080516001600160a01b038e81166024830152861660448201523060648083019190915282518083039091018152608490910182526020810180516001600160e01b031663c0c53b8b60e01b1790529051620007159062000b99565b6200072292919062000da8565b604051809103906000f0801580156200073f573d6000803e3d6000fd5b509150600160009054906101000a90046001600160a01b03166001600160a01b031663d63ea2c56040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000796573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620007bc919062000d88565b604080516001600160a01b03851660248083019190915282518083039091018152604490910182526020810180516001600160e01b031663189acdbd60e31b17905290516200080b9062000b99565b6200081892919062000da8565b604051809103906000f08015801562000835573d6000803e3d6000fd5b5090505b60405163f2fde38b60e01b81523360048201526001600160a01b0383169063f2fde38b90602401600060405180830381600087803b1580156200087b57600080fd5b505af115801562000890573d6000803e3d6000fd5b5050604051630ab148ff60e31b81526001600160a01b0385811660048301528616925063558a47f89150602401600060405180830381600087803b158015620008d857600080fd5b505af1158015620008ed573d6000803e3d6000fd5b505050507f17df396a3d7d1aee90dda3191f7e75531702775925951ea64827321bbc37412c338b8b8587866040516200092c9695949392919062000e08565b60405180910390a1909a919950975095505050505050565b6200094e62000a51565b600280546001600160a01b0319166001600160a01b0383169081179091556040519081527f9c1996a14d26c3ecd833c10222d012447ef07b09b15000f3a34318ff039c0bdc9060200160405180910390a150565b620009ac62000a51565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b620009d862000a51565b6001600160a01b03811662000a435760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b62000a4e8162000aad565b50565b6000546001600160a01b03163314620001e65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640162000a3a565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008260601b60e81c176000526e5af43d82803e903d91602b57fd5bf38260781b17602052603760096000f090506001600160a01b03811662000b945760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b604482015260640162000a3a565b919050565b6109008062000e6683390190565b634e487b7160e01b600052604160045260246000fd5b60006020828403121562000bd057600080fd5b813567ffffffffffffffff8082111562000be957600080fd5b818401915084601f83011262000bfe57600080fd5b81358181111562000c135762000c1362000ba7565b604051601f8201601f19908116603f0116810190838211818310171562000c3e5762000c3e62000ba7565b8160405282815287602084870101111562000c5857600080fd5b826020860160208301376000928101602001929092525095945050505050565b6001600160a01b038116811462000a4e57600080fd5b8035801515811462000b9457600080fd5b60008060008060006080868803121562000cb857600080fd5b853562000cc58162000c78565b9450602086013567ffffffffffffffff8082111562000ce357600080fd5b818801915088601f83011262000cf857600080fd5b81358181111562000d0857600080fd5b89602082850101111562000d1b57600080fd5b60208301965080955050505062000d356040870162000c8e565b915062000d456060870162000c8e565b90509295509295909350565b60006020828403121562000d6457600080fd5b813562000d718162000c78565b9392505050565b8183823760009101908152919050565b60006020828403121562000d9b57600080fd5b815162000d718162000c78565b60018060a01b038316815260006020604081840152835180604085015260005b8181101562000de65785810183015185820160600152820162000dc8565b506000606082860101526060601f19601f830116850101925050509392505050565b6001600160a01b03878116825260a0602083018190528201869052600090868860c0850137600060c0888501810191909152958116604084015293841660608301525091166080820152601f909201601f1916909101019291505056fe60806040526040516109003803806109008339810160408190526100229161045b565b61002e82826000610035565b5050610585565b61003e83610100565b6040516001600160a01b038416907f1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e90600090a260008251118061007f5750805b156100fb576100f9836001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156100c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100e9919061051b565b836102a360201b6100291760201c565b505b505050565b610113816102cf60201b6100551760201c565b6101725760405162461bcd60e51b815260206004820152602560248201527f455243313936373a206e657720626561636f6e206973206e6f74206120636f6e6044820152641d1c9858dd60da1b60648201526084015b60405180910390fd5b6101e6816001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101d7919061051b565b6102cf60201b6100551760201c565b61024b5760405162461bcd60e51b815260206004820152603060248201527f455243313936373a20626561636f6e20696d706c656d656e746174696f6e206960448201526f1cc81b9bdd08184818dbdb9d1c9858dd60821b6064820152608401610169565b806102827fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d5060001b6102de60201b6100641760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b60606102c883836040518060600160405280602781526020016108d9602791396102e1565b9392505050565b6001600160a01b03163b151590565b90565b6060600080856001600160a01b0316856040516102fe9190610536565b600060405180830381855af49150503d8060008114610339576040519150601f19603f3d011682016040523d82523d6000602084013e61033e565b606091505b5090925090506103508683838761035a565b9695505050505050565b606083156103c95782516000036103c2576001600160a01b0385163b6103c25760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610169565b50816103d3565b6103d383836103db565b949350505050565b8151156103eb5781518083602001fd5b8060405162461bcd60e51b81526004016101699190610552565b80516001600160a01b038116811461041c57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b8381101561045257818101518382015260200161043a565b50506000910152565b6000806040838503121561046e57600080fd5b61047783610405565b60208401519092506001600160401b038082111561049457600080fd5b818501915085601f8301126104a857600080fd5b8151818111156104ba576104ba610421565b604051601f8201601f19908116603f011681019083821181831017156104e2576104e2610421565b816040528281528860208487010111156104fb57600080fd5b61050c836020830160208801610437565b80955050505050509250929050565b60006020828403121561052d57600080fd5b6102c882610405565b60008251610548818460208701610437565b9190910192915050565b6020815260008251806020840152610571816040850160208701610437565b601f01601f19169190910160400192915050565b610345806105946000396000f3fe60806040523661001357610011610017565b005b6100115b610027610022610067565b610100565b565b606061004e83836040518060600160405280602781526020016102e960279139610124565b9392505050565b6001600160a01b03163b151590565b90565b600061009a7fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50546001600160a01b031690565b6001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156100d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100fb919061024c565b905090565b3660008037600080366000845af43d6000803e80801561011f573d6000f35b3d6000fd5b6060600080856001600160a01b0316856040516101419190610299565b600060405180830381855af49150503d806000811461017c576040519150601f19603f3d011682016040523d82523d6000602084013e610181565b606091505b50915091506101928683838761019c565b9695505050505050565b60608315610210578251600003610209576001600160a01b0385163b6102095760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064015b60405180910390fd5b508161021a565b61021a8383610222565b949350505050565b8151156102325781518083602001fd5b8060405162461bcd60e51b815260040161020091906102b5565b60006020828403121561025e57600080fd5b81516001600160a01b038116811461004e57600080fd5b60005b83811015610290578181015183820152602001610278565b50506000910152565b600082516102ab818460208701610275565b9190910192915050565b60208152600082518060208401526102d4816040850160208701610275565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122022a6bf5ebbb7518c40e703958b5c8e4d70ca6715c1e1ccf9e9591bfc86e066d164736f6c63430008110033416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220351acad60da563f05f621bdfa00684f73c72b5ee7ffac215d752ebe0b78dba9a64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "deployTTSuite(address,string,bool,bool)": {
        "details": "Emits: TokenTableSuiteDeployed. Throws: AlreadyDeployed().",
        "params": {
          "allowTransferableFT": "Allow FutureToken to be transferable.",
          "disableAutoUpgrade": "When set to false, a Clone instead of a BeaconProxy is created to prevent future upgradeability.",
          "projectId": "A unique projectId (otherwise will revert).",
          "projectToken": "The project token."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "feeCollector": {
        "details": "Exposes the fee collector variable."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "deployTTSuite(address,string,bool,bool)": {
        "notice": "Deploys and configures a new set of TokenTable products."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 707,
        "contract": "contracts/proxy/TTUDeployerLite.sol:TTUDeployerLite",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6058,
        "contract": "contracts/proxy/TTUDeployerLite.sol:TTUDeployerLite",
        "label": "beaconManager",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(TTUV2BeaconManager)6434"
      },
      {
        "astId": 6062,
        "contract": "contracts/proxy/TTUDeployerLite.sol:TTUDeployerLite",
        "label": "feeCollector",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ITTUFeeCollector)5511"
      },
      {
        "astId": 6066,
        "contract": "contracts/proxy/TTUDeployerLite.sol:TTUDeployerLite",
        "label": "registry",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_string_memory_ptr,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ITTUFeeCollector)5511": {
        "encoding": "inplace",
        "label": "contract ITTUFeeCollector",
        "numberOfBytes": "20"
      },
      "t_contract(TTUV2BeaconManager)6434": {
        "encoding": "inplace",
        "label": "contract TTUV2BeaconManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_string_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}
