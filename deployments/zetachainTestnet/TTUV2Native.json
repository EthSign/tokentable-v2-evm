{
  "address": "0xF46467E6809e922a0907afE3132732f3918DdCF2",
  "abi": [
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPresetFormat",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSkipAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotPermissioned",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PresetDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PresetExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokenSet",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "actualId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pendingAmountClaimable",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "didWipeClaimableBalance",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "batchId",
          "type": "uint256"
        }
      ],
      "name": "ActualCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "presetId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "actualId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "recipientId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "batchId",
          "type": "uint256"
        }
      ],
      "name": "ActualCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "CancelDisabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        }
      ],
      "name": "ClaimingDelegateSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DepositReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "HookDisabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "presetId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "batchId",
          "type": "uint256"
        }
      ],
      "name": "PresetCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "actualId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feesCharged",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "batchId",
          "type": "uint256"
        }
      ],
      "name": "TokensClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokensWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "WithdrawDisabled",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BIPS_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "actuals",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "presetId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "startTimestampAbsolute",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountClaimed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "actualId",
          "type": "uint256"
        }
      ],
      "name": "calculateAmountClaimable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "deltaAmountClaimable",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "updatedAmountClaimed",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "actualIds",
          "type": "uint256[]"
        },
        {
          "internalType": "bool[]",
          "name": "shouldWipeClaimableBalance",
          "type": "bool[]"
        },
        {
          "internalType": "uint256",
          "name": "batchId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "cancel",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "pendingAmountClaimables",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "actualIds",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "claimTos",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "batchId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimingDelegate",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "recipients",
          "type": "address[]"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "presetId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "startTimestampAbsolute",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountClaimed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct Actual[]",
          "name": "actuals_",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256[]",
          "name": "recipientIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "batchId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "createActuals",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "presetIds",
          "type": "bytes32[]"
        },
        {
          "components": [
            {
              "internalType": "uint256[]",
              "name": "linearStartTimestampsRelative",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "linearEndTimestampRelative",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "linearBips",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "numOfUnlocksForEachLinear",
              "type": "uint256[]"
            },
            {
              "internalType": "bool",
              "name": "stream",
              "type": "bool"
            }
          ],
          "internalType": "struct Preset[]",
          "name": "presets",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "batchId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "createPresets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "actualIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "batchId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "delegateClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deployer",
      "outputs": [
        {
          "internalType": "contract ITTUDeployer",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disableCancel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disableHook",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disableWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "futureToken",
      "outputs": [
        {
          "internalType": "contract ITTFutureTokenV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "presetId",
          "type": "bytes32"
        }
      ],
      "name": "getEncodedPreset",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getProjectToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hook",
      "outputs": [
        {
          "internalType": "contract ITTHook",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "projectToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "futureToken_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "deployer_",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isCancelable_",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isHookable_",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isWithdrawable_",
          "type": "bool"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "projectToken",
          "type": "address"
        }
      ],
      "name": "initializeProjectToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isCancelable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isHookable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isWithdrawable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pendingAmountClaimableForCancelledActuals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        }
      ],
      "name": "setClaimingDelegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ITTHook",
          "name": "hook_",
          "type": "address"
        }
      ],
      "name": "setHook",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "setTrustedForwarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "actualId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimTimestampAbsolute",
          "type": "uint256"
        }
      ],
      "name": "simulateAmountClaimable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "deltaAmountClaimable",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "updatedAmountClaimed",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "withdrawDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xd7cea2444ec7342a174dd5c95c3870a7632526a91d944c7862e93490cc24f110",
  "receipt": {
    "to": null,
    "from": "0x55D22d83752a9bE59B8959f97FCf3b2CAbca5094",
    "contractAddress": "0xF46467E6809e922a0907afE3132732f3918DdCF2",
    "transactionIndex": 13,
    "gasUsed": "2383513",
    "logsBloom": "0x
    "blockHash": "0x0bb58112016cae7335f8f9345bd0a5dd71b705ab8ed0dbbe052f9f0310bbdf2e",
    "transactionHash": "0xd7cea2444ec7342a174dd5c95c3870a7632526a91d944c7862e93490cc24f110",
    "logs": [
      {
        "transactionIndex": 13,
        "blockNumber": 2975597,
        "transactionHash": "0xd7cea2444ec7342a174dd5c95c3870a7632526a91d944c7862e93490cc24f110",
        "address": "0xF46467E6809e922a0907afE3132732f3918DdCF2",
        "topics": [
          "0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2"
        ],
        "data": "0x000000000000000000000000000000000000000000000000ffffffffffffffff",
        "logIndex": 23,
        "blockHash": "0x0bb58112016cae7335f8f9345bd0a5dd71b705ab8ed0dbbe052f9f0310bbdf2e"
      }
    ],
    "blockNumber": 2975597,
    "cumulativeGasUsed": "3763975",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "68bea47287cc598b617f3c7ce8e7f238",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPresetFormat\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSkipAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotPermissioned\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PresetDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PresetExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenSet\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"actualId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pendingAmountClaimable\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"didWipeClaimableBalance\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"}],\"name\":\"ActualCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"presetId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"actualId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"recipientId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"}],\"name\":\"ActualCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CancelDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"ClaimingDelegateSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"HookDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"presetId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"}],\"name\":\"PresetCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"actualId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feesCharged\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"WithdrawDisabled\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BIPS_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"actuals\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"presetId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"startTimestampAbsolute\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"actualId\",\"type\":\"uint256\"}],\"name\":\"calculateAmountClaimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"deltaAmountClaimable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAmountClaimed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"actualIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"shouldWipeClaimableBalance\",\"type\":\"bool[]\"},{\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"cancel\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"pendingAmountClaimables\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"actualIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"claimTos\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimingDelegate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"presetId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"startTimestampAbsolute\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct Actual[]\",\"name\":\"actuals_\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"recipientIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"createActuals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"presetIds\",\"type\":\"bytes32[]\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"linearStartTimestampsRelative\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"linearEndTimestampRelative\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"linearBips\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"numOfUnlocksForEachLinear\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"stream\",\"type\":\"bool\"}],\"internalType\":\"struct Preset[]\",\"name\":\"presets\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"createPresets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"actualIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"delegateClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployer\",\"outputs\":[{\"internalType\":\"contract ITTUDeployer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableCancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableHook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"futureToken\",\"outputs\":[{\"internalType\":\"contract ITTFutureTokenV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"presetId\",\"type\":\"bytes32\"}],\"name\":\"getEncodedPreset\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProjectToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hook\",\"outputs\":[{\"internalType\":\"contract ITTHook\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"projectToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"futureToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"deployer_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isCancelable_\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isHookable_\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isWithdrawable_\",\"type\":\"bool\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"projectToken\",\"type\":\"address\"}],\"name\":\"initializeProjectToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isCancelable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isHookable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isWithdrawable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pendingAmountClaimableForCancelledActuals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"setClaimingDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITTHook\",\"name\":\"hook_\",\"type\":\"address\"}],\"name\":\"setHook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"actualId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimTimestampAbsolute\",\"type\":\"uint256\"}],\"name\":\"simulateAmountClaimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"deltaAmountClaimable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAmountClaimed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"withdrawDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"InvalidPresetFormat()\":[{\"details\":\"0x0ef8e8dc\"}],\"InvalidSkipAmount()\":[{\"details\":\"0x78c0fc43\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"NotPermissioned()\":[{\"details\":\"0x7f63bd0f\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"PresetDoesNotExist()\":[{\"details\":\"0xbd88ff7b\"}],\"PresetExists()\":[{\"details\":\"0x7cbb15b4\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"calculateAmountClaimable(uint256)\":{\"details\":\"This is the most complex part of the smart contract. Quite a bit of calculations are performed here.\",\"params\":{\"actualId\":\"The ID of the actual unlocking schedule that we are working with.\"},\"returns\":{\"deltaAmountClaimable\":\"Amount of tokens claimable right now.\",\"updatedAmountClaimed\":\"New total amount of tokens claimed. This is the sum of all previously claimed tokens and `deltaAmountClaimable`.\"}},\"disableCancel()\":{\"details\":\"Only callable by the owner.\"},\"disableHook()\":{\"details\":\"Only callable by the owner.\"},\"disableWithdraw()\":{\"details\":\"Only callable by the owner.\"},\"getEncodedPreset(bytes32)\":{\"params\":{\"presetId\":\"The ID of the preset we are trying to read.\"},\"returns\":{\"_0\":\"An ABI-encoded `Preset`, as nested objects cannot be returned directly in Solidity.\"}},\"initialize(address,address,address,bool,bool,bool)\":{\"details\":\"This contract should be deployed with `TTUDeployerLite`, which calls this function with the correct parameters.\",\"params\":{\"deployer_\":\"The address of the deployer. It helps call the fee collector during claim.\",\"futureToken_\":\"The address of the associated FutureToken.\",\"isCancelable_\":\"If the founder is allowed to cancel schedules. Can be disabled later, but cannot be enabled again.\",\"isHookable_\":\"If the founder is allowed to attach external hooks to function calls. Can be disabled later, but cannot be enabled again.\",\"isWithdrawable_\":\"If the founder is allowed to withdraw deposited tokens. Can be disabled later, but cannot be enabled again.\",\"projectToken\":\"The address of the token that the founder intends to unlock and distribute.\"}},\"setClaimingDelegate(address)\":{\"details\":\"Only callable by the owner.\"},\"simulateAmountClaimable(uint256,uint256)\":{\"details\":\"This is the most complex part of the smart contract. Quite a bit of calculations are performed here.\",\"params\":{\"actualId\":\"The ID of the actual unlocking schedule that we are working with.\",\"claimTimestampAbsolute\":\"The simulated time of claim.\"},\"returns\":{\"deltaAmountClaimable\":\"Amount of tokens claimable right now.\",\"updatedAmountClaimed\":\"New total amount of tokens claimed. This is the sum of all previously claimed tokens and `deltaAmountClaimable`.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"actuals(uint256)\":{\"notice\":\"Returns the Actual struct based on the input ID.\"},\"calculateAmountClaimable(uint256)\":{\"notice\":\"Calculates the amount of unlocked tokens that have yet to be claimed in an actual unlocking schedule.\"},\"disableCancel()\":{\"notice\":\"Permanently disables the `cancel()` function.\"},\"disableHook()\":{\"notice\":\"Permanently disables the hook.\"},\"disableWithdraw()\":{\"notice\":\"Permanently prevents the founder from withdrawing deposits.\"},\"getEncodedPreset(bytes32)\":{\"notice\":\"To decode in JS, use: ```js  ethers.utils.defaultAbiCoder.decode(      ['uint256[]', 'uint256', 'uint256[]', 'uint256[]', 'bool'],      encodedPreset  ) ```\"},\"setClaimingDelegate(address)\":{\"notice\":\"Sets the claiming delegate who can trigger claims on behalf of recipients.\"},\"simulateAmountClaimable(uint256,uint256)\":{\"notice\":\"Simulates the amount of unlocked tokens that have yet to be claimed at a specific time in an actual unlocking schedule.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/extensions/native-token/TTUV2Native.sol\":\"TTUV2Native\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\\n    struct OwnableStorage {\\n        address _owner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\\n\\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\\n        assembly {\\n            $.slot := OwnableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\\n        __Ownable_init_unchained(initialOwner);\\n    }\\n\\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        return $._owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        address oldOwner = $._owner;\\n        $._owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x72d47aebad24c59f6e78d0c3e827440173419a333fd910a37fa1e532c98f7e4c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ReentrancyGuard\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\\n\\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\\n        assembly {\\n            $.slot := ReentrancyGuardStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if ($._status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        $._status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        return $._status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xb44e086e941292cdc7f440de51478493894ef0b1aeccb0c4047445919f667f74\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"contracts/core/TTFutureTokenV2.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport {ITTFutureTokenV2} from \\\"../interfaces/ITTFutureTokenV2.sol\\\";\\nimport {IERC721AUpgradeable} from \\\"erc721a-upgradeable/contracts/interfaces/IERC721AQueryableUpgradeable.sol\\\";\\nimport {ERC721AQueryableUpgradeable, ERC721AUpgradeable} from \\\"erc721a-upgradeable/contracts/extensions/ERC721AQueryableUpgradeable.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {ITokenTableUnlockerV2} from \\\"../interfaces/ITokenTableUnlockerV2.sol\\\";\\n\\n/**\\n * @title TTFutureTokenV2\\n * @author Jack Xu @ EthSign\\n * @dev This is a redemption NFT minted to the stakeholder whenever an actual\\n * unlocking schedule is created by a founder. The holder of a future token\\n * can use it to claim unlocked tokens. A single instance of future token\\n * corresponds to a single instance of unlocker. This token is transferrable.\\n * The ID of this NFT is the ID of the actual unlocking schedule. The current\\n * claimable amount can be determined by calling\\n * TokenTableUnlockerV2.calculateAmountClaimable(uint256 actualId)\\n */\\ncontract TTFutureTokenV2 is ITTFutureTokenV2, ERC721AQueryableUpgradeable {\\n    address public authorizedMinter;\\n    bool public isTransferable;\\n\\n    // v2.0.1\\n    string public baseUri;\\n\\n    constructor() {\\n        if (block.chainid != 33133) {\\n            _dummyInitialize();\\n        }\\n    }\\n\\n    function _dummyInitialize() internal initializerERC721A {}\\n\\n    // solhint-disable-next-line ordering\\n    function initialize(\\n        address projectToken,\\n        bool isTransferable_\\n    ) external override initializerERC721A {\\n        __ERC721A_init_unchained(\\n            string.concat(\\\"Future \\\", IERC20Metadata(projectToken).name()),\\n            string.concat(\\\"FT-\\\", IERC20Metadata(projectToken).symbol())\\n        );\\n        isTransferable = isTransferable_;\\n    }\\n\\n    /**\\n     * @notice Sets who is authorized to mint future tokens.\\n     * @dev This function can only be called once. It is called automatically\\n     * when deployed using TTUDeployer. The authorized minter is usually the\\n     * unlocker contract.\\n     */\\n    // solhint-disable-next-line ordering\\n    function setAuthorizedMinterSingleUse(\\n        address authorizedMinter_\\n    ) external override {\\n        if (authorizedMinter != address(0)) revert NotPermissioned();\\n        authorizedMinter = authorizedMinter_;\\n    }\\n\\n    /**\\n     * @notice Mints a future token to an address.\\n     * @dev This function can only be called by the authorized minter. A future\\n     * token with tokenId == actualId is minted.\\n     */\\n    function safeMint(address to) external override returns (uint256 tokenId) {\\n        if (_msgSenderERC721A() != authorizedMinter) revert NotPermissioned();\\n        tokenId = _nextTokenId();\\n        _safeMint(to, 1);\\n    }\\n\\n    /**\\n     * @dev Add a transfer lock\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public payable virtual override(ERC721AUpgradeable, IERC721AUpgradeable) {\\n        if (!isTransferable) revert NotPermissioned();\\n        super.transferFrom(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Add a transfer lock\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public payable virtual override(ERC721AUpgradeable, IERC721AUpgradeable) {\\n        if (!isTransferable) revert NotPermissioned();\\n        super.safeTransferFrom(from, to, tokenId, _data);\\n    }\\n\\n    function setURI(string calldata uri) external {\\n        if (\\n            _msgSenderERC721A() !=\\n            ITokenTableUnlockerV2(authorizedMinter).owner()\\n        ) revert NotPermissioned();\\n        baseUri = uri;\\n        emit DidSetBaseURI(uri);\\n    }\\n\\n    /**\\n     * @notice Returns claim info for a given tokenId/actualId\\n     * @dev We assume the authorized minter is an instance of TTUV2.\\n     * @param tokenId The actual ID created in TTUV2.\\n     * @return deltaAmountClaimable The amount of tokens claimable as of now.\\n     * @return amountAlreadyClaimed The amount of tokens claimed as of now.\\n     */\\n    function getClaimInfo(\\n        uint256 tokenId\\n    )\\n        external\\n        view\\n        override\\n        returns (\\n            uint256 deltaAmountClaimable,\\n            uint256 amountAlreadyClaimed,\\n            bool isCancelable\\n        )\\n    {\\n        (\\n            uint256 deltaAmountClaimable_,\\n            uint256 updatedAmountClaimed_\\n        ) = ITokenTableUnlockerV2(authorizedMinter).calculateAmountClaimable(\\n                tokenId\\n            );\\n        deltaAmountClaimable = deltaAmountClaimable_;\\n        amountAlreadyClaimed = updatedAmountClaimed_ - deltaAmountClaimable_;\\n        isCancelable = ITokenTableUnlockerV2(authorizedMinter).isCancelable();\\n    }\\n\\n    function version() external pure override returns (string memory) {\\n        return \\\"2.5.0\\\";\\n    }\\n\\n    function _baseURI() internal view virtual override returns (string memory) {\\n        return baseUri;\\n    }\\n}\\n\",\"keccak256\":\"0x4c50bc629369ba7bb49da591ec383367cd6e570e651ad423efb8c5f3cba6b419\",\"license\":\"UNLICENSED\"},\"contracts/core/TTUProjectTokenStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\ncontract TTUProjectTokenStorage is Initializable {\\n    address private _projectToken;\\n\\n    error TokenSet();\\n\\n    function initializeProjectToken(address projectToken) public {\\n        if (_projectToken != address(0)) revert TokenSet();\\n        _projectToken = projectToken;\\n    }\\n\\n    function getProjectToken() public view returns (address) {\\n        return _projectToken;\\n    }\\n\\n    function _initializeSE(address projectToken) internal onlyInitializing {\\n        _projectToken = projectToken;\\n    }\\n}\\n\",\"keccak256\":\"0x07fa06ad3991d6191c6d2b81fbf79cdacb5dde77e447bb290cf9a31b0bc1bb08\",\"license\":\"UNLICENSED\"},\"contracts/core/TokenTableUnlockerV2.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {Actual, Preset} from \\\"../interfaces/TokenTableUnlockerV2DataModels.sol\\\";\\nimport {ITokenTableUnlockerV2, IOwnable} from \\\"../interfaces/ITokenTableUnlockerV2.sol\\\";\\nimport {ITTHook} from \\\"../interfaces/ITTHook.sol\\\";\\nimport {ITTFutureTokenV2} from \\\"./TTFutureTokenV2.sol\\\";\\nimport {TTUProjectTokenStorage} from \\\"./TTUProjectTokenStorage.sol\\\";\\nimport {ITTUDeployer} from \\\"../interfaces/ITTUDeployer.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {ReentrancyGuardUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\n\\ncontract TokenTableUnlockerV2 is\\n    OwnableUpgradeable,\\n    TTUProjectTokenStorage,\\n    ITokenTableUnlockerV2,\\n    ReentrancyGuardUpgradeable\\n{\\n    using SafeERC20 for IERC20;\\n\\n    uint256 public constant override BIPS_PRECISION = 10 ** 4; // down to 0.01%\\n\\n    ITTUDeployer public override deployer;\\n    ITTFutureTokenV2 public override futureToken;\\n    ITTHook public override hook;\\n    address public override claimingDelegate;\\n    bool public override isCancelable;\\n    bool public override isHookable;\\n    bool public override isWithdrawable;\\n\\n    mapping(bytes32 => Preset) internal _presets;\\n    mapping(uint256 => Actual) public override actuals;\\n    mapping(uint256 => uint256)\\n        public\\n        override pendingAmountClaimableForCancelledActuals;\\n\\n    constructor() {\\n        if (block.chainid != 33133) {\\n            _disableInitializers();\\n        }\\n    }\\n\\n    function initialize(\\n        address projectToken,\\n        address futureToken_,\\n        address deployer_,\\n        bool isCancelable_,\\n        bool isHookable_,\\n        bool isWithdrawable_\\n    ) external override initializer {\\n        __Ownable_init_unchained(_msgSender());\\n        _initializeSE(projectToken);\\n        futureToken = ITTFutureTokenV2(futureToken_);\\n        deployer = ITTUDeployer(deployer_);\\n        __ReentrancyGuard_init_unchained();\\n        claimingDelegate = owner();\\n        isCancelable = isCancelable_;\\n        isHookable = isHookable_;\\n        isWithdrawable = isWithdrawable_;\\n    }\\n\\n    // solhint-disable-next-line ordering\\n    function createPresets(\\n        bytes32[] calldata presetIds,\\n        Preset[] calldata presets,\\n        uint256 batchId,\\n        bytes calldata\\n    ) external virtual override onlyOwner {\\n        for (uint256 i = 0; i < presetIds.length; i++) {\\n            _createPreset(presetIds[i], presets[i], batchId);\\n        }\\n        _callHook(TokenTableUnlockerV2.createPresets.selector, _msgData());\\n    }\\n\\n    function createActuals(\\n        address[] calldata recipients,\\n        Actual[] calldata actuals_,\\n        uint256[] calldata recipientIds,\\n        uint256 batchId,\\n        bytes calldata\\n    ) external virtual override onlyOwner {\\n        for (uint256 i = 0; i < recipients.length; i++) {\\n            _createActual(recipients[i], actuals_[i], recipientIds[i], batchId);\\n        }\\n        _callHook(this.createActuals.selector, _msgData());\\n    }\\n\\n    function withdrawDeposit(\\n        uint256 amount,\\n        bytes calldata\\n    ) external virtual override onlyOwner {\\n        if (!isWithdrawable) revert NotPermissioned();\\n        IERC20(getProjectToken()).safeTransfer(_msgSender(), amount);\\n        emit TokensWithdrawn(_msgSender(), amount);\\n        _callHook(TokenTableUnlockerV2.withdrawDeposit.selector, _msgData());\\n    }\\n\\n    function claim(\\n        uint256[] calldata actualIds,\\n        address[] calldata claimTos,\\n        uint256 batchId,\\n        bytes calldata\\n    ) external virtual override nonReentrant {\\n        for (uint256 i = 0; i < actualIds.length; i++) {\\n            if (futureToken.ownerOf(actualIds[i]) != _msgSender()) {\\n                revert NotPermissioned();\\n            }\\n            _claim(actualIds[i], claimTos[i], batchId);\\n        }\\n        _callHook(TokenTableUnlockerV2.claim.selector, _msgData());\\n    }\\n\\n    function delegateClaim(\\n        uint256[] calldata actualIds,\\n        uint256 batchId,\\n        bytes calldata\\n    ) external virtual override nonReentrant {\\n        if (_msgSender() != claimingDelegate) revert NotPermissioned();\\n        for (uint256 i = 0; i < actualIds.length; i++) {\\n            _claim(actualIds[i], address(0), batchId);\\n        }\\n        _callHook(TokenTableUnlockerV2.delegateClaim.selector, _msgData());\\n    }\\n\\n    function cancel(\\n        uint256[] calldata actualIds,\\n        bool[] calldata shouldWipeClaimableBalance,\\n        uint256 batchId,\\n        bytes calldata\\n    )\\n        external\\n        virtual\\n        override\\n        onlyOwner\\n        returns (uint256[] memory pendingAmountClaimables)\\n    {\\n        if (!isCancelable) revert NotPermissioned();\\n        pendingAmountClaimables = new uint256[](actualIds.length);\\n        for (uint256 i = 0; i < actualIds.length; i++) {\\n            uint256 actualId = actualIds[i];\\n            (uint256 deltaAmountClaimable, ) = calculateAmountClaimable(\\n                actualId\\n            );\\n            if (!shouldWipeClaimableBalance[i]) {\\n                pendingAmountClaimableForCancelledActuals[\\n                    actualId\\n                ] += deltaAmountClaimable;\\n            }\\n            pendingAmountClaimables[i] = deltaAmountClaimable;\\n            emit ActualCancelled(\\n                actualId,\\n                deltaAmountClaimable,\\n                shouldWipeClaimableBalance[i],\\n                batchId\\n            );\\n            delete actuals[actualId];\\n        }\\n        _callHook(TokenTableUnlockerV2.cancel.selector, _msgData());\\n    }\\n\\n    function setHook(ITTHook hook_) external virtual override onlyOwner {\\n        if (!isHookable) revert NotPermissioned();\\n        hook = hook_;\\n        _callHook(TokenTableUnlockerV2.setHook.selector, _msgData());\\n    }\\n\\n    function setClaimingDelegate(\\n        address delegate\\n    ) external virtual override onlyOwner {\\n        claimingDelegate = delegate;\\n        emit ClaimingDelegateSet(delegate);\\n    }\\n\\n    function disableCancel() external virtual override onlyOwner {\\n        isCancelable = false;\\n        emit CancelDisabled();\\n        _callHook(TokenTableUnlockerV2.disableCancel.selector, _msgData());\\n    }\\n\\n    function disableHook() external virtual override onlyOwner {\\n        isHookable = false;\\n        emit HookDisabled();\\n        _callHook(TokenTableUnlockerV2.disableHook.selector, _msgData());\\n        hook = ITTHook(address(0));\\n    }\\n\\n    function disableWithdraw() external virtual override onlyOwner {\\n        isWithdrawable = false;\\n        emit WithdrawDisabled();\\n        _callHook(TokenTableUnlockerV2.disableWithdraw.selector, _msgData());\\n    }\\n\\n    function transferOwnership(\\n        address newOwner\\n    ) public override(IOwnable, OwnableUpgradeable) {\\n        OwnableUpgradeable.transferOwnership(newOwner);\\n        claimingDelegate = newOwner;\\n        emit ClaimingDelegateSet(newOwner);\\n    }\\n\\n    function renounceOwnership() public override(IOwnable, OwnableUpgradeable) {\\n        OwnableUpgradeable.renounceOwnership();\\n    }\\n\\n    function owner()\\n        public\\n        view\\n        override(IOwnable, OwnableUpgradeable)\\n        returns (address)\\n    {\\n        return OwnableUpgradeable.owner();\\n    }\\n\\n    function _createPreset(\\n        bytes32 presetId,\\n        Preset memory preset,\\n        uint256 batchId\\n    ) internal virtual {\\n        if (!_presetIsEmpty(_presets[presetId])) revert PresetExists();\\n        if (!_presetHasValidFormat(preset) || presetId == 0)\\n            revert InvalidPresetFormat();\\n        _presets[presetId] = preset;\\n        emit PresetCreated(presetId, batchId);\\n    }\\n\\n    function _createActual(\\n        address recipient,\\n        Actual memory actual,\\n        uint256 recipientId,\\n        uint256 batchId\\n    ) internal virtual {\\n        uint256 actualId = futureToken.safeMint(recipient);\\n        Preset storage preset = _presets[actual.presetId];\\n        if (_presetIsEmpty(preset)) revert InvalidPresetFormat();\\n        if (actual.amountClaimed >= actual.totalAmount)\\n            revert InvalidSkipAmount();\\n        actuals[actualId] = actual;\\n        emit ActualCreated(\\n            actual.presetId,\\n            actualId,\\n            recipient,\\n            recipientId,\\n            batchId\\n        );\\n    }\\n\\n    function _claim(\\n        uint256 actualId,\\n        address overrideRecipient,\\n        uint256 batchId\\n    ) internal virtual {\\n        uint256 deltaAmountClaimable;\\n        address recipient;\\n        if (overrideRecipient == address(0)) {\\n            recipient = futureToken.ownerOf(actualId);\\n        } else {\\n            recipient = overrideRecipient;\\n        }\\n        deltaAmountClaimable = pendingAmountClaimableForCancelledActuals[\\n            actualId\\n        ];\\n        if (deltaAmountClaimable != 0) {\\n            pendingAmountClaimableForCancelledActuals[actualId] = 0;\\n            IERC20(getProjectToken()).safeTransfer(\\n                recipient,\\n                deltaAmountClaimable\\n            );\\n        } else {\\n            deltaAmountClaimable = _updateActualAndSend(actualId, recipient);\\n        }\\n        uint256 feesCharged = _chargeFees(deltaAmountClaimable);\\n        emit TokensClaimed(\\n            actualId,\\n            _msgSender(),\\n            recipient,\\n            deltaAmountClaimable,\\n            feesCharged,\\n            batchId\\n        );\\n    }\\n\\n    function _callHook(\\n        bytes4 selector,\\n        bytes calldata context\\n    ) internal virtual {\\n        if (address(hook) == address(0)) return;\\n        hook.didCall(selector, context, _msgSender());\\n    }\\n\\n    // solhint-disable-next-line ordering\\n    function getEncodedPreset(\\n        bytes32 presetId\\n    ) external view virtual override returns (bytes memory) {\\n        Preset memory preset = _presets[presetId];\\n        return\\n            abi.encode(\\n                preset.linearStartTimestampsRelative,\\n                preset.linearEndTimestampRelative,\\n                preset.linearBips,\\n                preset.numOfUnlocksForEachLinear,\\n                preset.stream\\n            );\\n    }\\n\\n    function version() external pure returns (string memory) {\\n        return \\\"2.5.4\\\";\\n    }\\n\\n    function calculateAmountClaimable(\\n        uint256 actualId\\n    )\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256 deltaAmountClaimable, uint256 updatedAmountClaimed)\\n    {\\n        (deltaAmountClaimable, updatedAmountClaimed) = simulateAmountClaimable(\\n            actualId,\\n            block.timestamp\\n        );\\n    }\\n\\n    function simulateAmountClaimable(\\n        uint256 actualId,\\n        uint256 claimTimestampAbsolute\\n    )\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256 deltaAmountClaimable, uint256 updatedAmountClaimed)\\n    {\\n        uint256 tokenPrecisionDecimals = 10 ** 5;\\n        Actual memory actual = actuals[actualId];\\n        if (actual.presetId == 0) revert PresetDoesNotExist();\\n        Preset memory preset = _presets[actual.presetId];\\n        uint256 timePrecisionDecimals = preset.stream ? 10 ** 5 : 1;\\n        uint256 i;\\n        uint256 latestIncompleteLinearIndex;\\n        if (\\n            claimTimestampAbsolute <\\n            actual.startTimestampAbsolute +\\n                preset.linearStartTimestampsRelative[0]\\n        ) return (0, actual.amountClaimed);\\n        uint256 claimTimestampRelative = claimTimestampAbsolute -\\n            actual.startTimestampAbsolute;\\n        for (i = 0; i < preset.linearStartTimestampsRelative.length; i++) {\\n            if (\\n                preset.linearStartTimestampsRelative[i] <=\\n                claimTimestampRelative\\n            ) {\\n                latestIncompleteLinearIndex = i;\\n            } else {\\n                break;\\n            }\\n        }\\n        // 1. calculate completed linear index claimables in bips\\n        for (i = 0; i < latestIncompleteLinearIndex; i++) {\\n            updatedAmountClaimed +=\\n                preset.linearBips[i] *\\n                tokenPrecisionDecimals;\\n        }\\n        // 2. calculate incomplete linear index claimable in bips\\n        uint256 latestIncompleteLinearDuration = 0;\\n        if (\\n            latestIncompleteLinearIndex ==\\n            preset.linearStartTimestampsRelative.length - 1\\n        ) {\\n            latestIncompleteLinearDuration =\\n                preset.linearEndTimestampRelative -\\n                preset.linearStartTimestampsRelative[\\n                    preset.linearStartTimestampsRelative.length - 1\\n                ];\\n        } else {\\n            latestIncompleteLinearDuration =\\n                preset.linearStartTimestampsRelative[\\n                    latestIncompleteLinearIndex + 1\\n                ] -\\n                preset.linearStartTimestampsRelative[\\n                    latestIncompleteLinearIndex\\n                ];\\n        }\\n        if (latestIncompleteLinearDuration == 0)\\n            latestIncompleteLinearDuration = 1;\\n        uint256 latestIncompleteLinearIntervalForEachUnlock = latestIncompleteLinearDuration /\\n                preset.numOfUnlocksForEachLinear[latestIncompleteLinearIndex];\\n        uint256 latestIncompleteLinearClaimableTimestampRelative = claimTimestampRelative -\\n                preset.linearStartTimestampsRelative[\\n                    latestIncompleteLinearIndex\\n                ];\\n        uint256 numOfClaimableUnlocksInIncompleteLinear = (latestIncompleteLinearClaimableTimestampRelative *\\n                timePrecisionDecimals) /\\n                latestIncompleteLinearIntervalForEachUnlock;\\n        updatedAmountClaimed +=\\n            (preset.linearBips[latestIncompleteLinearIndex] *\\n                tokenPrecisionDecimals *\\n                numOfClaimableUnlocksInIncompleteLinear) /\\n            preset.numOfUnlocksForEachLinear[latestIncompleteLinearIndex] /\\n            timePrecisionDecimals;\\n        updatedAmountClaimed =\\n            (updatedAmountClaimed * actual.totalAmount) /\\n            BIPS_PRECISION /\\n            tokenPrecisionDecimals;\\n        if (updatedAmountClaimed > actual.totalAmount) {\\n            updatedAmountClaimed = actual.totalAmount;\\n        }\\n        if (actual.amountClaimed > updatedAmountClaimed) {\\n            deltaAmountClaimable = 0;\\n        } else {\\n            deltaAmountClaimable = updatedAmountClaimed - actual.amountClaimed;\\n        }\\n    }\\n\\n    function _updateActualAndSend(\\n        uint256 actualId,\\n        address recipient\\n    ) internal virtual returns (uint256 deltaAmountClaimable_) {\\n        (\\n            uint256 deltaAmountClaimable,\\n            uint256 updatedAmountClaimed\\n        ) = calculateAmountClaimable(actualId);\\n        Actual storage actual = actuals[actualId];\\n        actual.amountClaimed = updatedAmountClaimed;\\n        IERC20(getProjectToken()).safeTransfer(recipient, deltaAmountClaimable);\\n        deltaAmountClaimable_ = deltaAmountClaimable;\\n    }\\n\\n    function _chargeFees(\\n        uint256 amount\\n    ) internal virtual returns (uint256 feesCollected) {\\n        if (\\n            address(deployer) != address(0) &&\\n            address(deployer.feeCollector()) != address(0)\\n        ) {\\n            feesCollected = deployer.feeCollector().getFee(\\n                address(this),\\n                amount\\n            );\\n            if (feesCollected > 0) {\\n                IERC20(getProjectToken()).safeTransfer(\\n                    deployer.feeCollector().owner(),\\n                    feesCollected\\n                );\\n            }\\n        }\\n    }\\n\\n    function _presetIsEmpty(\\n        Preset storage preset\\n    ) internal view returns (bool) {\\n        return\\n            preset.linearBips.length *\\n                preset.linearStartTimestampsRelative.length *\\n                preset.numOfUnlocksForEachLinear.length *\\n                preset.linearEndTimestampRelative ==\\n            0;\\n    }\\n\\n    function _presetHasValidFormat(\\n        Preset memory preset\\n    ) internal pure returns (bool) {\\n        uint256 total;\\n        for (uint256 i = 0; i < preset.linearBips.length; i++) {\\n            total += preset.linearBips[i];\\n        }\\n        return\\n            (total == BIPS_PRECISION) &&\\n            (preset.linearBips.length ==\\n                preset.linearStartTimestampsRelative.length) &&\\n            (preset.linearStartTimestampsRelative[\\n                preset.linearStartTimestampsRelative.length - 1\\n            ] < preset.linearEndTimestampRelative) &&\\n            (preset.numOfUnlocksForEachLinear.length ==\\n                preset.linearStartTimestampsRelative.length);\\n    }\\n}\\n\",\"keccak256\":\"0xcc8adf3c3ca7676f78aba99a121a3d88efa5dd9b93ef28988ef5691014b78867\",\"license\":\"UNLICENSED\"},\"contracts/core/extensions/ERC2771/TTUV2Gasless.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport {TokenTableUnlockerV2} from \\\"../../TokenTableUnlockerV2.sol\\\";\\nimport {CustomERC2771Context} from \\\"../../../libraries/CustomERC2771Context.sol\\\";\\n\\ncontract TTUV2Gasless is TokenTableUnlockerV2, CustomERC2771Context {\\n    function setTrustedForwarder(\\n        address forwarder\\n    ) public virtual override onlyOwner {\\n        super.setTrustedForwarder(forwarder);\\n    }\\n\\n    function _msgSender()\\n        internal\\n        view\\n        virtual\\n        override(ContextUpgradeable, CustomERC2771Context)\\n        returns (address sender)\\n    {\\n        return CustomERC2771Context._msgSender();\\n    }\\n\\n    function _msgData()\\n        internal\\n        view\\n        virtual\\n        override(ContextUpgradeable, CustomERC2771Context)\\n        returns (bytes calldata)\\n    {\\n        return CustomERC2771Context._msgData();\\n    }\\n}\\n\",\"keccak256\":\"0x7834853c213d5fa1e483eb32161b1865d6f055b355d7b8ea41f79b7df1ce2f1c\",\"license\":\"UNLICENSED\"},\"contracts/core/extensions/native-token/TTUV2Native.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport {TokenTableUnlockerV2} from \\\"../../TokenTableUnlockerV2.sol\\\";\\nimport {TTUV2Gasless} from \\\"../ERC2771/TTUV2Gasless.sol\\\";\\nimport {Actual} from \\\"../../../interfaces/TokenTableUnlockerV2DataModels.sol\\\";\\n\\ncontract TTUV2Native is TTUV2Gasless {\\n    event DepositReceived(address from, uint256 amount);\\n\\n    receive() external payable {\\n        emit DepositReceived(_msgSender(), msg.value);\\n    }\\n\\n    function withdrawDeposit(\\n        uint256 amount,\\n        bytes calldata\\n    ) external virtual override onlyOwner {\\n        if (!isWithdrawable) revert NotPermissioned();\\n        //IERC20(getProjectToken()).safeTransfer(_msgSender(), amount);\\n        (bool sent, bytes memory data) = payable(_msgSender()).call{\\n            value: amount\\n        }(\\\"\\\");\\n        require(sent, string(data));\\n        emit TokensWithdrawn(_msgSender(), amount);\\n        _callHook(TokenTableUnlockerV2.withdrawDeposit.selector, _msgData());\\n    }\\n\\n    function _claim(\\n        uint256 actualId,\\n        address overrideRecipient,\\n        uint256 batchId\\n    ) internal virtual override {\\n        uint256 deltaAmountClaimable;\\n        address recipient;\\n        if (overrideRecipient == address(0)) {\\n            recipient = futureToken.ownerOf(actualId);\\n        } else {\\n            recipient = overrideRecipient;\\n        }\\n        deltaAmountClaimable = pendingAmountClaimableForCancelledActuals[\\n            actualId\\n        ];\\n        if (deltaAmountClaimable != 0) {\\n            pendingAmountClaimableForCancelledActuals[actualId] = 0;\\n            // IERC20(getProjectToken()).safeTransfer(\\n            //     recipient,\\n            //     deltaAmountClaimable\\n            // );\\n            (bool sent, bytes memory data) = payable(recipient).call{\\n                value: deltaAmountClaimable\\n            }(\\\"\\\");\\n            require(sent, string(data));\\n        } else {\\n            deltaAmountClaimable = _updateActualAndSend(actualId, recipient);\\n        }\\n        uint256 feesCharged = _chargeFees(deltaAmountClaimable);\\n        emit TokensClaimed(\\n            actualId,\\n            _msgSender(),\\n            recipient,\\n            deltaAmountClaimable,\\n            feesCharged,\\n            batchId\\n        );\\n    }\\n\\n    function _updateActualAndSend(\\n        uint256 actualId,\\n        address recipient\\n    ) internal virtual override returns (uint256 deltaAmountClaimable_) {\\n        (\\n            uint256 deltaAmountClaimable,\\n            uint256 updatedAmountClaimed\\n        ) = calculateAmountClaimable(actualId);\\n        Actual storage actual = actuals[actualId];\\n        actual.amountClaimed = updatedAmountClaimed;\\n        // IERC20(getProjectToken()).safeTransfer(recipient, deltaAmountClaimable);\\n        (bool sent, bytes memory data) = payable(recipient).call{\\n            value: deltaAmountClaimable\\n        }(\\\"\\\");\\n        require(sent, string(data));\\n        deltaAmountClaimable_ = deltaAmountClaimable;\\n    }\\n\\n    function _chargeFees(\\n        uint256\\n    ) internal virtual override returns (uint256 feesCollected) {\\n        // if (\\n        //     address(deployer) != address(0) &&\\n        //     address(deployer.feeCollector()) != address(0)\\n        // ) {\\n        //     feesCollected = deployer.feeCollector().getFee(\\n        //         address(this),\\n        //         amount\\n        //     );\\n        //     if (feesCollected > 0) {\\n        //         IERC20(getProjectToken()).safeTransfer(\\n        //             deployer.feeCollector().owner(),\\n        //             feesCollected\\n        //         );\\n        //     }\\n        // }\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xe4178a14b9f78d3e723aa7f8754a7ab1776b4002a9c01c23a017cf9f1d556dcb\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\ninterface IOwnable {\\n    function renounceOwnership() external;\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function owner() external view returns (address);\\n}\\n\",\"keccak256\":\"0x2c17e601b5c0d39493e2d4a5ec2efe7135c2762ebd00b328055fb892352265aa\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ITTFutureTokenV2.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport {IERC721AQueryableUpgradeable} from \\\"erc721a-upgradeable/contracts/interfaces/IERC721AQueryableUpgradeable.sol\\\";\\nimport {IVersionable} from \\\"./IVersionable.sol\\\";\\n\\n/**\\n * @title ITTFutureTokenV2\\n * @author Jack Xu @ EthSign\\n * @dev The lightweight interface for TTFutureTokenV2(.5.x), which handles unlocking schedule ownership for TokenTable.\\n */\\ninterface ITTFutureTokenV2 is IERC721AQueryableUpgradeable, IVersionable {\\n    event DidSetBaseURI(string newURI);\\n\\n    /**\\n     * @dev 0x7f63bd0f\\n     */\\n    error NotPermissioned();\\n\\n    /**\\n     * @dev This contract should be deployed with `TTUDeployerLite`, which calls this function with the correct parameters.\\n     * @param projectToken The address of the token that the founder intends to unlock and distribute.\\n     * @param isTransferable If the FutureTokens (aka schedules) can be transfered once minted.\\n     */\\n    function initialize(address projectToken, bool isTransferable) external;\\n\\n    /**\\n     * @notice This contract should be deployed with `TTUDeployerLite`, which calls this function with the correct parameters.\\n     * @dev This function can only be called once.\\n     * @param authorizedMinter_ The address which is authorized to mint new FutureTokens. This is set to the corresponding Unlocker in the deployer.\\n     */\\n    function setAuthorizedMinterSingleUse(address authorizedMinter_) external;\\n\\n    /**\\n     * @notice Safely mints a new FutureToken to the specified address.\\n     * @dev This function can only be called by the authorized minter.\\n     * @param to The recipient of the new FutureToken.\\n     * @return tokenId The minted token ID (aka actual ID or schedule ID).\\n     */\\n    function safeMint(address to) external returns (uint256 tokenId);\\n\\n    /**\\n     * @notice Updates the base URI.\\n     * @dev This function can only be called by the owner of the authorized minter, which is usually the founder.\\n     * @param uri The new base URI.\\n     */\\n    function setURI(string calldata uri) external;\\n\\n    /**\\n     * @notice Gets information regarding the unlocking schedule associated with this FutureToken.\\n     * @param tokenId The actual ID or schedule ID.\\n     * @return deltaAmountClaimable The amount of unlocked and unclaimed funds currently eligible to be claimed by the owner of the given ID.\\n     * @return amountAlreadyClaimed The amount of unlocked and claimed funds of the given ID.\\n     * @return isCancelable If the schedule associated with this ID can be canceled by the founder.\\n     */\\n    function getClaimInfo(\\n        uint256 tokenId\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 deltaAmountClaimable,\\n            uint256 amountAlreadyClaimed,\\n            bool isCancelable\\n        );\\n}\\n\",\"keccak256\":\"0xac62e3b48e1f49d7c0885cd1682cef8f6992986e72a1e8577ef6d6866e574c57\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ITTHook.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ITTHook\\n * @author Jack Xu @ EthSign\\n */\\ninterface ITTHook {\\n    /**\\n     * @notice Forwards the call context from the hooked contract.\\n     * @dev Reverts within hooks will revert the hooked contract as well.\\n     * @param selector The selector of the called function.\\n     * @param context Encoded data from the called function.\\n     * @param caller The caller of the hooked contract.\\n     */\\n    function didCall(\\n        bytes4 selector,\\n        bytes calldata context,\\n        address caller\\n    ) external;\\n}\\n\",\"keccak256\":\"0x552dcad2e51bebff9e5f8b45c9d12f4573ac6ce40525d6b09c39133e07b3be88\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ITTTrackerTokenV2.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport {IVersionable} from \\\"./IVersionable.sol\\\";\\n\\ninterface ITTTrackerTokenV2 is IVersionable {\\n    /**\\n     * @dev This contract should be deployed with `TTUDeployerLite`, which calls this function with the correct parameters.\\n     * @param ttuInstance_ The address of the corresponding Unlocker.\\n     */\\n    function initialize(address ttuInstance_) external;\\n}\\n\",\"keccak256\":\"0xbce3d637f7b098c1eae561fe222325b93723990bd2bddb86fa7d6c51b5da1db9\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ITTUDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport {ITokenTableUnlockerV2} from \\\"./ITokenTableUnlockerV2.sol\\\";\\nimport {ITTFutureTokenV2} from \\\"./ITTFutureTokenV2.sol\\\";\\nimport {ITTTrackerTokenV2} from \\\"./ITTTrackerTokenV2.sol\\\";\\nimport {ITTUFeeCollector} from \\\"./ITTUFeeCollector.sol\\\";\\n\\n/**\\n * @title TTUDeployer\\n * @author Jack Xu @ EthSign\\n * @dev This is the deployer for all TokenTable core and proxy contracts. All initial setup and configuration is automatically done here.\\n * To save gas and enable easy upgradeability, all deployed contracts are `Clone` or `BeaconProxy` instances.\\n * You should avoid deploying TokenTable contracts individually unless you know what you're doing.\\n */\\ninterface ITTUDeployer {\\n    event TTUDeployerInitialized(\\n        address unlockerImpl,\\n        address futureTokenImpl,\\n        address trackerTokenImpl,\\n        address beaconManagerImpl,\\n        address feeCollector\\n    );\\n    event TokenTableSuiteDeployed(\\n        address by,\\n        string projectId,\\n        address unlocker,\\n        address futureToken,\\n        address trackerToken\\n    );\\n    event FeeCollectorChanged(address feeCollector);\\n\\n    /**\\n     * @dev 0xa6ef0ba1\\n     */\\n    error AlreadyDeployed();\\n\\n    /**\\n     * @dev Exposes the fee collector variable.\\n     * @return An instance of the fee collector.\\n     */\\n    function feeCollector() external returns (ITTUFeeCollector);\\n\\n    /**\\n     * @notice Deploys and configures a new set of TokenTable products.\\n     * @dev Emits `TokenTableSuiteDeployed`. Throws: `AlreadyDeployed`.\\n     * @param projectToken The project token address.\\n     * @param projectId A unique projectId, otherwise it will revert.\\n     * @param isUpgradeable When set to false, a `Clone` instead of a `BeaconProxy` is created to prevent future upgradeability.\\n     * @param isTransferable Allow FutureToken to be transferable.\\n     * @param isCancelable Allow unlocking schedules to be cancelled in the Unlocker.\\n     * @param isHookable Allow Unlocker to call an external hook.\\n     * @param isWithdrawable Allow the founder to withdraw deposited funds.\\n     */\\n    function deployTTSuite(\\n        address projectToken,\\n        string calldata projectId,\\n        bool isUpgradeable,\\n        bool isTransferable,\\n        bool isCancelable,\\n        bool isHookable,\\n        bool isWithdrawable\\n    )\\n        external\\n        returns (ITokenTableUnlockerV2, ITTFutureTokenV2, ITTTrackerTokenV2);\\n}\\n\",\"keccak256\":\"0x3ccf0bd5c51500b0f70e3b1dffb195dcb6411b650d80caab9e8cfebd25a25980\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ITTUFeeCollector.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport {IOwnable} from \\\"./IOwnable.sol\\\";\\nimport {IVersionable} from \\\"./IVersionable.sol\\\";\\n\\n/**\\n * @title ITTUFeeCollector\\n * @author Jack Xu @ EthSign\\n * @dev This contract handles TokenTable service fee calculation.\\n */\\ninterface ITTUFeeCollector is IOwnable, IVersionable {\\n    event DefaultFeeSet(uint256 bips);\\n    event CustomFeeSet(address unlockerAddress, uint256 bips);\\n\\n    /**\\n     * @notice Returns the amount of fees to collect.\\n     * @param unlockerAddress The address of the Unlocker. Used to fetch pricing.\\n     * @param tokenTransferred The number of tokens transferred.\\n     * @return tokensCollected The number of tokens to collect as fees.\\n     */\\n    function getFee(\\n        address unlockerAddress,\\n        uint256 tokenTransferred\\n    ) external view returns (uint256 tokensCollected);\\n}\\n\",\"keccak256\":\"0x0c848499af16ffb2f7a9448aa07057adf133278ecd8a293d86951f3624777138\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ITokenTableUnlockerV2.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport {IOwnable} from \\\"./IOwnable.sol\\\";\\nimport {IVersionable} from \\\"./IVersionable.sol\\\";\\nimport {Preset, Actual} from \\\"./TokenTableUnlockerV2DataModels.sol\\\";\\nimport {ITTHook} from \\\"./ITTHook.sol\\\";\\nimport {ITTUDeployer} from \\\"./ITTUDeployer.sol\\\";\\nimport {ITTFutureTokenV2} from \\\"./ITTFutureTokenV2.sol\\\";\\n\\n/**\\n * @title ITokenTableUnlockerV2\\n * @author Jack Xu @ EthSign\\n * @dev The lightweight interface for TokenTableUnlockerV2(.5.x), which handles token unlocking and distribution for TokenTable.\\n */\\nabstract contract ITokenTableUnlockerV2 is IOwnable, IVersionable {\\n    event PresetCreated(bytes32 presetId, uint256 batchId);\\n    event ActualCreated(\\n        bytes32 presetId,\\n        uint256 actualId,\\n        address recipient,\\n        uint256 recipientId,\\n        uint256 batchId\\n    );\\n    event ActualCancelled(\\n        uint256 actualId,\\n        uint256 pendingAmountClaimable,\\n        bool didWipeClaimableBalance,\\n        uint256 batchId\\n    );\\n    event TokensClaimed(\\n        uint256 actualId,\\n        address caller,\\n        address to,\\n        uint256 amount,\\n        uint256 feesCharged,\\n        uint256 batchId\\n    );\\n    event TokensWithdrawn(address by, uint256 amount);\\n    event ClaimingDelegateSet(address delegate);\\n    event CancelDisabled();\\n    event HookDisabled();\\n    event WithdrawDisabled();\\n\\n    /**\\n     * @dev 0x0ef8e8dc\\n     */\\n    error InvalidPresetFormat();\\n    /**\\n     * @dev 0x7cbb15b4\\n     */\\n    error PresetExists();\\n    /**\\n     * @dev 0xbd88ff7b\\n     */\\n    error PresetDoesNotExist();\\n    /**\\n     * @dev 0x78c0fc43\\n     */\\n    error InvalidSkipAmount();\\n    /**\\n     * @dev 0x7f63bd0f\\n     */\\n    error NotPermissioned();\\n\\n    /**\\n     * @dev This contract should be deployed with `TTUDeployerLite`, which calls this function with the correct parameters.\\n     * @param projectToken The address of the token that the founder intends to unlock and distribute.\\n     * @param futureToken_ The address of the associated FutureToken.\\n     * @param deployer_ The address of the deployer. It helps call the fee collector during claim.\\n     * @param isCancelable_ If the founder is allowed to cancel schedules. Can be disabled later, but cannot be enabled again.\\n     * @param isHookable_ If the founder is allowed to attach external hooks to function calls. Can be disabled later, but cannot be enabled again.\\n     * @param isWithdrawable_ If the founder is allowed to withdraw deposited tokens. Can be disabled later, but cannot be enabled again.\\n     */\\n    function initialize(\\n        address projectToken,\\n        address futureToken_,\\n        address deployer_,\\n        bool isCancelable_,\\n        bool isHookable_,\\n        bool isWithdrawable_\\n    ) external virtual;\\n\\n    /**\\n     * @notice Creates an unlocking schedule preset template.\\n     * @dev Emits `PresetCreated`. Only callable by the owner.\\n     * @param presetIds These IDs can be the hashes of a plaintext preset names but really there is no restriction. Will revert if they already exist.\\n     * @param presets An array of `Preset` structs.\\n     * @param batchId Emitted as an event reserved for EthSign frontend use. This parameter has no effect on contract execution.\\n     * @param extraData An ERC-5750 parameter that's passed to the hook directly.\\n     */\\n    function createPresets(\\n        bytes32[] calldata presetIds,\\n        Preset[] calldata presets,\\n        uint256 batchId,\\n        bytes calldata extraData\\n    ) external virtual;\\n\\n    /**\\n     * @notice Creates an actual unlocking schedule based on a preset.\\n     * @dev Emits `ActualCreated`. A FutureToken is minted in the process with `tokenId == actualId`.\\n     * @param recipients An array of token recipients for the schedules. Note that claiming eligibility can be modified by transfering the corresponding FutureToken.\\n     * @param actuals An array of `Actual` structs.\\n     * @param recipientIds Emitted as an event reserved for EthSign frontend use. This parameter has no effect on contract execution.\\n     * @param batchId Emitted as an event reserved for EthSign frontend use. This parameter has no effect on contract execution.\\n     * @param extraData An ERC-5750 parameter that's passed to the hook directly.\\n     */\\n    function createActuals(\\n        address[] calldata recipients,\\n        Actual[] calldata actuals,\\n        uint256[] calldata recipientIds,\\n        uint256 batchId,\\n        bytes calldata extraData\\n    ) external virtual;\\n\\n    /**\\n     * @notice Withdraws existing deposit from the contract.\\n     * @dev Emits `TokensWithdrawn`. Only callable by the owner.\\n     * @param amount Amount of deposited funds the founder wishes to withdraw.\\n     * @param extraData An ERC-5750 parameter that's passed to the hook directly.\\n     */\\n    function withdrawDeposit(\\n        uint256 amount,\\n        bytes calldata extraData\\n    ) external virtual;\\n\\n    /**\\n     * @notice Claims claimable tokens for the specified schedules to the specified addresses respectively.\\n     * @dev Emits `TokensClaimed`. Only callable by the FutureToken owner.\\n     * @param actualIds The IDs of the unlocking schedules that we are trying to claim from.\\n     * @param claimTos If we want to send the claimed tokens to an address other than the caller. To send the claimed tokens to the caller (default behavior), pass in `ethers.constants.AddressZero`.\\n     * @param batchId Emitted as an event reserved for EthSign frontend use. This parameter has no effect on contract execution.\\n     * @param extraData An ERC-5750 parameter that's passed to the hook directly.\\n     */\\n    function claim(\\n        uint256[] calldata actualIds,\\n        address[] calldata claimTos,\\n        uint256 batchId,\\n        bytes calldata extraData\\n    ) external virtual;\\n\\n    /**\\n     * @notice Claims claimable tokens for the specified schedules on behalf of recipients. Claimed tokens are sent to the schedule recipients.\\n     * @dev Emits `TokensClaimed`. Only callable by the claiming delegate.\\n     * @param actualIds The IDs of the unlocking schedules that we are trying to claim from on behalf of the recipients.\\n     * @param batchId Emitted as an event reserved for EthSign frontend use. This parameter has no effect on contract execution.\\n     * @param extraData An ERC-5750 parameter that's passed to the hook directly.\\n     */\\n    function delegateClaim(\\n        uint256[] calldata actualIds,\\n        uint256 batchId,\\n        bytes calldata extraData\\n    ) external virtual;\\n\\n    /**\\n     * @notice Cancels an array of unlocking schedules effective immediately. Tokens not yet claimed but are already unlocked will be tallied.\\n     * @dev Emits `ActualCancelled`. Only callable by the owner.\\n     * @param actualIds The ID of the actual unlocking schedule that we want to cancel.\\n     * @param shouldWipeClaimableBalance If the unlocked and claimable balance of the canceled schedule should be wiped. This is usually used to delete an erroneously created schedule that has already started unlocking.\\n     * @param batchId Emitted as an event reserved for EthSign frontend use. This parameter has no effect on contract execution.\\n     * @param extraData An ERC-5750 parameter that's passed to the hook directly.\\n     * @return pendingAmountClaimables Number of tokens eligible to be claimed by the affected stakeholders at the moment of cancellation.\\n     */\\n    function cancel(\\n        uint256[] calldata actualIds,\\n        bool[] calldata shouldWipeClaimableBalance,\\n        uint256 batchId,\\n        bytes calldata extraData\\n    ) external virtual returns (uint256[] memory pendingAmountClaimables);\\n\\n    /**\\n     * @notice Sets the hook contract.\\n     * @dev Only callable by the owner.\\n     * @param hook The address of the `ITTHook` hook contract.\\n     */\\n    function setHook(ITTHook hook) external virtual;\\n\\n    /**\\n     * @notice Sets the claiming delegate who can trigger claims on behalf of recipients.\\n     * @dev Only callable by the owner.\\n     */\\n    function setClaimingDelegate(address delegate) external virtual;\\n\\n    /**\\n     * @notice Permanently disables the `cancel()` function.\\n     * @dev Only callable by the owner.\\n     */\\n    function disableCancel() external virtual;\\n\\n    /**\\n     * @notice Permanently disables the hook.\\n     * @dev Only callable by the owner.\\n     */\\n    function disableHook() external virtual;\\n\\n    /**\\n     * @notice Permanently prevents the founder from withdrawing deposits.\\n     * @dev Only callable by the owner.\\n     */\\n    function disableWithdraw() external virtual;\\n\\n    /**\\n     * @return The deployer instance associated with this Unlocker.\\n     */\\n    function deployer() external view virtual returns (ITTUDeployer);\\n\\n    /**\\n     * @return The FutureToken instance associated with this Unlocker.\\n     */\\n    function futureToken() external view virtual returns (ITTFutureTokenV2);\\n\\n    /**\\n     * @return The external hook associated with this Unlocker.\\n     */\\n    function hook() external view virtual returns (ITTHook);\\n\\n    /**\\n     * @return The claiming delegate who can trigger claims on behalf of schedule recipients.\\n     */\\n    function claimingDelegate() external view virtual returns (address);\\n\\n    /**\\n     * @return If the founder is allowed to cancel schedules.\\n     */\\n    function isCancelable() external view virtual returns (bool);\\n\\n    /**\\n     * @return If the founder can attach external hooks to function calls.\\n     */\\n    function isHookable() external view virtual returns (bool);\\n\\n    /**\\n     * @return If the founder can withdraw deposited but unclaimed tokens.\\n     */\\n    function isWithdrawable() external view virtual returns (bool);\\n\\n    /**\\n     * @param actualId The canceled schedule ID.\\n     * @return The amount of tokens from canceled schedules that have been unlocked but unclaimed by the stakeholder.\\n     */\\n    function pendingAmountClaimableForCancelledActuals(\\n        uint256 actualId\\n    ) external view virtual returns (uint256);\\n\\n    /**\\n     * @notice To decode in JS, use:\\n     * ```js\\n     *  ethers.utils.defaultAbiCoder.decode(\\n     *      ['uint256[]', 'uint256', 'uint256[]', 'uint256[]', 'bool'],\\n     *      encodedPreset\\n     *  )\\n     * ```\\n     * @param presetId The ID of the preset we are trying to read.\\n     * @return An ABI-encoded `Preset`, as nested objects cannot be returned directly in Solidity.\\n     */\\n    function getEncodedPreset(\\n        bytes32 presetId\\n    ) external view virtual returns (bytes memory);\\n\\n    /**\\n     * @notice Returns the Actual struct based on the input ID.\\n     */\\n    function actuals(\\n        uint256 actualId\\n    ) external view virtual returns (bytes32, uint256, uint256, uint256);\\n\\n    /**\\n     * @return The basis point precision of this Unlocker.\\n     */\\n    function BIPS_PRECISION() external pure virtual returns (uint256);\\n\\n    /**\\n     * @notice Calculates the amount of unlocked tokens that have yet to be claimed in an actual unlocking schedule.\\n     * @dev This is the most complex part of the smart contract. Quite a bit of calculations are performed here.\\n     * @param actualId The ID of the actual unlocking schedule that we are working with.\\n     * @return deltaAmountClaimable Amount of tokens claimable right now.\\n     * @return updatedAmountClaimed New total amount of tokens claimed. This is the sum of all previously claimed tokens and `deltaAmountClaimable`.\\n     */\\n    function calculateAmountClaimable(\\n        uint256 actualId\\n    )\\n        public\\n        view\\n        virtual\\n        returns (uint256 deltaAmountClaimable, uint256 updatedAmountClaimed);\\n\\n    /**\\n     * @notice Simulates the amount of unlocked tokens that have yet to be claimed at a specific time in an actual unlocking schedule.\\n     * @dev This is the most complex part of the smart contract. Quite a bit of calculations are performed here.\\n     * @param actualId The ID of the actual unlocking schedule that we are working with.\\n     * @param claimTimestampAbsolute The simulated time of claim.\\n     * @return deltaAmountClaimable Amount of tokens claimable right now.\\n     * @return updatedAmountClaimed New total amount of tokens claimed. This is the sum of all previously claimed tokens and `deltaAmountClaimable`.\\n     */\\n    function simulateAmountClaimable(\\n        uint256 actualId,\\n        uint256 claimTimestampAbsolute\\n    )\\n        public\\n        view\\n        virtual\\n        returns (uint256 deltaAmountClaimable, uint256 updatedAmountClaimed);\\n}\\n\",\"keccak256\":\"0x9b968063dd277f34c7f4922d9914162aaef9213361a4198e9c2258327476194b\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IVersionable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title IVersionable\\n * @author Jack Xu @ EthSign\\n * @dev This interface is implemented by all major TokenTable contracts to keep track of their versioning for upgrade compatibility checks.\\n */\\ninterface IVersionable {\\n    function version() external pure returns (string memory);\\n}\\n\",\"keccak256\":\"0x89c6315f70b485eb57df23c9c2cb23bd21a716a07af4384a091cbcf415f8b74a\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/TokenTableUnlockerV2DataModels.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title TokenTableUnlockerV2DataModels.Preset\\n * @author Jack Xu @ EthSign\\n * @notice A `Preset` is an unlocking schedule template that contains information that's shared across all stakeholders within a single round.\\n *\\n * In this system, cliff unlocks are considered linear as well. This enables us to mix and match cliffs and linears at will, providing full customizability. Cliff waiting periods have a linear bip of 0 and cliff unlocking moments have a duration of 1 second.\\n *\\n * Note that all relative timestamps are relative to the absolute start timestamp. Absolute timestamps are standard UNIX epoch timestamps in seconds.\\n *\\n * `linearStartTimestampsRelative`: An array of start timestamps for each linear segment.\\n * `linearEndTimestampRelative`: The timestamp that marks the end of the final linear segment.\\n * `linearBips`: The basis point that is unlocked for each linear segment. Must add up to `TokenTableUnlockerV2.BIPS_PRECISION()`.\\n * `numOfUnlocksForEachLinear`: The number of unlocks within each respective linear segment.\\n * `stream`: If the tokens should unlock as a stream instead of a cliff at the end of linear segment subdivision.\\n */\\nstruct Preset {\\n    uint256[] linearStartTimestampsRelative;\\n    uint256 linearEndTimestampRelative;\\n    uint256[] linearBips;\\n    uint256[] numOfUnlocksForEachLinear;\\n    bool stream;\\n}\\n\\n/**\\n * @title TokenTableUnlockerV2DataModels.Actual\\n * @author Jack Xu @ EthSign\\n * @notice An `Actual` is an actual unlocking schedule for a single stakeholder and builds on top of an existing preset. An actual contains information that is different from one stakeholder to the next.\\n *\\n * `presetId`: The ID of the `Preset` that this `Actual` references.\\n * `startTimestampAbsolute`: The timestamp of when this unlocking schedule actually starts.\\n * `amountClaimed`: The amount of tokens that have already been claimed by the recipient.\\n * `totalAmount`: The maximum amount of tokens that the recipient can claim throughout the entire schedule.\\n */\\nstruct Actual {\\n    bytes32 presetId;\\n    uint256 startTimestampAbsolute;\\n    uint256 amountClaimed;\\n    uint256 totalAmount;\\n}\\n\",\"keccak256\":\"0xb31ad200fb82dcb8de7a653b57d01e33e73d12f6b1c13711ef11c09af99b46b5\",\"license\":\"UNLICENSED\"},\"contracts/libraries/CustomERC2771Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Based on OpenZeppelin Contracts (last updated v4.7.0) (metatx/ERC2771Context.sol)\\npragma solidity ^0.8.20;\\n\\nabstract contract CustomERC2771Context {\\n    address public trustedForwarder;\\n\\n    // @dev MUST override in implementation and make sure this is onlyOwner\\n    function setTrustedForwarder(address forwarder) public virtual {\\n        trustedForwarder = forwarder;\\n    }\\n\\n    function isTrustedForwarder(\\n        address forwarder\\n    ) public view virtual returns (bool) {\\n        return forwarder == trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view virtual returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return msg.sender;\\n        }\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xce1d262ca08d119aab4e37466c0898a0e1bedf7a9f1709f5c0d44a9c12c700e3\",\"license\":\"MIT\"},\"erc721a-upgradeable/contracts/ERC721AStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary ERC721AStorage {\\n    // Bypass for a `--via-ir` bug (https://github.com/chiru-labs/ERC721A/pull/364).\\n    struct TokenApprovalRef {\\n        address value;\\n    }\\n\\n    struct Layout {\\n        // =============================================================\\n        //                            STORAGE\\n        // =============================================================\\n\\n        // The next token ID to be minted.\\n        uint256 _currentIndex;\\n        // The number of tokens burned.\\n        uint256 _burnCounter;\\n        // Token name\\n        string _name;\\n        // Token symbol\\n        string _symbol;\\n        // Mapping from token ID to ownership details\\n        // An empty struct value does not necessarily mean the token is unowned.\\n        // See {_packedOwnershipOf} implementation for details.\\n        //\\n        // Bits Layout:\\n        // - [0..159]   `addr`\\n        // - [160..223] `startTimestamp`\\n        // - [224]      `burned`\\n        // - [225]      `nextInitialized`\\n        // - [232..255] `extraData`\\n        mapping(uint256 => uint256) _packedOwnerships;\\n        // Mapping owner address to address data.\\n        //\\n        // Bits Layout:\\n        // - [0..63]    `balance`\\n        // - [64..127]  `numberMinted`\\n        // - [128..191] `numberBurned`\\n        // - [192..255] `aux`\\n        mapping(address => uint256) _packedAddressData;\\n        // Mapping from token ID to approved address.\\n        mapping(uint256 => ERC721AStorage.TokenApprovalRef) _tokenApprovals;\\n        // Mapping from owner to operator approvals\\n        mapping(address => mapping(address => bool)) _operatorApprovals;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256('ERC721A.contracts.storage.ERC721A');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x318831b891d003c94fc2a92ed62a1468809f21e5be110fc59798d3c5c4eb2776\",\"license\":\"MIT\"},\"erc721a-upgradeable/contracts/ERC721AUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport './IERC721AUpgradeable.sol';\\nimport {ERC721AStorage} from './ERC721AStorage.sol';\\nimport './ERC721A__Initializable.sol';\\n\\n/**\\n * @dev Interface of ERC721 token receiver.\\n */\\ninterface ERC721A__IERC721ReceiverUpgradeable {\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\\n/**\\n * @title ERC721A\\n *\\n * @dev Implementation of the [ERC721](https://eips.ethereum.org/EIPS/eip-721)\\n * Non-Fungible Token Standard, including the Metadata extension.\\n * Optimized for lower gas during batch mints.\\n *\\n * Token IDs are minted in sequential order (e.g. 0, 1, 2, 3, ...)\\n * starting from `_startTokenId()`.\\n *\\n * Assumptions:\\n *\\n * - An owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\n * - The maximum token ID cannot exceed 2**256 - 1 (max value of uint256).\\n */\\ncontract ERC721AUpgradeable is ERC721A__Initializable, IERC721AUpgradeable {\\n    using ERC721AStorage for ERC721AStorage.Layout;\\n\\n    // =============================================================\\n    //                           CONSTANTS\\n    // =============================================================\\n\\n    // Mask of an entry in packed address data.\\n    uint256 private constant _BITMASK_ADDRESS_DATA_ENTRY = (1 << 64) - 1;\\n\\n    // The bit position of `numberMinted` in packed address data.\\n    uint256 private constant _BITPOS_NUMBER_MINTED = 64;\\n\\n    // The bit position of `numberBurned` in packed address data.\\n    uint256 private constant _BITPOS_NUMBER_BURNED = 128;\\n\\n    // The bit position of `aux` in packed address data.\\n    uint256 private constant _BITPOS_AUX = 192;\\n\\n    // Mask of all 256 bits in packed address data except the 64 bits for `aux`.\\n    uint256 private constant _BITMASK_AUX_COMPLEMENT = (1 << 192) - 1;\\n\\n    // The bit position of `startTimestamp` in packed ownership.\\n    uint256 private constant _BITPOS_START_TIMESTAMP = 160;\\n\\n    // The bit mask of the `burned` bit in packed ownership.\\n    uint256 private constant _BITMASK_BURNED = 1 << 224;\\n\\n    // The bit position of the `nextInitialized` bit in packed ownership.\\n    uint256 private constant _BITPOS_NEXT_INITIALIZED = 225;\\n\\n    // The bit mask of the `nextInitialized` bit in packed ownership.\\n    uint256 private constant _BITMASK_NEXT_INITIALIZED = 1 << 225;\\n\\n    // The bit position of `extraData` in packed ownership.\\n    uint256 private constant _BITPOS_EXTRA_DATA = 232;\\n\\n    // Mask of all 256 bits in a packed ownership except the 24 bits for `extraData`.\\n    uint256 private constant _BITMASK_EXTRA_DATA_COMPLEMENT = (1 << 232) - 1;\\n\\n    // The mask of the lower 160 bits for addresses.\\n    uint256 private constant _BITMASK_ADDRESS = (1 << 160) - 1;\\n\\n    // The maximum `quantity` that can be minted with {_mintERC2309}.\\n    // This limit is to prevent overflows on the address data entries.\\n    // For a limit of 5000, a total of 3.689e15 calls to {_mintERC2309}\\n    // is required to cause an overflow, which is unrealistic.\\n    uint256 private constant _MAX_MINT_ERC2309_QUANTITY_LIMIT = 5000;\\n\\n    // The `Transfer` event signature is given by:\\n    // `keccak256(bytes(\\\"Transfer(address,address,uint256)\\\"))`.\\n    bytes32 private constant _TRANSFER_EVENT_SIGNATURE =\\n        0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\\n\\n    // =============================================================\\n    //                          CONSTRUCTOR\\n    // =============================================================\\n\\n    function __ERC721A_init(string memory name_, string memory symbol_) internal onlyInitializingERC721A {\\n        __ERC721A_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721A_init_unchained(string memory name_, string memory symbol_) internal onlyInitializingERC721A {\\n        ERC721AStorage.layout()._name = name_;\\n        ERC721AStorage.layout()._symbol = symbol_;\\n        ERC721AStorage.layout()._currentIndex = _startTokenId();\\n    }\\n\\n    // =============================================================\\n    //                   TOKEN COUNTING OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the starting token ID.\\n     * To change the starting token ID, please override this function.\\n     */\\n    function _startTokenId() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Returns the next token ID to be minted.\\n     */\\n    function _nextTokenId() internal view virtual returns (uint256) {\\n        return ERC721AStorage.layout()._currentIndex;\\n    }\\n\\n    /**\\n     * @dev Returns the total number of tokens in existence.\\n     * Burned tokens will reduce the count.\\n     * To get the total number of tokens minted, please see {_totalMinted}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        // Counter underflow is impossible as _burnCounter cannot be incremented\\n        // more than `_currentIndex - _startTokenId()` times.\\n        unchecked {\\n            return ERC721AStorage.layout()._currentIndex - ERC721AStorage.layout()._burnCounter - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the total amount of tokens minted in the contract.\\n     */\\n    function _totalMinted() internal view virtual returns (uint256) {\\n        // Counter underflow is impossible as `_currentIndex` does not decrement,\\n        // and it is initialized to `_startTokenId()`.\\n        unchecked {\\n            return ERC721AStorage.layout()._currentIndex - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the total number of tokens burned.\\n     */\\n    function _totalBurned() internal view virtual returns (uint256) {\\n        return ERC721AStorage.layout()._burnCounter;\\n    }\\n\\n    // =============================================================\\n    //                    ADDRESS DATA OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the number of tokens in `owner`'s account.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\\n        return ERC721AStorage.layout()._packedAddressData[owner] & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the number of tokens minted by `owner`.\\n     */\\n    function _numberMinted(address owner) internal view returns (uint256) {\\n        return\\n            (ERC721AStorage.layout()._packedAddressData[owner] >> _BITPOS_NUMBER_MINTED) & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the number of tokens burned by or on behalf of `owner`.\\n     */\\n    function _numberBurned(address owner) internal view returns (uint256) {\\n        return\\n            (ERC721AStorage.layout()._packedAddressData[owner] >> _BITPOS_NUMBER_BURNED) & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\\n     */\\n    function _getAux(address owner) internal view returns (uint64) {\\n        return uint64(ERC721AStorage.layout()._packedAddressData[owner] >> _BITPOS_AUX);\\n    }\\n\\n    /**\\n     * Sets the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\\n     * If there are multiple variables, please pack them into a uint64.\\n     */\\n    function _setAux(address owner, uint64 aux) internal virtual {\\n        uint256 packed = ERC721AStorage.layout()._packedAddressData[owner];\\n        uint256 auxCasted;\\n        // Cast `aux` with assembly to avoid redundant masking.\\n        assembly {\\n            auxCasted := aux\\n        }\\n        packed = (packed & _BITMASK_AUX_COMPLEMENT) | (auxCasted << _BITPOS_AUX);\\n        ERC721AStorage.layout()._packedAddressData[owner] = packed;\\n    }\\n\\n    // =============================================================\\n    //                            IERC165\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        // The interface IDs are constants representing the first 4 bytes\\n        // of the XOR of all function selectors in the interface.\\n        // See: [ERC165](https://eips.ethereum.org/EIPS/eip-165)\\n        // (e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`)\\n        return\\n            interfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\\n            interfaceId == 0x80ac58cd || // ERC165 interface ID for ERC721.\\n            interfaceId == 0x5b5e139f; // ERC165 interface ID for ERC721Metadata.\\n    }\\n\\n    // =============================================================\\n    //                        IERC721Metadata\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return ERC721AStorage.layout()._name;\\n    }\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return ERC721AStorage.layout()._symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, _toString(tokenId))) : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, it can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return '';\\n    }\\n\\n    // =============================================================\\n    //                     OWNERSHIPS OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        return address(uint160(_packedOwnershipOf(tokenId)));\\n    }\\n\\n    /**\\n     * @dev Gas spent here starts off proportional to the maximum mint batch size.\\n     * It gradually moves to O(1) as tokens get transferred around over time.\\n     */\\n    function _ownershipOf(uint256 tokenId) internal view virtual returns (TokenOwnership memory) {\\n        return _unpackedOwnership(_packedOwnershipOf(tokenId));\\n    }\\n\\n    /**\\n     * @dev Returns the unpacked `TokenOwnership` struct at `index`.\\n     */\\n    function _ownershipAt(uint256 index) internal view virtual returns (TokenOwnership memory) {\\n        return _unpackedOwnership(ERC721AStorage.layout()._packedOwnerships[index]);\\n    }\\n\\n    /**\\n     * @dev Initializes the ownership slot minted at `index` for efficiency purposes.\\n     */\\n    function _initializeOwnershipAt(uint256 index) internal virtual {\\n        if (ERC721AStorage.layout()._packedOwnerships[index] == 0) {\\n            ERC721AStorage.layout()._packedOwnerships[index] = _packedOwnershipOf(index);\\n        }\\n    }\\n\\n    /**\\n     * Returns the packed ownership data of `tokenId`.\\n     */\\n    function _packedOwnershipOf(uint256 tokenId) private view returns (uint256 packed) {\\n        if (_startTokenId() <= tokenId) {\\n            packed = ERC721AStorage.layout()._packedOwnerships[tokenId];\\n            // If not burned.\\n            if (packed & _BITMASK_BURNED == 0) {\\n                // If the data at the starting slot does not exist, start the scan.\\n                if (packed == 0) {\\n                    if (tokenId >= ERC721AStorage.layout()._currentIndex) revert OwnerQueryForNonexistentToken();\\n                    // Invariant:\\n                    // There will always be an initialized ownership slot\\n                    // (i.e. `ownership.addr != address(0) && ownership.burned == false`)\\n                    // before an unintialized ownership slot\\n                    // (i.e. `ownership.addr == address(0) && ownership.burned == false`)\\n                    // Hence, `tokenId` will not underflow.\\n                    //\\n                    // We can directly compare the packed value.\\n                    // If the address is zero, packed will be zero.\\n                    for (;;) {\\n                        unchecked {\\n                            packed = ERC721AStorage.layout()._packedOwnerships[--tokenId];\\n                        }\\n                        if (packed == 0) continue;\\n                        return packed;\\n                    }\\n                }\\n                // Otherwise, the data exists and is not burned. We can skip the scan.\\n                // This is possible because we have already achieved the target condition.\\n                // This saves 2143 gas on transfers of initialized tokens.\\n                return packed;\\n            }\\n        }\\n        revert OwnerQueryForNonexistentToken();\\n    }\\n\\n    /**\\n     * @dev Returns the unpacked `TokenOwnership` struct from `packed`.\\n     */\\n    function _unpackedOwnership(uint256 packed) private pure returns (TokenOwnership memory ownership) {\\n        ownership.addr = address(uint160(packed));\\n        ownership.startTimestamp = uint64(packed >> _BITPOS_START_TIMESTAMP);\\n        ownership.burned = packed & _BITMASK_BURNED != 0;\\n        ownership.extraData = uint24(packed >> _BITPOS_EXTRA_DATA);\\n    }\\n\\n    /**\\n     * @dev Packs ownership data into a single uint256.\\n     */\\n    function _packOwnershipData(address owner, uint256 flags) private view returns (uint256 result) {\\n        assembly {\\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            owner := and(owner, _BITMASK_ADDRESS)\\n            // `owner | (block.timestamp << _BITPOS_START_TIMESTAMP) | flags`.\\n            result := or(owner, or(shl(_BITPOS_START_TIMESTAMP, timestamp()), flags))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the `nextInitialized` flag set if `quantity` equals 1.\\n     */\\n    function _nextInitializedFlag(uint256 quantity) private pure returns (uint256 result) {\\n        // For branchless setting of the `nextInitialized` flag.\\n        assembly {\\n            // `(quantity == 1) << _BITPOS_NEXT_INITIALIZED`.\\n            result := shl(_BITPOS_NEXT_INITIALIZED, eq(quantity, 1))\\n        }\\n    }\\n\\n    // =============================================================\\n    //                      APPROVAL OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account. See {ERC721A-_approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     */\\n    function approve(address to, uint256 tokenId) public payable virtual override {\\n        _approve(to, tokenId, true);\\n    }\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\\n\\n        return ERC721AStorage.layout()._tokenApprovals[tokenId].value;\\n    }\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom}\\n     * for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        ERC721AStorage.layout()._operatorApprovals[_msgSenderERC721A()][operator] = approved;\\n        emit ApprovalForAll(_msgSenderERC721A(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return ERC721AStorage.layout()._operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted. See {_mint}.\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            _startTokenId() <= tokenId &&\\n            tokenId < ERC721AStorage.layout()._currentIndex && // If within bounds,\\n            ERC721AStorage.layout()._packedOwnerships[tokenId] & _BITMASK_BURNED == 0; // and not burned.\\n    }\\n\\n    /**\\n     * @dev Returns whether `msgSender` is equal to `approvedAddress` or `owner`.\\n     */\\n    function _isSenderApprovedOrOwner(\\n        address approvedAddress,\\n        address owner,\\n        address msgSender\\n    ) private pure returns (bool result) {\\n        assembly {\\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            owner := and(owner, _BITMASK_ADDRESS)\\n            // Mask `msgSender` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            msgSender := and(msgSender, _BITMASK_ADDRESS)\\n            // `msgSender == owner || msgSender == approvedAddress`.\\n            result := or(eq(msgSender, owner), eq(msgSender, approvedAddress))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the storage slot and value for the approved address of `tokenId`.\\n     */\\n    function _getApprovedSlotAndAddress(uint256 tokenId)\\n        private\\n        view\\n        returns (uint256 approvedAddressSlot, address approvedAddress)\\n    {\\n        ERC721AStorage.TokenApprovalRef storage tokenApproval = ERC721AStorage.layout()._tokenApprovals[tokenId];\\n        // The following is equivalent to `approvedAddress = _tokenApprovals[tokenId].value`.\\n        assembly {\\n            approvedAddressSlot := tokenApproval.slot\\n            approvedAddress := sload(approvedAddressSlot)\\n        }\\n    }\\n\\n    // =============================================================\\n    //                      TRANSFER OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public payable virtual override {\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\n\\n        if (address(uint160(prevOwnershipPacked)) != from) revert TransferFromIncorrectOwner();\\n\\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\\n\\n        // The nested ifs save around 20+ gas over a compound boolean condition.\\n        if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\\n            if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\\n\\n        if (to == address(0)) revert TransferToZeroAddress();\\n\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\n\\n        // Clear approvals from the previous owner.\\n        assembly {\\n            if approvedAddress {\\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\\n                sstore(approvedAddressSlot, 0)\\n            }\\n        }\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\\n        unchecked {\\n            // We can directly increment and decrement the balances.\\n            --ERC721AStorage.layout()._packedAddressData[from]; // Updates: `balance -= 1`.\\n            ++ERC721AStorage.layout()._packedAddressData[to]; // Updates: `balance += 1`.\\n\\n            // Updates:\\n            // - `address` to the next owner.\\n            // - `startTimestamp` to the timestamp of transfering.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `true`.\\n            ERC721AStorage.layout()._packedOwnerships[tokenId] = _packOwnershipData(\\n                to,\\n                _BITMASK_NEXT_INITIALIZED | _nextExtraData(from, to, prevOwnershipPacked)\\n            );\\n\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\\n                uint256 nextTokenId = tokenId + 1;\\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\\n                if (ERC721AStorage.layout()._packedOwnerships[nextTokenId] == 0) {\\n                    // If the next slot is within bounds.\\n                    if (nextTokenId != ERC721AStorage.layout()._currentIndex) {\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\n                        ERC721AStorage.layout()._packedOwnerships[nextTokenId] = prevOwnershipPacked;\\n                    }\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n        _afterTokenTransfers(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public payable virtual override {\\n        safeTransferFrom(from, to, tokenId, '');\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public payable virtual override {\\n        transferFrom(from, to, tokenId);\\n        if (to.code.length != 0)\\n            if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before a set of serially-ordered token IDs\\n     * are about to be transferred. This includes minting.\\n     * And also called before burning one token.\\n     *\\n     * `startTokenId` - the first token ID to be transferred.\\n     * `quantity` - the amount to be transferred.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after a set of serially-ordered token IDs\\n     * have been transferred. This includes minting.\\n     * And also called after one token has been burned.\\n     *\\n     * `startTokenId` - the first token ID to be transferred.\\n     * `quantity` - the amount to be transferred.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` has been minted for `to`.\\n     * - When `to` is zero, `tokenId` has been burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _afterTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target contract.\\n     *\\n     * `from` - Previous owner of the given token ID.\\n     * `to` - Target address that will receive the token.\\n     * `tokenId` - Token ID to be transferred.\\n     * `_data` - Optional data to send along with the call.\\n     *\\n     * Returns whether the call correctly returned the expected magic value.\\n     */\\n    function _checkContractOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        try\\n            ERC721A__IERC721ReceiverUpgradeable(to).onERC721Received(_msgSenderERC721A(), from, tokenId, _data)\\n        returns (bytes4 retval) {\\n            return retval == ERC721A__IERC721ReceiverUpgradeable(to).onERC721Received.selector;\\n        } catch (bytes memory reason) {\\n            if (reason.length == 0) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            } else {\\n                assembly {\\n                    revert(add(32, reason), mload(reason))\\n                }\\n            }\\n        }\\n    }\\n\\n    // =============================================================\\n    //                        MINT OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event for each mint.\\n     */\\n    function _mint(address to, uint256 quantity) internal virtual {\\n        uint256 startTokenId = ERC721AStorage.layout()._currentIndex;\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are incredibly unrealistic.\\n        // `balance` and `numberMinted` have a maximum limit of 2**64.\\n        // `tokenId` has a maximum limit of 2**256.\\n        unchecked {\\n            // Updates:\\n            // - `balance += quantity`.\\n            // - `numberMinted += quantity`.\\n            //\\n            // We can directly add to the `balance` and `numberMinted`.\\n            ERC721AStorage.layout()._packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\\n\\n            // Updates:\\n            // - `address` to the owner.\\n            // - `startTimestamp` to the timestamp of minting.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `quantity == 1`.\\n            ERC721AStorage.layout()._packedOwnerships[startTokenId] = _packOwnershipData(\\n                to,\\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\\n            );\\n\\n            uint256 toMasked;\\n            uint256 end = startTokenId + quantity;\\n\\n            // Use assembly to loop and emit the `Transfer` event for gas savings.\\n            // The duplicated `log4` removes an extra check and reduces stack juggling.\\n            // The assembly, together with the surrounding Solidity code, have been\\n            // delicately arranged to nudge the compiler into producing optimized opcodes.\\n            assembly {\\n                // Mask `to` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n                toMasked := and(to, _BITMASK_ADDRESS)\\n                // Emit the `Transfer` event.\\n                log4(\\n                    0, // Start of data (0, since no data).\\n                    0, // End of data (0, since no data).\\n                    _TRANSFER_EVENT_SIGNATURE, // Signature.\\n                    0, // `address(0)`.\\n                    toMasked, // `to`.\\n                    startTokenId // `tokenId`.\\n                )\\n\\n                // The `iszero(eq(,))` check ensures that large values of `quantity`\\n                // that overflows uint256 will make the loop run out of gas.\\n                // The compiler will optimize the `iszero` away for performance.\\n                for {\\n                    let tokenId := add(startTokenId, 1)\\n                } iszero(eq(tokenId, end)) {\\n                    tokenId := add(tokenId, 1)\\n                } {\\n                    // Emit the `Transfer` event. Similar to above.\\n                    log4(0, 0, _TRANSFER_EVENT_SIGNATURE, 0, toMasked, tokenId)\\n                }\\n            }\\n            if (toMasked == 0) revert MintToZeroAddress();\\n\\n            ERC721AStorage.layout()._currentIndex = end;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * This function is intended for efficient minting only during contract creation.\\n     *\\n     * It emits only one {ConsecutiveTransfer} as defined in\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309),\\n     * instead of a sequence of {Transfer} event(s).\\n     *\\n     * Calling this function outside of contract creation WILL make your contract\\n     * non-compliant with the ERC721 standard.\\n     * For full ERC721 compliance, substituting ERC721 {Transfer} event(s) with the ERC2309\\n     * {ConsecutiveTransfer} event is only permissible during contract creation.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {ConsecutiveTransfer} event.\\n     */\\n    function _mintERC2309(address to, uint256 quantity) internal virtual {\\n        uint256 startTokenId = ERC721AStorage.layout()._currentIndex;\\n        if (to == address(0)) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n        if (quantity > _MAX_MINT_ERC2309_QUANTITY_LIMIT) revert MintERC2309QuantityExceedsLimit();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are unrealistic due to the above check for `quantity` to be below the limit.\\n        unchecked {\\n            // Updates:\\n            // - `balance += quantity`.\\n            // - `numberMinted += quantity`.\\n            //\\n            // We can directly add to the `balance` and `numberMinted`.\\n            ERC721AStorage.layout()._packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\\n\\n            // Updates:\\n            // - `address` to the owner.\\n            // - `startTimestamp` to the timestamp of minting.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `quantity == 1`.\\n            ERC721AStorage.layout()._packedOwnerships[startTokenId] = _packOwnershipData(\\n                to,\\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\\n            );\\n\\n            emit ConsecutiveTransfer(startTokenId, startTokenId + quantity - 1, address(0), to);\\n\\n            ERC721AStorage.layout()._currentIndex = startTokenId + quantity;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * See {_mint}.\\n     *\\n     * Emits a {Transfer} event for each mint.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, quantity);\\n\\n        unchecked {\\n            if (to.code.length != 0) {\\n                uint256 end = ERC721AStorage.layout()._currentIndex;\\n                uint256 index = end - quantity;\\n                do {\\n                    if (!_checkContractOnERC721Received(address(0), to, index++, _data)) {\\n                        revert TransferToNonERC721ReceiverImplementer();\\n                    }\\n                } while (index < end);\\n                // Reentrancy protection.\\n                if (ERC721AStorage.layout()._currentIndex != end) revert();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Equivalent to `_safeMint(to, quantity, '')`.\\n     */\\n    function _safeMint(address to, uint256 quantity) internal virtual {\\n        _safeMint(to, quantity, '');\\n    }\\n\\n    // =============================================================\\n    //                       APPROVAL OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Equivalent to `_approve(to, tokenId, false)`.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _approve(to, tokenId, false);\\n    }\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the\\n     * zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(\\n        address to,\\n        uint256 tokenId,\\n        bool approvalCheck\\n    ) internal virtual {\\n        address owner = ownerOf(tokenId);\\n\\n        if (approvalCheck)\\n            if (_msgSenderERC721A() != owner)\\n                if (!isApprovedForAll(owner, _msgSenderERC721A())) {\\n                    revert ApprovalCallerNotOwnerNorApproved();\\n                }\\n\\n        ERC721AStorage.layout()._tokenApprovals[tokenId].value = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    // =============================================================\\n    //                        BURN OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Equivalent to `_burn(tokenId, false)`.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        _burn(tokenId, false);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\n\\n        address from = address(uint160(prevOwnershipPacked));\\n\\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\\n\\n        if (approvalCheck) {\\n            // The nested ifs save around 20+ gas over a compound boolean condition.\\n            if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\\n                if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\\n        }\\n\\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Clear approvals from the previous owner.\\n        assembly {\\n            if approvedAddress {\\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\\n                sstore(approvedAddressSlot, 0)\\n            }\\n        }\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\\n        unchecked {\\n            // Updates:\\n            // - `balance -= 1`.\\n            // - `numberBurned += 1`.\\n            //\\n            // We can directly decrement the balance, and increment the number burned.\\n            // This is equivalent to `packed -= 1; packed += 1 << _BITPOS_NUMBER_BURNED;`.\\n            ERC721AStorage.layout()._packedAddressData[from] += (1 << _BITPOS_NUMBER_BURNED) - 1;\\n\\n            // Updates:\\n            // - `address` to the last owner.\\n            // - `startTimestamp` to the timestamp of burning.\\n            // - `burned` to `true`.\\n            // - `nextInitialized` to `true`.\\n            ERC721AStorage.layout()._packedOwnerships[tokenId] = _packOwnershipData(\\n                from,\\n                (_BITMASK_BURNED | _BITMASK_NEXT_INITIALIZED) | _nextExtraData(from, address(0), prevOwnershipPacked)\\n            );\\n\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\\n                uint256 nextTokenId = tokenId + 1;\\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\\n                if (ERC721AStorage.layout()._packedOwnerships[nextTokenId] == 0) {\\n                    // If the next slot is within bounds.\\n                    if (nextTokenId != ERC721AStorage.layout()._currentIndex) {\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\n                        ERC721AStorage.layout()._packedOwnerships[nextTokenId] = prevOwnershipPacked;\\n                    }\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, address(0), tokenId);\\n        _afterTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\n        unchecked {\\n            ERC721AStorage.layout()._burnCounter++;\\n        }\\n    }\\n\\n    // =============================================================\\n    //                     EXTRA DATA OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Directly sets the extra data for the ownership data `index`.\\n     */\\n    function _setExtraDataAt(uint256 index, uint24 extraData) internal virtual {\\n        uint256 packed = ERC721AStorage.layout()._packedOwnerships[index];\\n        if (packed == 0) revert OwnershipNotInitializedForExtraData();\\n        uint256 extraDataCasted;\\n        // Cast `extraData` with assembly to avoid redundant masking.\\n        assembly {\\n            extraDataCasted := extraData\\n        }\\n        packed = (packed & _BITMASK_EXTRA_DATA_COMPLEMENT) | (extraDataCasted << _BITPOS_EXTRA_DATA);\\n        ERC721AStorage.layout()._packedOwnerships[index] = packed;\\n    }\\n\\n    /**\\n     * @dev Called during each token transfer to set the 24bit `extraData` field.\\n     * Intended to be overridden by the cosumer contract.\\n     *\\n     * `previousExtraData` - the value of `extraData` before transfer.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _extraData(\\n        address from,\\n        address to,\\n        uint24 previousExtraData\\n    ) internal view virtual returns (uint24) {}\\n\\n    /**\\n     * @dev Returns the next extra data for the packed ownership data.\\n     * The returned result is shifted into position.\\n     */\\n    function _nextExtraData(\\n        address from,\\n        address to,\\n        uint256 prevOwnershipPacked\\n    ) private view returns (uint256) {\\n        uint24 extraData = uint24(prevOwnershipPacked >> _BITPOS_EXTRA_DATA);\\n        return uint256(_extraData(from, to, extraData)) << _BITPOS_EXTRA_DATA;\\n    }\\n\\n    // =============================================================\\n    //                       OTHER OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the message sender (defaults to `msg.sender`).\\n     *\\n     * If you are writing GSN compatible contracts, you need to override this function.\\n     */\\n    function _msgSenderERC721A() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    /**\\n     * @dev Converts a uint256 to its ASCII string decimal representation.\\n     */\\n    function _toString(uint256 value) internal pure virtual returns (string memory str) {\\n        assembly {\\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), but\\n            // we allocate 0xa0 bytes to keep the free memory pointer 32-byte word aligned.\\n            // We will need 1 word for the trailing zeros padding, 1 word for the length,\\n            // and 3 words for a maximum of 78 digits. Total: 5 * 0x20 = 0xa0.\\n            let m := add(mload(0x40), 0xa0)\\n            // Update the free memory pointer to allocate.\\n            mstore(0x40, m)\\n            // Assign the `str` to the end.\\n            str := sub(m, 0x20)\\n            // Zeroize the slot after the string.\\n            mstore(str, 0)\\n\\n            // Cache the end of the memory to calculate the length later.\\n            let end := str\\n\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            // prettier-ignore\\n            for { let temp := value } 1 {} {\\n                str := sub(str, 1)\\n                // Write the character to the pointer.\\n                // The ASCII index of the '0' character is 48.\\n                mstore8(str, add(48, mod(temp, 10)))\\n                // Keep dividing `temp` until zero.\\n                temp := div(temp, 10)\\n                // prettier-ignore\\n                if iszero(temp) { break }\\n            }\\n\\n            let length := sub(end, str)\\n            // Move the pointer 32 bytes leftwards to make room for the length.\\n            str := sub(str, 0x20)\\n            // Store the length.\\n            mstore(str, length)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe9fea2df3839d1cd69b652418759835e4aafabc67fe4523c365be5d9c6cb42ad\",\"license\":\"MIT\"},\"erc721a-upgradeable/contracts/ERC721A__Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable diamond facet contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\n\\nimport {ERC721A__InitializableStorage} from './ERC721A__InitializableStorage.sol';\\n\\nabstract contract ERC721A__Initializable {\\n    using ERC721A__InitializableStorage for ERC721A__InitializableStorage.Layout;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializerERC721A() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(\\n            ERC721A__InitializableStorage.layout()._initializing\\n                ? _isConstructor()\\n                : !ERC721A__InitializableStorage.layout()._initialized,\\n            'ERC721A__Initializable: contract is already initialized'\\n        );\\n\\n        bool isTopLevelCall = !ERC721A__InitializableStorage.layout()._initializing;\\n        if (isTopLevelCall) {\\n            ERC721A__InitializableStorage.layout()._initializing = true;\\n            ERC721A__InitializableStorage.layout()._initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            ERC721A__InitializableStorage.layout()._initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializingERC721A() {\\n        require(\\n            ERC721A__InitializableStorage.layout()._initializing,\\n            'ERC721A__Initializable: contract is not initializing'\\n        );\\n        _;\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        // extcodesize checks the size of the code stored in an address, and\\n        // address returns the current address. Since the code is still not\\n        // deployed when running a constructor, any checks on its code size will\\n        // yield zero, making it an effective way to detect if a contract is\\n        // under construction or not.\\n        address self = address(this);\\n        uint256 cs;\\n        assembly {\\n            cs := extcodesize(self)\\n        }\\n        return cs == 0;\\n    }\\n}\\n\",\"keccak256\":\"0x4a78c3bccd097e704d6c37cf90af892eae0e3fcb13dcc37e5c1ad6c36f4240f0\",\"license\":\"MIT\"},\"erc721a-upgradeable/contracts/ERC721A__InitializableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base storage for the  initialization function for upgradeable diamond facet contracts\\n **/\\n\\nlibrary ERC721A__InitializableStorage {\\n    struct Layout {\\n        /*\\n         * Indicates that the contract has been initialized.\\n         */\\n        bool _initialized;\\n        /*\\n         * Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256('ERC721A.contracts.storage.initializable.facet');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x361a8f273736b37718a98049c3f210381c41e4241ff24a36360e417b94ad87b4\",\"license\":\"MIT\"},\"erc721a-upgradeable/contracts/IERC721AUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Interface of ERC721A.\\n */\\ninterface IERC721AUpgradeable {\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error ApprovalCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error ApprovalQueryForNonexistentToken();\\n\\n    /**\\n     * Cannot query the balance for the zero address.\\n     */\\n    error BalanceQueryForZeroAddress();\\n\\n    /**\\n     * Cannot mint to the zero address.\\n     */\\n    error MintToZeroAddress();\\n\\n    /**\\n     * The quantity of tokens minted must be more than zero.\\n     */\\n    error MintZeroQuantity();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error OwnerQueryForNonexistentToken();\\n\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error TransferCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token must be owned by `from`.\\n     */\\n    error TransferFromIncorrectOwner();\\n\\n    /**\\n     * Cannot safely transfer to a contract that does not implement the\\n     * ERC721Receiver interface.\\n     */\\n    error TransferToNonERC721ReceiverImplementer();\\n\\n    /**\\n     * Cannot transfer to the zero address.\\n     */\\n    error TransferToZeroAddress();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error URIQueryForNonexistentToken();\\n\\n    /**\\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\\n     */\\n    error MintERC2309QuantityExceedsLimit();\\n\\n    /**\\n     * The `extraData` cannot be set on an unintialized ownership slot.\\n     */\\n    error OwnershipNotInitializedForExtraData();\\n\\n    // =============================================================\\n    //                            STRUCTS\\n    // =============================================================\\n\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Stores the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n        // Arbitrary data similar to `startTimestamp` that can be set via {_extraData}.\\n        uint24 extraData;\\n    }\\n\\n    // =============================================================\\n    //                         TOKEN COUNTERS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the total number of tokens in existence.\\n     * Burned tokens will reduce the count.\\n     * To get the total number of tokens minted, please see {_totalMinted}.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    // =============================================================\\n    //                            IERC165\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    // =============================================================\\n    //                            IERC721\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables\\n     * (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in `owner`'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`,\\n     * checking first that contract recipients are aware of the ERC721 protocol\\n     * to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move\\n     * this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external payable;\\n\\n    /**\\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom}\\n     * whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the\\n     * zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external payable;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom}\\n     * for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    // =============================================================\\n    //                        IERC721Metadata\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    // =============================================================\\n    //                           IERC2309\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId`\\n     * (inclusive) is transferred from `from` to `to`, as defined in the\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard.\\n     *\\n     * See {_mintERC2309} for more details.\\n     */\\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\\n}\\n\",\"keccak256\":\"0xa8e2bf92476033e48df3911783487b46bcd20f6490a6fdc8c93ca7a0e94bca20\",\"license\":\"MIT\"},\"erc721a-upgradeable/contracts/extensions/ERC721AQueryableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport './IERC721AQueryableUpgradeable.sol';\\nimport '../ERC721AUpgradeable.sol';\\nimport '../ERC721A__Initializable.sol';\\n\\n/**\\n * @title ERC721AQueryable.\\n *\\n * @dev ERC721A subclass with convenience query functions.\\n */\\nabstract contract ERC721AQueryableUpgradeable is\\n    ERC721A__Initializable,\\n    ERC721AUpgradeable,\\n    IERC721AQueryableUpgradeable\\n{\\n    function __ERC721AQueryable_init() internal onlyInitializingERC721A {\\n        __ERC721AQueryable_init_unchained();\\n    }\\n\\n    function __ERC721AQueryable_init_unchained() internal onlyInitializingERC721A {}\\n\\n    /**\\n     * @dev Returns the `TokenOwnership` struct at `tokenId` without reverting.\\n     *\\n     * If the `tokenId` is out of bounds:\\n     *\\n     * - `addr = address(0)`\\n     * - `startTimestamp = 0`\\n     * - `burned = false`\\n     * - `extraData = 0`\\n     *\\n     * If the `tokenId` is burned:\\n     *\\n     * - `addr = <Address of owner before token was burned>`\\n     * - `startTimestamp = <Timestamp when token was burned>`\\n     * - `burned = true`\\n     * - `extraData = <Extra data when token was burned>`\\n     *\\n     * Otherwise:\\n     *\\n     * - `addr = <Address of owner>`\\n     * - `startTimestamp = <Timestamp of start of ownership>`\\n     * - `burned = false`\\n     * - `extraData = <Extra data at start of ownership>`\\n     */\\n    function explicitOwnershipOf(uint256 tokenId) public view virtual override returns (TokenOwnership memory) {\\n        TokenOwnership memory ownership;\\n        if (tokenId < _startTokenId() || tokenId >= _nextTokenId()) {\\n            return ownership;\\n        }\\n        ownership = _ownershipAt(tokenId);\\n        if (ownership.burned) {\\n            return ownership;\\n        }\\n        return _ownershipOf(tokenId);\\n    }\\n\\n    /**\\n     * @dev Returns an array of `TokenOwnership` structs at `tokenIds` in order.\\n     * See {ERC721AQueryable-explicitOwnershipOf}\\n     */\\n    function explicitOwnershipsOf(uint256[] calldata tokenIds)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (TokenOwnership[] memory)\\n    {\\n        unchecked {\\n            uint256 tokenIdsLength = tokenIds.length;\\n            TokenOwnership[] memory ownerships = new TokenOwnership[](tokenIdsLength);\\n            for (uint256 i; i != tokenIdsLength; ++i) {\\n                ownerships[i] = explicitOwnershipOf(tokenIds[i]);\\n            }\\n            return ownerships;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an array of token IDs owned by `owner`,\\n     * in the range [`start`, `stop`)\\n     * (i.e. `start <= tokenId < stop`).\\n     *\\n     * This function allows for tokens to be queried if the collection\\n     * grows too big for a single call of {ERC721AQueryable-tokensOfOwner}.\\n     *\\n     * Requirements:\\n     *\\n     * - `start < stop`\\n     */\\n    function tokensOfOwnerIn(\\n        address owner,\\n        uint256 start,\\n        uint256 stop\\n    ) external view virtual override returns (uint256[] memory) {\\n        unchecked {\\n            if (start >= stop) revert InvalidQueryRange();\\n            uint256 tokenIdsIdx;\\n            uint256 stopLimit = _nextTokenId();\\n            // Set `start = max(start, _startTokenId())`.\\n            if (start < _startTokenId()) {\\n                start = _startTokenId();\\n            }\\n            // Set `stop = min(stop, stopLimit)`.\\n            if (stop > stopLimit) {\\n                stop = stopLimit;\\n            }\\n            uint256 tokenIdsMaxLength = balanceOf(owner);\\n            // Set `tokenIdsMaxLength = min(balanceOf(owner), stop - start)`,\\n            // to cater for cases where `balanceOf(owner)` is too big.\\n            if (start < stop) {\\n                uint256 rangeLength = stop - start;\\n                if (rangeLength < tokenIdsMaxLength) {\\n                    tokenIdsMaxLength = rangeLength;\\n                }\\n            } else {\\n                tokenIdsMaxLength = 0;\\n            }\\n            uint256[] memory tokenIds = new uint256[](tokenIdsMaxLength);\\n            if (tokenIdsMaxLength == 0) {\\n                return tokenIds;\\n            }\\n            // We need to call `explicitOwnershipOf(start)`,\\n            // because the slot at `start` may not be initialized.\\n            TokenOwnership memory ownership = explicitOwnershipOf(start);\\n            address currOwnershipAddr;\\n            // If the starting slot exists (i.e. not burned), initialize `currOwnershipAddr`.\\n            // `ownership.address` will not be zero, as `start` is clamped to the valid token ID range.\\n            if (!ownership.burned) {\\n                currOwnershipAddr = ownership.addr;\\n            }\\n            for (uint256 i = start; i != stop && tokenIdsIdx != tokenIdsMaxLength; ++i) {\\n                ownership = _ownershipAt(i);\\n                if (ownership.burned) {\\n                    continue;\\n                }\\n                if (ownership.addr != address(0)) {\\n                    currOwnershipAddr = ownership.addr;\\n                }\\n                if (currOwnershipAddr == owner) {\\n                    tokenIds[tokenIdsIdx++] = i;\\n                }\\n            }\\n            // Downsize the array to fit.\\n            assembly {\\n                mstore(tokenIds, tokenIdsIdx)\\n            }\\n            return tokenIds;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an array of token IDs owned by `owner`.\\n     *\\n     * This function scans the ownership mapping and is O(`totalSupply`) in complexity.\\n     * It is meant to be called off-chain.\\n     *\\n     * See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into\\n     * multiple smaller scans if the collection is large enough to cause\\n     * an out-of-gas error (10K collections should be fine).\\n     */\\n    function tokensOfOwner(address owner) external view virtual override returns (uint256[] memory) {\\n        unchecked {\\n            uint256 tokenIdsIdx;\\n            address currOwnershipAddr;\\n            uint256 tokenIdsLength = balanceOf(owner);\\n            uint256[] memory tokenIds = new uint256[](tokenIdsLength);\\n            TokenOwnership memory ownership;\\n            for (uint256 i = _startTokenId(); tokenIdsIdx != tokenIdsLength; ++i) {\\n                ownership = _ownershipAt(i);\\n                if (ownership.burned) {\\n                    continue;\\n                }\\n                if (ownership.addr != address(0)) {\\n                    currOwnershipAddr = ownership.addr;\\n                }\\n                if (currOwnershipAddr == owner) {\\n                    tokenIds[tokenIdsIdx++] = i;\\n                }\\n            }\\n            return tokenIds;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbf2709d257cd1510200ca0557a5a08594ea6b83d5c7a13e672ac83b6f06dd728\",\"license\":\"MIT\"},\"erc721a-upgradeable/contracts/extensions/IERC721AQueryableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport '../IERC721AUpgradeable.sol';\\n\\n/**\\n * @dev Interface of ERC721AQueryable.\\n */\\ninterface IERC721AQueryableUpgradeable is IERC721AUpgradeable {\\n    /**\\n     * Invalid query range (`start` >= `stop`).\\n     */\\n    error InvalidQueryRange();\\n\\n    /**\\n     * @dev Returns the `TokenOwnership` struct at `tokenId` without reverting.\\n     *\\n     * If the `tokenId` is out of bounds:\\n     *\\n     * - `addr = address(0)`\\n     * - `startTimestamp = 0`\\n     * - `burned = false`\\n     * - `extraData = 0`\\n     *\\n     * If the `tokenId` is burned:\\n     *\\n     * - `addr = <Address of owner before token was burned>`\\n     * - `startTimestamp = <Timestamp when token was burned>`\\n     * - `burned = true`\\n     * - `extraData = <Extra data when token was burned>`\\n     *\\n     * Otherwise:\\n     *\\n     * - `addr = <Address of owner>`\\n     * - `startTimestamp = <Timestamp of start of ownership>`\\n     * - `burned = false`\\n     * - `extraData = <Extra data at start of ownership>`\\n     */\\n    function explicitOwnershipOf(uint256 tokenId) external view returns (TokenOwnership memory);\\n\\n    /**\\n     * @dev Returns an array of `TokenOwnership` structs at `tokenIds` in order.\\n     * See {ERC721AQueryable-explicitOwnershipOf}\\n     */\\n    function explicitOwnershipsOf(uint256[] memory tokenIds) external view returns (TokenOwnership[] memory);\\n\\n    /**\\n     * @dev Returns an array of token IDs owned by `owner`,\\n     * in the range [`start`, `stop`)\\n     * (i.e. `start <= tokenId < stop`).\\n     *\\n     * This function allows for tokens to be queried if the collection\\n     * grows too big for a single call of {ERC721AQueryable-tokensOfOwner}.\\n     *\\n     * Requirements:\\n     *\\n     * - `start < stop`\\n     */\\n    function tokensOfOwnerIn(\\n        address owner,\\n        uint256 start,\\n        uint256 stop\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Returns an array of token IDs owned by `owner`.\\n     *\\n     * This function scans the ownership mapping and is O(`totalSupply`) in complexity.\\n     * It is meant to be called off-chain.\\n     *\\n     * See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into\\n     * multiple smaller scans if the collection is large enough to cause\\n     * an out-of-gas error (10K collections should be fine).\\n     */\\n    function tokensOfOwner(address owner) external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0xf83cc229afc5ac227be4e372ab6a680201b8b25773351c1cd0a588b1b6e53821\",\"license\":\"MIT\"},\"erc721a-upgradeable/contracts/interfaces/IERC721AQueryableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport '../extensions/IERC721AQueryableUpgradeable.sol';\\n\",\"keccak256\":\"0xacb0462122256671a3814a2b74c1f28c64f4a322cad552a62ef607ca558df27c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b504661816d146200002657620000266200002c565b620000e0565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000900460ff16156200007d5760405163f92ee8a960e01b815260040160405180910390fd5b80546001600160401b0390811614620000dd5780546001600160401b0319166001600160401b0390811782556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50565b6129ac80620000f06000396000f3fe6080604052600436106101fd5760003560e01c8063662930491161010d5780638da5cb5b116100a0578063d5f394881161006f578063d5f394881461068a578063da742228146106aa578063e4393516146106ca578063f2fde38b146106ea578063f4c123291461070a57600080fd5b80638da5cb5b14610620578063ce8d388d14610635578063d57915591461064a578063d597c4541461066a57600080fd5b80637da0a877116100dc5780637da0a877146105515780637f5a7c7b146105715780637fe3b91f1461059157806385797051146105f357600080fd5b806366293049146104e6578063715018a6146105065780637733e0fb1461051b5780637d4e4e8c1461053057600080fd5b80633ac1db09116101905780634d840bcc1161015f5780634d840bcc14610428578063546e6df61461044957806354fd4d5014610469578063572b6c05146104975780635e55848b146104c657600080fd5b80633ac1db09146103aa5780633dfd3873146103ca57806342734d45146103ea5780634837c5961461040a57600080fd5b80631bffb491116101cc5780631bffb491146102f45780632de1d4311461032557806338616d8c146103525780633aa4327c1461037257600080fd5b80630577d4af14610252578063084d2b9b146102925780630cb95d2b146102a857806317a69da4146102dd57600080fd5b3661024d577f9936746a4565f9766fa768f88f56a7487c78780ac179562773d1c75c5269537e61022b61072a565b604080516001600160a01b0390921682523460208301520160405180910390a1005b600080fd5b34801561025e57600080fd5b5061027f61026d3660046120fe565b60076020526000908152604090205481565b6040519081526020015b60405180910390f35b34801561029e57600080fd5b5061027f61271081565b3480156102b457600080fd5b506102c86102c3366004612117565b610739565b60408051928352602083019190915201610289565b3480156102e957600080fd5b506102f2610c12565b005b34801561030057600080fd5b5060045461031590600160a01b900460ff1681565b6040519015158152602001610289565b34801561033157600080fd5b506103456103403660046120fe565b610c7a565b604051610289919061217f565b34801561035e57600080fd5b506102f261036d3660046121a7565b610df5565b34801561037e57600080fd5b50600254610392906001600160a01b031681565b6040516001600160a01b039091168152602001610289565b3480156103b657600080fd5b506102f26103c5366004612249565b610e41565b3480156103d657600080fd5b506102f26103e53660046121a7565b610f9f565b3480156103f657600080fd5b506102c86104053660046120fe565b611002565b34801561041657600080fd5b506000546001600160a01b0316610392565b34801561043457600080fd5b5060045461031590600160b01b900460ff1681565b34801561045557600080fd5b506102f26104643660046121a7565b611019565b34801561047557600080fd5b506040805180820190915260058152640c8b8d4b8d60da1b6020820152610345565b3480156104a357600080fd5b506103156104b23660046121a7565b6008546001600160a01b0391821691161490565b3480156104d257600080fd5b506102f26104e13660046122ec565b611075565b3480156104f257600080fd5b506102f26105013660046123ec565b61112a565b34801561051257600080fd5b506102f26111e0565b34801561052757600080fd5b506102f26111ea565b34801561053c57600080fd5b5060045461031590600160a81b900460ff1681565b34801561055d57600080fd5b50600854610392906001600160a01b031681565b34801561057d57600080fd5b50600354610392906001600160a01b031681565b34801561059d57600080fd5b506105d36105ac3660046120fe565b60066020526000908152604090208054600182015460028301546003909301549192909184565b604080519485526020850193909352918301526060820152608001610289565b3480156105ff57600080fd5b5061061361060e366004612249565b61123b565b60405161028991906124a0565b34801561062c57600080fd5b5061039261141d565b34801561064157600080fd5b506102f2611450565b34801561065657600080fd5b506102f2610665366004612249565b6114a1565b34801561067657600080fd5b506102f26106853660046124c8565b611529565b34801561069657600080fd5b50600154610392906001600160a01b031681565b3480156106b657600080fd5b506102f26106c53660046121a7565b6116db565b3480156106d657600080fd5b506102f26106e5366004612542565b611701565b3480156106f657600080fd5b506102f26107053660046121a7565b611819565b34801561071657600080fd5b50600454610392906001600160a01b031681565b6000610734611822565b905090565b6000828152600660209081526040808320815160808101835281548082526001830154948201949094526002820154928101929092526003015460608201528291620186a09190830361079f5760405163bd88ff7b60e01b815260040160405180910390fd5b805160009081526005602090815260408083208151815460c09481028201850190935260a0810183815290939192849284919084018282801561080157602002820191906000526020600020905b8154815260200190600101908083116107ed575b50505050508152602001600182015481526020016002820180548060200260200160405190810160405280929190818152602001828054801561086357602002820191906000526020600020905b81548152602001906001019080831161084f575b50505050508152602001600382018054806020026020016040519081016040528092919081815260200182805480156108bb57602002820191906000526020600020905b8154815260200190600101908083116108a7575b50505091835250506004919091015460ff16151560209091015260808101519091506000906108eb5760016108f0565b620186a05b62ffffff16905060008083600001516000815181106109115761091161258d565b6020026020010151856020015161092891906125b9565b891015610945576000856040015197509750505050505050610c0b565b600085602001518a61095791906125d2565b9050600092505b8451518310156109ab57808560000151848151811061097f5761097f61258d565b60200260200101511161099457829150610999565b6109ab565b826109a3816125e5565b93505061095e565b600092505b818310156109ff5786856040015184815181106109cf576109cf61258d565b60200260200101516109e191906125fe565b6109eb90896125b9565b9750826109f7816125e5565b9350506109b0565b845151600090610a11906001906125d2565b8303610a555785518051610a27906001906125d2565b81518110610a3757610a3761258d565b60200260200101518660200151610a4e91906125d2565b9050610aa8565b8551805184908110610a6957610a6961258d565b60200260200101518660000151846001610a8391906125b9565b81518110610a9357610a9361258d565b6020026020010151610aa591906125d2565b90505b80600003610ab4575060015b600086606001518481518110610acc57610acc61258d565b602002602001015182610adf9190612615565b9050600087600001518581518110610af957610af961258d565b602002602001015184610b0c91906125d2565b9050600082610b1b89846125fe565b610b259190612615565b90508789606001518781518110610b3e57610b3e61258d565b6020026020010151828d8c604001518a81518110610b5e57610b5e61258d565b6020026020010151610b7091906125fe565b610b7a91906125fe565b610b849190612615565b610b8e9190612615565b610b98908d6125b9565b9b508a6127108b606001518e610bae91906125fe565b610bb89190612615565b610bc29190612615565b9b5089606001518c1115610bd85789606001519b505b8b8a604001511115610bed5760009c50610bff565b60408a0151610bfc908d6125d2565b9c505b50505050505050505050505b9250929050565b610c1a611849565b6004805460ff60a81b191690556040517f4be5ee7c6a0a76b9209bebdd61b374e76803cfaa8e72886ee892b8dc972423f390600090a1610c686305e9a76960e21b610c6361189d565b6118b0565b600380546001600160a01b0319169055565b60008181526005602090815260408083208151815460c09481028201850190935260a081018381526060959491938492849190840182828015610cdc57602002820191906000526020600020905b815481526020019060010190808311610cc8575b505050505081526020016001820154815260200160028201805480602002602001604051908101604052809291908181526020018280548015610d3e57602002820191906000526020600020905b815481526020019060010190808311610d2a575b5050505050815260200160038201805480602002602001604051908101604052809291908181526020018280548015610d9657602002820191906000526020600020905b815481526020019060010190808311610d82575b50505091835250506004919091015460ff161515602091820152815182820151604080850151606086015160808701519251969750610dde9694959394919390929101612637565b604051602081830303815290604052915050919050565b6000546001600160a01b031615610e1f576040516311f9360560e31b815260040160405180910390fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b610e4961192e565b60005b86811015610f6b57610e5c61072a565b6002546001600160a01b039182169116636352211e8a8a85818110610e8357610e8361258d565b905060200201356040518263ffffffff1660e01b8152600401610ea891815260200190565b602060405180830381865afa158015610ec5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee9919061268b565b6001600160a01b031614610f1057604051637f63bd0f60e01b815260040160405180910390fd5b610f59888883818110610f2557610f2561258d565b90506020020135878784818110610f3e57610f3e61258d565b9050602002016020810190610f5391906121a7565b86611966565b80610f63816125e5565b915050610e4c565b50610f7f633ac1db0960e01b610c6361189d565b610f96600160008051602061295783398151915255565b50505050505050565b610fa7611849565b600454600160a81b900460ff16610fd157604051637f63bd0f60e01b815260040160405180910390fd5b600380546001600160a01b0319166001600160a01b038316179055610fff633dfd387360e01b610c6361189d565b50565b60008061100f8342610739565b9094909350915050565b611021611849565b600480546001600160a01b0319166001600160a01b0383169081179091556040519081527fee1bb493d7c23b025fa54ed4a0e75607c5b5038907b273223fc660f83dab365d9060200160405180910390a150565b61107d611849565b60005b8881101561110b576110f98a8a8381811061109d5761109d61258d565b90506020020160208101906110b291906121a7565b8989848181106110c4576110c461258d565b9050608002018036038101906110da91906126e6565b8888858181106110ec576110ec61258d565b9050602002013587611b25565b80611103816125e5565b915050611080565b5061111f635e55848b60e01b610c6361189d565b505050505050505050565b61113261192e565b6004546001600160a01b031661114661072a565b6001600160a01b03161461116d57604051637f63bd0f60e01b815260040160405180910390fd5b60005b848110156111ae5761119c86868381811061118d5761118d61258d565b90506020020135600086611966565b806111a6816125e5565b915050611170565b506111c2636629304960e01b610c6361189d565b6111d9600160008051602061295783398151915255565b5050505050565b6111e8611c83565b565b6111f2611849565b6004805460ff60a01b191690556040517f3a99ec168e67aaf838b65474d219f8c65d960d7a00ab5bea7c2f02fdc56a0cdb90600090a16111e8637733e0fb60e01b610c6361189d565b6060611245611849565b600454600160a01b900460ff1661126f57604051637f63bd0f60e01b815260040160405180910390fd5b866001600160401b03811115611287576112876126a8565b6040519080825280602002602001820160405280156112b0578160200160208202803683370190505b50905060005b878110156113fe5760008989838181106112d2576112d261258d565b90506020020135905060006112e682611002565b5090508888848181106112fb576112fb61258d565b9050602002016020810190611310919061274b565b61133857600082815260076020526040812080548392906113329084906125b9565b90915550505b8084848151811061134b5761134b61258d565b6020026020010181815250507f722bef2bf5e70d834c942d4d5afc99471963bfce84ada00ef3f8c7b880d6adb682828b8b8781811061138c5761138c61258d565b90506020020160208101906113a1919061274b565b6040805193845260208401929092521515908201526060810189905260800160405180910390a1506000908152600660205260408120818155600181018290556002810182905560030155806113f6816125e5565b9150506112b6565b50611412638579705160e01b610c6361189d565b979650505050505050565b60006107347f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b611458611849565b6004805460ff60b01b191690556040517f37ae717bce398f7d557a36324e1fa87c0d2d1a4f1a51d7c0b8a19df8d99e29c890600090a16111e863ce8d388d60e01b610c6361189d565b6114a9611849565b60005b86811015611515576115038888838181106114c9576114c961258d565b905060200201358787848181106114e2576114e261258d565b90506020028101906114f49190612766565b6114fd90612815565b86611c95565b8061150d816125e5565b9150506114ac565b50610f9663d579155960e01b610c6361189d565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff1615906001600160401b031660008115801561156e5750825b90506000826001600160401b0316600114801561158a5750303b155b905081158015611598575080155b156115b65760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff1916600117855583156115e057845460ff60401b1916600160401b1785555b6115f06115eb61072a565b611db8565b6115f98b611df3565b600280546001600160a01b03808d166001600160a01b03199283161790925560018054928c1692909116919091179055611631611dfb565b61163961141d565b600480546001600160a01b03929092166001600160a81b031990921691909117600160a01b8a1515021761ffff60a81b1916600160a81b8915150260ff60b01b191617600160b01b8815150217905583156116ce57845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050505050505050565b6116e3611849565b600880546001600160a01b0319166001600160a01b03831617905550565b611709611849565b600454600160b01b900460ff1661173357604051637f63bd0f60e01b815260040160405180910390fd5b60008061173e61072a565b6001600160a01b03168560405160006040518083038185875af1925050503d8060008114611788576040519150601f19603f3d011682016040523d82523d6000602084013e61178d565b606091505b50915091508181906117bb5760405162461bcd60e51b81526004016117b2919061217f565b60405180910390fd5b507f6352c5382c4a4578e712449ca65e83cdb392d045dfcf1cad9615189db2da244b6117e561072a565b604080516001600160a01b039092168252602082018890520160405180910390a16111d963721c9a8b60e11b610c6361189d565b61102181611e03565b6008546000906001600160a01b03163303611844575060131936013560601c90565b503390565b61185161072a565b6001600160a01b031661186261141d565b6001600160a01b0316146111e85761187861072a565b60405163118cdaa760e01b81526001600160a01b0390911660048201526024016117b2565b3660006118a8611e0b565b915091509091565b6003546001600160a01b03166118c557505050565b6003546001600160a01b03166374a14fd48484846118e161072a565b6040518563ffffffff1660e01b815260040161190094939291906128c1565b600060405180830381600087803b15801561191a57600080fd5b505af1158015610f96573d6000803e3d6000fd5b60008051602061295783398151915280546001190161196057604051633ee5aeb560e01b815260040160405180910390fd5b60029055565b6000806001600160a01b0384166119eb576002546040516331a9108f60e11b8152600481018790526001600160a01b0390911690636352211e90602401602060405180830381865afa1580156119c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119e4919061268b565b90506119ee565b50825b60008581526007602052604090205491508115611a91576000858152600760205260408082208290555181906001600160a01b0384169085908381818185875af1925050503d8060008114611a5f576040519150601f19603f3d011682016040523d82523d6000602084013e611a64565b606091505b5091509150818190611a895760405162461bcd60e51b81526004016117b2919061217f565b505050611a9e565b611a9b8582611e47565b91505b60007fbc6d6878a97806274fc49a58a7438505eb22cc99029fe9ce4f9926fe24a7848186611aca61072a565b604080519283526001600160a01b03918216602084015290851690820152606081018590526080810183905260a0810186905260c0015b60405180910390a1505050505050565b600160008051602061295783398151915255565b6002546040516340d097c360e01b81526001600160a01b03868116600483015260009216906340d097c3906024016020604051808303816000875af1158015611b72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b969190612913565b84516000908152600560205260409020909150611bb281611ef3565b15611bd0576040516303be3a3760e21b815260040160405180910390fd5b8460600151856040015110611bf8576040516378c0fc4360e01b815260040160405180910390fd5b60008281526006602090815260409182902087518082558883015160018301558884015160028301556060808a015160039093019290925583519081529182018590526001600160a01b03891692820192909252908101859052608081018490527fbfb1e0f8b9ebcc64e4f4ca88ad9d0077ee1847ad04abbf0b4e9f5c63ae34d3769060a001611b01565b611c8b611849565b6111e86000611f2d565b6000838152600560205260409020611cac90611ef3565b611cc957604051631f2ec56d60e21b815260040160405180910390fd5b611cd282611f9e565b1580611cdc575082155b15611cfa576040516303be3a3760e21b815260040160405180910390fd5b6000838152600560209081526040909120835180518593611d1f92849291019061209e565b50602082810151600183015560408301518051611d42926002850192019061209e565b5060608201518051611d5e91600384019160209091019061209e565b50608091909101516004909101805460ff191691151591909117905560408051848152602081018390527fd9e41d72fe3da30af98d3172c0ed1f85bf3951b4ef47a2fe1c1cde7a17a92515910160405180910390a1505050565b611dc0612055565b6001600160a01b038116611dea57604051631e4fbdf760e01b8152600060048201526024016117b2565b610fff81611f2d565b610e1f612055565b611b11612055565b611dc0611849565b60085436906000906001600160a01b03163303611e3e5760008036611e316014826125d2565b926118a89392919061292c565b50600091369150565b6000806000611e5585611002565b600087815260066020526040808220600281018490559051939550919350909181906001600160a01b0388169086908381818185875af1925050503d8060008114611ebc576040519150601f19603f3d011682016040523d82523d6000602084013e611ec1565b606091505b5091509150818190611ee65760405162461bcd60e51b81526004016117b2919061217f565b5093979650505050505050565b60018101546003820154825460028401546000939291611f12916125fe565b611f1c91906125fe565b611f2691906125fe565b1592915050565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b60008060005b836040015151811015611fee5783604001518181518110611fc757611fc761258d565b602002602001015182611fda91906125b9565b915080611fe6816125e5565b915050611fa4565b50612710811480156120065750825151604084015151145b801561203c5750602083015183518051612022906001906125d2565b815181106120325761203261258d565b6020026020010151105b801561204e5750825151606084015151145b9392505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff166111e857604051631afcd79f60e31b815260040160405180910390fd5b8280548282559060005260206000209081019282156120d9579160200282015b828111156120d95782518255916020019190600101906120be565b506120e59291506120e9565b5090565b5b808211156120e557600081556001016120ea565b60006020828403121561211057600080fd5b5035919050565b6000806040838503121561212a57600080fd5b50508035926020909101359150565b6000815180845260005b8181101561215f57602081850181015186830182015201612143565b506000602082860101526020601f19601f83011685010191505092915050565b60208152600061204e6020830184612139565b6001600160a01b0381168114610fff57600080fd5b6000602082840312156121b957600080fd5b813561204e81612192565b60008083601f8401126121d657600080fd5b5081356001600160401b038111156121ed57600080fd5b6020830191508360208260051b8501011115610c0b57600080fd5b60008083601f84011261221a57600080fd5b5081356001600160401b0381111561223157600080fd5b602083019150836020828501011115610c0b57600080fd5b60008060008060008060006080888a03121561226457600080fd5b87356001600160401b038082111561227b57600080fd5b6122878b838c016121c4565b909950975060208a01359150808211156122a057600080fd5b6122ac8b838c016121c4565b909750955060408a0135945060608a01359150808211156122cc57600080fd5b506122d98a828b01612208565b989b979a50959850939692959293505050565b600080600080600080600080600060a08a8c03121561230a57600080fd5b89356001600160401b038082111561232157600080fd5b61232d8d838e016121c4565b909b50995060208c013591508082111561234657600080fd5b818c0191508c601f83011261235a57600080fd5b81358181111561236957600080fd5b8d60208260071b850101111561237e57600080fd5b6020830199508098505060408c013591508082111561239c57600080fd5b6123a88d838e016121c4565b909750955060608c0135945060808c01359150808211156123c857600080fd5b506123d58c828d01612208565b915080935050809150509295985092959850929598565b60008060008060006060868803121561240457600080fd5b85356001600160401b038082111561241b57600080fd5b61242789838a016121c4565b909750955060208801359450604088013591508082111561244757600080fd5b5061245488828901612208565b969995985093965092949392505050565b600081518084526020808501945080840160005b8381101561249557815187529582019590820190600101612479565b509495945050505050565b60208152600061204e6020830184612465565b803580151581146124c357600080fd5b919050565b60008060008060008060c087890312156124e157600080fd5b86356124ec81612192565b955060208701356124fc81612192565b9450604087013561250c81612192565b935061251a606088016124b3565b9250612528608088016124b3565b915061253660a088016124b3565b90509295509295509295565b60008060006040848603121561255757600080fd5b8335925060208401356001600160401b0381111561257457600080fd5b61258086828701612208565b9497909650939450505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b808201808211156125cc576125cc6125a3565b92915050565b818103818111156125cc576125cc6125a3565b6000600182016125f7576125f76125a3565b5060010190565b80820281158282048414176125cc576125cc6125a3565b60008261263257634e487b7160e01b600052601260045260246000fd5b500490565b60a08152600061264a60a0830188612465565b86602084015282810360408401526126628187612465565b905082810360608401526126768186612465565b91505082151560808301529695505050505050565b60006020828403121561269d57600080fd5b815161204e81612192565b634e487b7160e01b600052604160045260246000fd5b60405160a081016001600160401b03811182821017156126e0576126e06126a8565b60405290565b6000608082840312156126f857600080fd5b604051608081018181106001600160401b038211171561271a5761271a6126a8565b8060405250823581526020830135602082015260408301356040820152606083013560608201528091505092915050565b60006020828403121561275d57600080fd5b61204e826124b3565b60008235609e1983360301811261277c57600080fd5b9190910192915050565b600082601f83011261279757600080fd5b813560206001600160401b03808311156127b3576127b36126a8565b8260051b604051601f19603f830116810181811084821117156127d8576127d86126a8565b6040529384528581018301938381019250878511156127f657600080fd5b83870191505b84821015611412578135835291830191908301906127fc565b600060a0823603121561282757600080fd5b61282f6126be565b82356001600160401b038082111561284657600080fd5b61285236838701612786565b835260208501356020840152604085013591508082111561287257600080fd5b61287e36838701612786565b6040840152606085013591508082111561289757600080fd5b506128a436828601612786565b6060830152506128b6608084016124b3565b608082015292915050565b63ffffffff60e01b85168152606060208201528260608201528284608083013760008184016080908101919091526001600160a01b03929092166040820152601f909201601f19169091010192915050565b60006020828403121561292557600080fd5b5051919050565b6000808585111561293c57600080fd5b8386111561294957600080fd5b505082019391909203915056fe9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00a2646970667358221220646e433073083100e1b55d83d651f532f48fe326c0705675db271c45d3774ade64736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106101fd5760003560e01c8063662930491161010d5780638da5cb5b116100a0578063d5f394881161006f578063d5f394881461068a578063da742228146106aa578063e4393516146106ca578063f2fde38b146106ea578063f4c123291461070a57600080fd5b80638da5cb5b14610620578063ce8d388d14610635578063d57915591461064a578063d597c4541461066a57600080fd5b80637da0a877116100dc5780637da0a877146105515780637f5a7c7b146105715780637fe3b91f1461059157806385797051146105f357600080fd5b806366293049146104e6578063715018a6146105065780637733e0fb1461051b5780637d4e4e8c1461053057600080fd5b80633ac1db09116101905780634d840bcc1161015f5780634d840bcc14610428578063546e6df61461044957806354fd4d5014610469578063572b6c05146104975780635e55848b146104c657600080fd5b80633ac1db09146103aa5780633dfd3873146103ca57806342734d45146103ea5780634837c5961461040a57600080fd5b80631bffb491116101cc5780631bffb491146102f45780632de1d4311461032557806338616d8c146103525780633aa4327c1461037257600080fd5b80630577d4af14610252578063084d2b9b146102925780630cb95d2b146102a857806317a69da4146102dd57600080fd5b3661024d577f9936746a4565f9766fa768f88f56a7487c78780ac179562773d1c75c5269537e61022b61072a565b604080516001600160a01b0390921682523460208301520160405180910390a1005b600080fd5b34801561025e57600080fd5b5061027f61026d3660046120fe565b60076020526000908152604090205481565b6040519081526020015b60405180910390f35b34801561029e57600080fd5b5061027f61271081565b3480156102b457600080fd5b506102c86102c3366004612117565b610739565b60408051928352602083019190915201610289565b3480156102e957600080fd5b506102f2610c12565b005b34801561030057600080fd5b5060045461031590600160a01b900460ff1681565b6040519015158152602001610289565b34801561033157600080fd5b506103456103403660046120fe565b610c7a565b604051610289919061217f565b34801561035e57600080fd5b506102f261036d3660046121a7565b610df5565b34801561037e57600080fd5b50600254610392906001600160a01b031681565b6040516001600160a01b039091168152602001610289565b3480156103b657600080fd5b506102f26103c5366004612249565b610e41565b3480156103d657600080fd5b506102f26103e53660046121a7565b610f9f565b3480156103f657600080fd5b506102c86104053660046120fe565b611002565b34801561041657600080fd5b506000546001600160a01b0316610392565b34801561043457600080fd5b5060045461031590600160b01b900460ff1681565b34801561045557600080fd5b506102f26104643660046121a7565b611019565b34801561047557600080fd5b506040805180820190915260058152640c8b8d4b8d60da1b6020820152610345565b3480156104a357600080fd5b506103156104b23660046121a7565b6008546001600160a01b0391821691161490565b3480156104d257600080fd5b506102f26104e13660046122ec565b611075565b3480156104f257600080fd5b506102f26105013660046123ec565b61112a565b34801561051257600080fd5b506102f26111e0565b34801561052757600080fd5b506102f26111ea565b34801561053c57600080fd5b5060045461031590600160a81b900460ff1681565b34801561055d57600080fd5b50600854610392906001600160a01b031681565b34801561057d57600080fd5b50600354610392906001600160a01b031681565b34801561059d57600080fd5b506105d36105ac3660046120fe565b60066020526000908152604090208054600182015460028301546003909301549192909184565b604080519485526020850193909352918301526060820152608001610289565b3480156105ff57600080fd5b5061061361060e366004612249565b61123b565b60405161028991906124a0565b34801561062c57600080fd5b5061039261141d565b34801561064157600080fd5b506102f2611450565b34801561065657600080fd5b506102f2610665366004612249565b6114a1565b34801561067657600080fd5b506102f26106853660046124c8565b611529565b34801561069657600080fd5b50600154610392906001600160a01b031681565b3480156106b657600080fd5b506102f26106c53660046121a7565b6116db565b3480156106d657600080fd5b506102f26106e5366004612542565b611701565b3480156106f657600080fd5b506102f26107053660046121a7565b611819565b34801561071657600080fd5b50600454610392906001600160a01b031681565b6000610734611822565b905090565b6000828152600660209081526040808320815160808101835281548082526001830154948201949094526002820154928101929092526003015460608201528291620186a09190830361079f5760405163bd88ff7b60e01b815260040160405180910390fd5b805160009081526005602090815260408083208151815460c09481028201850190935260a0810183815290939192849284919084018282801561080157602002820191906000526020600020905b8154815260200190600101908083116107ed575b50505050508152602001600182015481526020016002820180548060200260200160405190810160405280929190818152602001828054801561086357602002820191906000526020600020905b81548152602001906001019080831161084f575b50505050508152602001600382018054806020026020016040519081016040528092919081815260200182805480156108bb57602002820191906000526020600020905b8154815260200190600101908083116108a7575b50505091835250506004919091015460ff16151560209091015260808101519091506000906108eb5760016108f0565b620186a05b62ffffff16905060008083600001516000815181106109115761091161258d565b6020026020010151856020015161092891906125b9565b891015610945576000856040015197509750505050505050610c0b565b600085602001518a61095791906125d2565b9050600092505b8451518310156109ab57808560000151848151811061097f5761097f61258d565b60200260200101511161099457829150610999565b6109ab565b826109a3816125e5565b93505061095e565b600092505b818310156109ff5786856040015184815181106109cf576109cf61258d565b60200260200101516109e191906125fe565b6109eb90896125b9565b9750826109f7816125e5565b9350506109b0565b845151600090610a11906001906125d2565b8303610a555785518051610a27906001906125d2565b81518110610a3757610a3761258d565b60200260200101518660200151610a4e91906125d2565b9050610aa8565b8551805184908110610a6957610a6961258d565b60200260200101518660000151846001610a8391906125b9565b81518110610a9357610a9361258d565b6020026020010151610aa591906125d2565b90505b80600003610ab4575060015b600086606001518481518110610acc57610acc61258d565b602002602001015182610adf9190612615565b9050600087600001518581518110610af957610af961258d565b602002602001015184610b0c91906125d2565b9050600082610b1b89846125fe565b610b259190612615565b90508789606001518781518110610b3e57610b3e61258d565b6020026020010151828d8c604001518a81518110610b5e57610b5e61258d565b6020026020010151610b7091906125fe565b610b7a91906125fe565b610b849190612615565b610b8e9190612615565b610b98908d6125b9565b9b508a6127108b606001518e610bae91906125fe565b610bb89190612615565b610bc29190612615565b9b5089606001518c1115610bd85789606001519b505b8b8a604001511115610bed5760009c50610bff565b60408a0151610bfc908d6125d2565b9c505b50505050505050505050505b9250929050565b610c1a611849565b6004805460ff60a81b191690556040517f4be5ee7c6a0a76b9209bebdd61b374e76803cfaa8e72886ee892b8dc972423f390600090a1610c686305e9a76960e21b610c6361189d565b6118b0565b600380546001600160a01b0319169055565b60008181526005602090815260408083208151815460c09481028201850190935260a081018381526060959491938492849190840182828015610cdc57602002820191906000526020600020905b815481526020019060010190808311610cc8575b505050505081526020016001820154815260200160028201805480602002602001604051908101604052809291908181526020018280548015610d3e57602002820191906000526020600020905b815481526020019060010190808311610d2a575b5050505050815260200160038201805480602002602001604051908101604052809291908181526020018280548015610d9657602002820191906000526020600020905b815481526020019060010190808311610d82575b50505091835250506004919091015460ff161515602091820152815182820151604080850151606086015160808701519251969750610dde9694959394919390929101612637565b604051602081830303815290604052915050919050565b6000546001600160a01b031615610e1f576040516311f9360560e31b815260040160405180910390fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b610e4961192e565b60005b86811015610f6b57610e5c61072a565b6002546001600160a01b039182169116636352211e8a8a85818110610e8357610e8361258d565b905060200201356040518263ffffffff1660e01b8152600401610ea891815260200190565b602060405180830381865afa158015610ec5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee9919061268b565b6001600160a01b031614610f1057604051637f63bd0f60e01b815260040160405180910390fd5b610f59888883818110610f2557610f2561258d565b90506020020135878784818110610f3e57610f3e61258d565b9050602002016020810190610f5391906121a7565b86611966565b80610f63816125e5565b915050610e4c565b50610f7f633ac1db0960e01b610c6361189d565b610f96600160008051602061295783398151915255565b50505050505050565b610fa7611849565b600454600160a81b900460ff16610fd157604051637f63bd0f60e01b815260040160405180910390fd5b600380546001600160a01b0319166001600160a01b038316179055610fff633dfd387360e01b610c6361189d565b50565b60008061100f8342610739565b9094909350915050565b611021611849565b600480546001600160a01b0319166001600160a01b0383169081179091556040519081527fee1bb493d7c23b025fa54ed4a0e75607c5b5038907b273223fc660f83dab365d9060200160405180910390a150565b61107d611849565b60005b8881101561110b576110f98a8a8381811061109d5761109d61258d565b90506020020160208101906110b291906121a7565b8989848181106110c4576110c461258d565b9050608002018036038101906110da91906126e6565b8888858181106110ec576110ec61258d565b9050602002013587611b25565b80611103816125e5565b915050611080565b5061111f635e55848b60e01b610c6361189d565b505050505050505050565b61113261192e565b6004546001600160a01b031661114661072a565b6001600160a01b03161461116d57604051637f63bd0f60e01b815260040160405180910390fd5b60005b848110156111ae5761119c86868381811061118d5761118d61258d565b90506020020135600086611966565b806111a6816125e5565b915050611170565b506111c2636629304960e01b610c6361189d565b6111d9600160008051602061295783398151915255565b5050505050565b6111e8611c83565b565b6111f2611849565b6004805460ff60a01b191690556040517f3a99ec168e67aaf838b65474d219f8c65d960d7a00ab5bea7c2f02fdc56a0cdb90600090a16111e8637733e0fb60e01b610c6361189d565b6060611245611849565b600454600160a01b900460ff1661126f57604051637f63bd0f60e01b815260040160405180910390fd5b866001600160401b03811115611287576112876126a8565b6040519080825280602002602001820160405280156112b0578160200160208202803683370190505b50905060005b878110156113fe5760008989838181106112d2576112d261258d565b90506020020135905060006112e682611002565b5090508888848181106112fb576112fb61258d565b9050602002016020810190611310919061274b565b61133857600082815260076020526040812080548392906113329084906125b9565b90915550505b8084848151811061134b5761134b61258d565b6020026020010181815250507f722bef2bf5e70d834c942d4d5afc99471963bfce84ada00ef3f8c7b880d6adb682828b8b8781811061138c5761138c61258d565b90506020020160208101906113a1919061274b565b6040805193845260208401929092521515908201526060810189905260800160405180910390a1506000908152600660205260408120818155600181018290556002810182905560030155806113f6816125e5565b9150506112b6565b50611412638579705160e01b610c6361189d565b979650505050505050565b60006107347f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b611458611849565b6004805460ff60b01b191690556040517f37ae717bce398f7d557a36324e1fa87c0d2d1a4f1a51d7c0b8a19df8d99e29c890600090a16111e863ce8d388d60e01b610c6361189d565b6114a9611849565b60005b86811015611515576115038888838181106114c9576114c961258d565b905060200201358787848181106114e2576114e261258d565b90506020028101906114f49190612766565b6114fd90612815565b86611c95565b8061150d816125e5565b9150506114ac565b50610f9663d579155960e01b610c6361189d565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff1615906001600160401b031660008115801561156e5750825b90506000826001600160401b0316600114801561158a5750303b155b905081158015611598575080155b156115b65760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff1916600117855583156115e057845460ff60401b1916600160401b1785555b6115f06115eb61072a565b611db8565b6115f98b611df3565b600280546001600160a01b03808d166001600160a01b03199283161790925560018054928c1692909116919091179055611631611dfb565b61163961141d565b600480546001600160a01b03929092166001600160a81b031990921691909117600160a01b8a1515021761ffff60a81b1916600160a81b8915150260ff60b01b191617600160b01b8815150217905583156116ce57845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050505050505050565b6116e3611849565b600880546001600160a01b0319166001600160a01b03831617905550565b611709611849565b600454600160b01b900460ff1661173357604051637f63bd0f60e01b815260040160405180910390fd5b60008061173e61072a565b6001600160a01b03168560405160006040518083038185875af1925050503d8060008114611788576040519150601f19603f3d011682016040523d82523d6000602084013e61178d565b606091505b50915091508181906117bb5760405162461bcd60e51b81526004016117b2919061217f565b60405180910390fd5b507f6352c5382c4a4578e712449ca65e83cdb392d045dfcf1cad9615189db2da244b6117e561072a565b604080516001600160a01b039092168252602082018890520160405180910390a16111d963721c9a8b60e11b610c6361189d565b61102181611e03565b6008546000906001600160a01b03163303611844575060131936013560601c90565b503390565b61185161072a565b6001600160a01b031661186261141d565b6001600160a01b0316146111e85761187861072a565b60405163118cdaa760e01b81526001600160a01b0390911660048201526024016117b2565b3660006118a8611e0b565b915091509091565b6003546001600160a01b03166118c557505050565b6003546001600160a01b03166374a14fd48484846118e161072a565b6040518563ffffffff1660e01b815260040161190094939291906128c1565b600060405180830381600087803b15801561191a57600080fd5b505af1158015610f96573d6000803e3d6000fd5b60008051602061295783398151915280546001190161196057604051633ee5aeb560e01b815260040160405180910390fd5b60029055565b6000806001600160a01b0384166119eb576002546040516331a9108f60e11b8152600481018790526001600160a01b0390911690636352211e90602401602060405180830381865afa1580156119c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119e4919061268b565b90506119ee565b50825b60008581526007602052604090205491508115611a91576000858152600760205260408082208290555181906001600160a01b0384169085908381818185875af1925050503d8060008114611a5f576040519150601f19603f3d011682016040523d82523d6000602084013e611a64565b606091505b5091509150818190611a895760405162461bcd60e51b81526004016117b2919061217f565b505050611a9e565b611a9b8582611e47565b91505b60007fbc6d6878a97806274fc49a58a7438505eb22cc99029fe9ce4f9926fe24a7848186611aca61072a565b604080519283526001600160a01b03918216602084015290851690820152606081018590526080810183905260a0810186905260c0015b60405180910390a1505050505050565b600160008051602061295783398151915255565b6002546040516340d097c360e01b81526001600160a01b03868116600483015260009216906340d097c3906024016020604051808303816000875af1158015611b72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b969190612913565b84516000908152600560205260409020909150611bb281611ef3565b15611bd0576040516303be3a3760e21b815260040160405180910390fd5b8460600151856040015110611bf8576040516378c0fc4360e01b815260040160405180910390fd5b60008281526006602090815260409182902087518082558883015160018301558884015160028301556060808a015160039093019290925583519081529182018590526001600160a01b03891692820192909252908101859052608081018490527fbfb1e0f8b9ebcc64e4f4ca88ad9d0077ee1847ad04abbf0b4e9f5c63ae34d3769060a001611b01565b611c8b611849565b6111e86000611f2d565b6000838152600560205260409020611cac90611ef3565b611cc957604051631f2ec56d60e21b815260040160405180910390fd5b611cd282611f9e565b1580611cdc575082155b15611cfa576040516303be3a3760e21b815260040160405180910390fd5b6000838152600560209081526040909120835180518593611d1f92849291019061209e565b50602082810151600183015560408301518051611d42926002850192019061209e565b5060608201518051611d5e91600384019160209091019061209e565b50608091909101516004909101805460ff191691151591909117905560408051848152602081018390527fd9e41d72fe3da30af98d3172c0ed1f85bf3951b4ef47a2fe1c1cde7a17a92515910160405180910390a1505050565b611dc0612055565b6001600160a01b038116611dea57604051631e4fbdf760e01b8152600060048201526024016117b2565b610fff81611f2d565b610e1f612055565b611b11612055565b611dc0611849565b60085436906000906001600160a01b03163303611e3e5760008036611e316014826125d2565b926118a89392919061292c565b50600091369150565b6000806000611e5585611002565b600087815260066020526040808220600281018490559051939550919350909181906001600160a01b0388169086908381818185875af1925050503d8060008114611ebc576040519150601f19603f3d011682016040523d82523d6000602084013e611ec1565b606091505b5091509150818190611ee65760405162461bcd60e51b81526004016117b2919061217f565b5093979650505050505050565b60018101546003820154825460028401546000939291611f12916125fe565b611f1c91906125fe565b611f2691906125fe565b1592915050565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b60008060005b836040015151811015611fee5783604001518181518110611fc757611fc761258d565b602002602001015182611fda91906125b9565b915080611fe6816125e5565b915050611fa4565b50612710811480156120065750825151604084015151145b801561203c5750602083015183518051612022906001906125d2565b815181106120325761203261258d565b6020026020010151105b801561204e5750825151606084015151145b9392505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff166111e857604051631afcd79f60e31b815260040160405180910390fd5b8280548282559060005260206000209081019282156120d9579160200282015b828111156120d95782518255916020019190600101906120be565b506120e59291506120e9565b5090565b5b808211156120e557600081556001016120ea565b60006020828403121561211057600080fd5b5035919050565b6000806040838503121561212a57600080fd5b50508035926020909101359150565b6000815180845260005b8181101561215f57602081850181015186830182015201612143565b506000602082860101526020601f19601f83011685010191505092915050565b60208152600061204e6020830184612139565b6001600160a01b0381168114610fff57600080fd5b6000602082840312156121b957600080fd5b813561204e81612192565b60008083601f8401126121d657600080fd5b5081356001600160401b038111156121ed57600080fd5b6020830191508360208260051b8501011115610c0b57600080fd5b60008083601f84011261221a57600080fd5b5081356001600160401b0381111561223157600080fd5b602083019150836020828501011115610c0b57600080fd5b60008060008060008060006080888a03121561226457600080fd5b87356001600160401b038082111561227b57600080fd5b6122878b838c016121c4565b909950975060208a01359150808211156122a057600080fd5b6122ac8b838c016121c4565b909750955060408a0135945060608a01359150808211156122cc57600080fd5b506122d98a828b01612208565b989b979a50959850939692959293505050565b600080600080600080600080600060a08a8c03121561230a57600080fd5b89356001600160401b038082111561232157600080fd5b61232d8d838e016121c4565b909b50995060208c013591508082111561234657600080fd5b818c0191508c601f83011261235a57600080fd5b81358181111561236957600080fd5b8d60208260071b850101111561237e57600080fd5b6020830199508098505060408c013591508082111561239c57600080fd5b6123a88d838e016121c4565b909750955060608c0135945060808c01359150808211156123c857600080fd5b506123d58c828d01612208565b915080935050809150509295985092959850929598565b60008060008060006060868803121561240457600080fd5b85356001600160401b038082111561241b57600080fd5b61242789838a016121c4565b909750955060208801359450604088013591508082111561244757600080fd5b5061245488828901612208565b969995985093965092949392505050565b600081518084526020808501945080840160005b8381101561249557815187529582019590820190600101612479565b509495945050505050565b60208152600061204e6020830184612465565b803580151581146124c357600080fd5b919050565b60008060008060008060c087890312156124e157600080fd5b86356124ec81612192565b955060208701356124fc81612192565b9450604087013561250c81612192565b935061251a606088016124b3565b9250612528608088016124b3565b915061253660a088016124b3565b90509295509295509295565b60008060006040848603121561255757600080fd5b8335925060208401356001600160401b0381111561257457600080fd5b61258086828701612208565b9497909650939450505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b808201808211156125cc576125cc6125a3565b92915050565b818103818111156125cc576125cc6125a3565b6000600182016125f7576125f76125a3565b5060010190565b80820281158282048414176125cc576125cc6125a3565b60008261263257634e487b7160e01b600052601260045260246000fd5b500490565b60a08152600061264a60a0830188612465565b86602084015282810360408401526126628187612465565b905082810360608401526126768186612465565b91505082151560808301529695505050505050565b60006020828403121561269d57600080fd5b815161204e81612192565b634e487b7160e01b600052604160045260246000fd5b60405160a081016001600160401b03811182821017156126e0576126e06126a8565b60405290565b6000608082840312156126f857600080fd5b604051608081018181106001600160401b038211171561271a5761271a6126a8565b8060405250823581526020830135602082015260408301356040820152606083013560608201528091505092915050565b60006020828403121561275d57600080fd5b61204e826124b3565b60008235609e1983360301811261277c57600080fd5b9190910192915050565b600082601f83011261279757600080fd5b813560206001600160401b03808311156127b3576127b36126a8565b8260051b604051601f19603f830116810181811084821117156127d8576127d86126a8565b6040529384528581018301938381019250878511156127f657600080fd5b83870191505b84821015611412578135835291830191908301906127fc565b600060a0823603121561282757600080fd5b61282f6126be565b82356001600160401b038082111561284657600080fd5b61285236838701612786565b835260208501356020840152604085013591508082111561287257600080fd5b61287e36838701612786565b6040840152606085013591508082111561289757600080fd5b506128a436828601612786565b6060830152506128b6608084016124b3565b608082015292915050565b63ffffffff60e01b85168152606060208201528260608201528284608083013760008184016080908101919091526001600160a01b03929092166040820152601f909201601f19169091010192915050565b60006020828403121561292557600080fd5b5051919050565b6000808585111561293c57600080fd5b8386111561294957600080fd5b505082019391909203915056fe9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00a2646970667358221220646e433073083100e1b55d83d651f532f48fe326c0705675db271c45d3774ade64736f6c63430008140033",
  "devdoc": {
    "errors": {
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "InvalidPresetFormat()": [
        {
          "details": "0x0ef8e8dc"
        }
      ],
      "InvalidSkipAmount()": [
        {
          "details": "0x78c0fc43"
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "NotPermissioned()": [
        {
          "details": "0x7f63bd0f"
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "PresetDoesNotExist()": [
        {
          "details": "0xbd88ff7b"
        }
      ],
      "PresetExists()": [
        {
          "details": "0x7cbb15b4"
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "calculateAmountClaimable(uint256)": {
        "details": "This is the most complex part of the smart contract. Quite a bit of calculations are performed here.",
        "params": {
          "actualId": "The ID of the actual unlocking schedule that we are working with."
        },
        "returns": {
          "deltaAmountClaimable": "Amount of tokens claimable right now.",
          "updatedAmountClaimed": "New total amount of tokens claimed. This is the sum of all previously claimed tokens and `deltaAmountClaimable`."
        }
      },
      "disableCancel()": {
        "details": "Only callable by the owner."
      },
      "disableHook()": {
        "details": "Only callable by the owner."
      },
      "disableWithdraw()": {
        "details": "Only callable by the owner."
      },
      "getEncodedPreset(bytes32)": {
        "params": {
          "presetId": "The ID of the preset we are trying to read."
        },
        "returns": {
          "_0": "An ABI-encoded `Preset`, as nested objects cannot be returned directly in Solidity."
        }
      },
      "initialize(address,address,address,bool,bool,bool)": {
        "details": "This contract should be deployed with `TTUDeployerLite`, which calls this function with the correct parameters.",
        "params": {
          "deployer_": "The address of the deployer. It helps call the fee collector during claim.",
          "futureToken_": "The address of the associated FutureToken.",
          "isCancelable_": "If the founder is allowed to cancel schedules. Can be disabled later, but cannot be enabled again.",
          "isHookable_": "If the founder is allowed to attach external hooks to function calls. Can be disabled later, but cannot be enabled again.",
          "isWithdrawable_": "If the founder is allowed to withdraw deposited tokens. Can be disabled later, but cannot be enabled again.",
          "projectToken": "The address of the token that the founder intends to unlock and distribute."
        }
      },
      "setClaimingDelegate(address)": {
        "details": "Only callable by the owner."
      },
      "simulateAmountClaimable(uint256,uint256)": {
        "details": "This is the most complex part of the smart contract. Quite a bit of calculations are performed here.",
        "params": {
          "actualId": "The ID of the actual unlocking schedule that we are working with.",
          "claimTimestampAbsolute": "The simulated time of claim."
        },
        "returns": {
          "deltaAmountClaimable": "Amount of tokens claimable right now.",
          "updatedAmountClaimed": "New total amount of tokens claimed. This is the sum of all previously claimed tokens and `deltaAmountClaimable`."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "actuals(uint256)": {
        "notice": "Returns the Actual struct based on the input ID."
      },
      "calculateAmountClaimable(uint256)": {
        "notice": "Calculates the amount of unlocked tokens that have yet to be claimed in an actual unlocking schedule."
      },
      "disableCancel()": {
        "notice": "Permanently disables the `cancel()` function."
      },
      "disableHook()": {
        "notice": "Permanently disables the hook."
      },
      "disableWithdraw()": {
        "notice": "Permanently prevents the founder from withdrawing deposits."
      },
      "getEncodedPreset(bytes32)": {
        "notice": "To decode in JS, use: ```js  ethers.utils.defaultAbiCoder.decode(      ['uint256[]', 'uint256', 'uint256[]', 'uint256[]', 'bool'],      encodedPreset  ) ```"
      },
      "setClaimingDelegate(address)": {
        "notice": "Sets the claiming delegate who can trigger claims on behalf of recipients."
      },
      "simulateAmountClaimable(uint256,uint256)": {
        "notice": "Simulates the amount of unlocked tokens that have yet to be claimed at a specific time in an actual unlocking schedule."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2604,
        "contract": "contracts/core/extensions/native-token/TTUV2Native.sol:TTUV2Native",
        "label": "_projectToken",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2693,
        "contract": "contracts/core/extensions/native-token/TTUV2Native.sol:TTUV2Native",
        "label": "deployer",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ITTUDeployer)4609"
      },
      {
        "astId": 2697,
        "contract": "contracts/core/extensions/native-token/TTUV2Native.sol:TTUV2Native",
        "label": "futureToken",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ITTFutureTokenV2)4505"
      },
      {
        "astId": 2701,
        "contract": "contracts/core/extensions/native-token/TTUV2Native.sol:TTUV2Native",
        "label": "hook",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(ITTHook)4519"
      },
      {
        "astId": 2704,
        "contract": "contracts/core/extensions/native-token/TTUV2Native.sol:TTUV2Native",
        "label": "claimingDelegate",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 2707,
        "contract": "contracts/core/extensions/native-token/TTUV2Native.sol:TTUV2Native",
        "label": "isCancelable",
        "offset": 20,
        "slot": "4",
        "type": "t_bool"
      },
      {
        "astId": 2710,
        "contract": "contracts/core/extensions/native-token/TTUV2Native.sol:TTUV2Native",
        "label": "isHookable",
        "offset": 21,
        "slot": "4",
        "type": "t_bool"
      },
      {
        "astId": 2713,
        "contract": "contracts/core/extensions/native-token/TTUV2Native.sol:TTUV2Native",
        "label": "isWithdrawable",
        "offset": 22,
        "slot": "4",
        "type": "t_bool"
      },
      {
        "astId": 2718,
        "contract": "contracts/core/extensions/native-token/TTUV2Native.sol:TTUV2Native",
        "label": "_presets",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_struct(Preset)4988_storage)"
      },
      {
        "astId": 2724,
        "contract": "contracts/core/extensions/native-token/TTUV2Native.sol:TTUV2Native",
        "label": "actuals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(Actual)4998_storage)"
      },
      {
        "astId": 2729,
        "contract": "contracts/core/extensions/native-token/TTUV2Native.sol:TTUV2Native",
        "label": "pendingAmountClaimableForCancelledActuals",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 5082,
        "contract": "contracts/core/extensions/native-token/TTUV2Native.sol:TTUV2Native",
        "label": "trustedForwarder",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ITTFutureTokenV2)4505": {
        "encoding": "inplace",
        "label": "contract ITTFutureTokenV2",
        "numberOfBytes": "20"
      },
      "t_contract(ITTHook)4519": {
        "encoding": "inplace",
        "label": "contract ITTHook",
        "numberOfBytes": "20"
      },
      "t_contract(ITTUDeployer)4609": {
        "encoding": "inplace",
        "label": "contract ITTUDeployer",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_struct(Preset)4988_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct Preset)",
        "numberOfBytes": "32",
        "value": "t_struct(Preset)4988_storage"
      },
      "t_mapping(t_uint256,t_struct(Actual)4998_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Actual)",
        "numberOfBytes": "32",
        "value": "t_struct(Actual)4998_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Actual)4998_storage": {
        "encoding": "inplace",
        "label": "struct Actual",
        "members": [
          {
            "astId": 4991,
            "contract": "contracts/core/extensions/native-token/TTUV2Native.sol:TTUV2Native",
            "label": "presetId",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 4993,
            "contract": "contracts/core/extensions/native-token/TTUV2Native.sol:TTUV2Native",
            "label": "startTimestampAbsolute",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4995,
            "contract": "contracts/core/extensions/native-token/TTUV2Native.sol:TTUV2Native",
            "label": "amountClaimed",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4997,
            "contract": "contracts/core/extensions/native-token/TTUV2Native.sol:TTUV2Native",
            "label": "totalAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Preset)4988_storage": {
        "encoding": "inplace",
        "label": "struct Preset",
        "members": [
          {
            "astId": 4977,
            "contract": "contracts/core/extensions/native-token/TTUV2Native.sol:TTUV2Native",
            "label": "linearStartTimestampsRelative",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 4979,
            "contract": "contracts/core/extensions/native-token/TTUV2Native.sol:TTUV2Native",
            "label": "linearEndTimestampRelative",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4982,
            "contract": "contracts/core/extensions/native-token/TTUV2Native.sol:TTUV2Native",
            "label": "linearBips",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 4985,
            "contract": "contracts/core/extensions/native-token/TTUV2Native.sol:TTUV2Native",
            "label": "numOfUnlocksForEachLinear",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 4987,
            "contract": "contracts/core/extensions/native-token/TTUV2Native.sol:TTUV2Native",
            "label": "stream",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}