{
  "address": "0x074d2978Ed93686E41Fef7Df778FC7F2E07dA905",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadyDeployed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "feeCollector",
          "type": "address"
        }
      ],
      "name": "FeeCollectorChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "unlockerImpl",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "futureTokenImpl",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "trackerTokenImpl",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "beaconManagerImpl",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "feeCollector",
          "type": "address"
        }
      ],
      "name": "TTUDeployerInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "projectId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "unlocker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "futureToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "trackerToken",
          "type": "address"
        }
      ],
      "name": "TokenTableSuiteDeployed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "beaconManager",
      "outputs": [
        {
          "internalType": "contract TTUV2BeaconManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "projectToken",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "projectId",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "isUpgradeable",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isTransferable",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isCancelable",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isHookable",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isWithdrawable",
          "type": "bool"
        }
      ],
      "name": "deployTTSuite",
      "outputs": [
        {
          "internalType": "contract ITokenTableUnlockerV2",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "contract ITTFutureTokenV2",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "contract ITTTrackerTokenV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeCollector",
      "outputs": [
        {
          "internalType": "contract ITTUFeeCollector",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "registry",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract TTUV2BeaconManager",
          "name": "_beaconManager",
          "type": "address"
        }
      ],
      "name": "setBeaconManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ITTUFeeCollector",
          "name": "feeCollector_",
          "type": "address"
        }
      ],
      "name": "setFeeCollector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xb10186ab6daba6ffb6a0dc6e90ca8ba211e1a9b9ca1c6d5069bababe48097300",
  "receipt": {
    "to": null,
    "from": "0x55D22d83752a9bE59B8959f97FCf3b2CAbca5094",
    "contractAddress": "0x074d2978Ed93686E41Fef7Df778FC7F2E07dA905",
    "transactionIndex": 1,
    "gasUsed": "1235433",
    "logsBloom": "0x
    "blockHash": "0x891166fef447729cd85ecd66862b7097ee823cb42155036ee7110aa60b1178e6",
    "transactionHash": "0xb10186ab6daba6ffb6a0dc6e90ca8ba211e1a9b9ca1c6d5069bababe48097300",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 2962688,
        "transactionHash": "0xb10186ab6daba6ffb6a0dc6e90ca8ba211e1a9b9ca1c6d5069bababe48097300",
        "address": "0x074d2978Ed93686E41Fef7Df778FC7F2E07dA905",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000055d22d83752a9be59b8959f97fcf3b2cabca5094"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0x891166fef447729cd85ecd66862b7097ee823cb42155036ee7110aa60b1178e6"
      }
    ],
    "blockNumber": 2962688,
    "cumulativeGasUsed": "1604076",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "07f6844a18cac701e4fd9ebdfa0cd8e5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyDeployed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeCollector\",\"type\":\"address\"}],\"name\":\"FeeCollectorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"unlockerImpl\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"futureTokenImpl\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trackerTokenImpl\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beaconManagerImpl\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeCollector\",\"type\":\"address\"}],\"name\":\"TTUDeployerInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"projectId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"unlocker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"futureToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trackerToken\",\"type\":\"address\"}],\"name\":\"TokenTableSuiteDeployed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"beaconManager\",\"outputs\":[{\"internalType\":\"contract TTUV2BeaconManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"projectToken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"projectId\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isUpgradeable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isTransferable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isCancelable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isHookable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isWithdrawable\",\"type\":\"bool\"}],\"name\":\"deployTTSuite\",\"outputs\":[{\"internalType\":\"contract ITokenTableUnlockerV2\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"contract ITTFutureTokenV2\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"contract ITTTrackerTokenV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"contract ITTUFeeCollector\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract TTUV2BeaconManager\",\"name\":\"_beaconManager\",\"type\":\"address\"}],\"name\":\"setBeaconManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITTUFeeCollector\",\"name\":\"feeCollector_\",\"type\":\"address\"}],\"name\":\"setFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AlreadyDeployed()\":[{\"details\":\"0xa6ef0ba1\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"deployTTSuite(address,string,bool,bool,bool,bool,bool)\":{\"details\":\"Emits `TokenTableSuiteDeployed`. Throws: `AlreadyDeployed`.\",\"params\":{\"isCancelable\":\"Allow unlocking schedules to be cancelled in the Unlocker.\",\"isHookable\":\"Allow Unlocker to call an external hook.\",\"isTransferable\":\"Allow FutureToken to be transferable.\",\"isUpgradeable\":\"When set to false, a `Clone` instead of a `BeaconProxy` is created to prevent future upgradeability.\",\"isWithdrawable\":\"Allow the founder to withdraw deposited funds.\",\"projectId\":\"A unique projectId, otherwise it will revert.\",\"projectToken\":\"The project token address.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"feeCollector\":{\"details\":\"Exposes the fee collector variable.\",\"return\":\"An instance of the fee collector.\",\"returns\":{\"_0\":\"An instance of the fee collector.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deployTTSuite(address,string,bool,bool,bool,bool,bool)\":{\"notice\":\"Deploys and configures a new set of TokenTable products.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/proxy/TTUDeployerLite.sol\":\"TTUDeployerLite\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    // We re-declare ERC-1967 events here because they can't be used directly from IERC1967.\\n    // This will be fixed in Solidity 0.8.21. At that point we should remove these events.\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x06a78f9b3ee3e6d0eb4e4cd635ba49960bea34cac1db8c0a27c75f2319f1fd65\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback\\n     * function and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n}\\n\",\"keccak256\":\"0xc3f2ec76a3de8ed7a7007c46166f5550c72c7709e3fc7e8bb3111a7191cdedbd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/BeaconProxy.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBeacon} from \\\"./IBeacon.sol\\\";\\nimport {Proxy} from \\\"../Proxy.sol\\\";\\nimport {ERC1967Utils} from \\\"../ERC1967/ERC1967Utils.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that gets the implementation address for each call from an {UpgradeableBeacon}.\\n *\\n * The beacon address can only be set once during construction, and cannot be changed afterwards. It is stored in an\\n * immutable variable to avoid unnecessary storage reads, and also in the beacon storage slot specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] so that it can be accessed externally.\\n *\\n * CAUTION: Since the beacon address can never be changed, you must ensure that you either control the beacon, or trust\\n * the beacon to not upgrade the implementation maliciously.\\n *\\n * IMPORTANT: Do not use the implementation logic to modify the beacon storage slot. Doing so would leave the proxy in\\n * an inconsistent state where the beacon storage slot does not match the beacon address.\\n */\\ncontract BeaconProxy is Proxy {\\n    // An immutable address for the beacon to avoid unnecessary SLOADs before each delegate call.\\n    address private immutable _beacon;\\n\\n    /**\\n     * @dev Initializes the proxy with `beacon`.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\\n     * will typically be an encoded function call, and allows initializing the storage of the proxy like a Solidity\\n     * constructor.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract with the interface {IBeacon}.\\n     * - If `data` is empty, `msg.value` must be zero.\\n     */\\n    constructor(address beacon, bytes memory data) payable {\\n        ERC1967Utils.upgradeBeaconToAndCall(beacon, data);\\n        _beacon = beacon;\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address of the associated beacon.\\n     */\\n    function _implementation() internal view virtual override returns (address) {\\n        return IBeacon(_getBeacon()).implementation();\\n    }\\n\\n    /**\\n     * @dev Returns the beacon.\\n     */\\n    function _getBeacon() internal view virtual returns (address) {\\n        return _beacon;\\n    }\\n}\\n\",\"keccak256\":\"0x387ebdcb365b8e620f26645d2b34a161cd39eedfb0219e8baff55630c5ae113c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc59a78b07b44b2cf2e8ab4175fca91e8eca1eee2df7357b8d2a8833e5ea1f64c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/UpgradeableBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBeacon} from \\\"./IBeacon.sol\\\";\\nimport {Ownable} from \\\"../../access/Ownable.sol\\\";\\n\\n/**\\n * @dev This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their\\n * implementation contract, which is where they will delegate all function calls.\\n *\\n * An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.\\n */\\ncontract UpgradeableBeacon is IBeacon, Ownable {\\n    address private _implementation;\\n\\n    /**\\n     * @dev The `implementation` of the beacon is invalid.\\n     */\\n    error BeaconInvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev Emitted when the implementation returned by the beacon is changed.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Sets the address of the initial implementation, and the initial owner who can upgrade the beacon.\\n     */\\n    constructor(address implementation_, address initialOwner) Ownable(initialOwner) {\\n        _setImplementation(implementation_);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function implementation() public view virtual returns (address) {\\n        return _implementation;\\n    }\\n\\n    /**\\n     * @dev Upgrades the beacon to a new implementation.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * Requirements:\\n     *\\n     * - msg.sender must be the owner of the contract.\\n     * - `newImplementation` must be a contract.\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyOwner {\\n        _setImplementation(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Sets the implementation contract address for this beacon\\n     *\\n     * Requirements:\\n     *\\n     * - `newImplementation` must be a contract.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert BeaconInvalidImplementation(newImplementation);\\n        }\\n        _implementation = newImplementation;\\n        emit Upgraded(newImplementation);\\n    }\\n}\\n\",\"keccak256\":\"0x5920bac7215d12961e23b207f6e81a1d64aa4935a4469abe95b64a96a3c3007b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x75a4ee64c68dbd5f38bddd06e664a64c8271b4caa554fb6f0607dfd672bb4bf3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"contracts/interfaces/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\ninterface IOwnable {\\n    function renounceOwnership() external;\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function owner() external view returns (address);\\n}\\n\",\"keccak256\":\"0x2c17e601b5c0d39493e2d4a5ec2efe7135c2762ebd00b328055fb892352265aa\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ITTFutureTokenV2.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport {IERC721AQueryableUpgradeable} from \\\"erc721a-upgradeable/contracts/interfaces/IERC721AQueryableUpgradeable.sol\\\";\\nimport {IVersionable} from \\\"./IVersionable.sol\\\";\\n\\n/**\\n * @title ITTFutureTokenV2\\n * @author Jack Xu @ EthSign\\n * @dev The lightweight interface for TTFutureTokenV2(.5.x), which handles unlocking schedule ownership for TokenTable.\\n */\\ninterface ITTFutureTokenV2 is IERC721AQueryableUpgradeable, IVersionable {\\n    event DidSetBaseURI(string newURI);\\n\\n    /**\\n     * @dev 0x7f63bd0f\\n     */\\n    error NotPermissioned();\\n\\n    /**\\n     * @dev This contract should be deployed with `TTUDeployerLite`, which calls this function with the correct parameters.\\n     * @param projectToken The address of the token that the founder intends to unlock and distribute.\\n     * @param isTransferable If the FutureTokens (aka schedules) can be transfered once minted.\\n     */\\n    function initialize(address projectToken, bool isTransferable) external;\\n\\n    /**\\n     * @notice This contract should be deployed with `TTUDeployerLite`, which calls this function with the correct parameters.\\n     * @dev This function can only be called once.\\n     * @param authorizedMinter_ The address which is authorized to mint new FutureTokens. This is set to the corresponding Unlocker in the deployer.\\n     */\\n    function setAuthorizedMinterSingleUse(address authorizedMinter_) external;\\n\\n    /**\\n     * @notice Safely mints a new FutureToken to the specified address.\\n     * @dev This function can only be called by the authorized minter.\\n     * @param to The recipient of the new FutureToken.\\n     * @return tokenId The minted token ID (aka actual ID or schedule ID).\\n     */\\n    function safeMint(address to) external returns (uint256 tokenId);\\n\\n    /**\\n     * @notice Updates the base URI.\\n     * @dev This function can only be called by the owner of the authorized minter, which is usually the founder.\\n     * @param uri The new base URI.\\n     */\\n    function setURI(string calldata uri) external;\\n\\n    /**\\n     * @notice Gets information regarding the unlocking schedule associated with this FutureToken.\\n     * @param tokenId The actual ID or schedule ID.\\n     * @return deltaAmountClaimable The amount of unlocked and unclaimed funds currently eligible to be claimed by the owner of the given ID.\\n     * @return amountAlreadyClaimed The amount of unlocked and claimed funds of the given ID.\\n     * @return isCancelable If the schedule associated with this ID can be canceled by the founder.\\n     */\\n    function getClaimInfo(\\n        uint256 tokenId\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 deltaAmountClaimable,\\n            uint256 amountAlreadyClaimed,\\n            bool isCancelable\\n        );\\n}\\n\",\"keccak256\":\"0xac62e3b48e1f49d7c0885cd1682cef8f6992986e72a1e8577ef6d6866e574c57\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ITTHook.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ITTHook\\n * @author Jack Xu @ EthSign\\n */\\ninterface ITTHook {\\n    /**\\n     * @notice Forwards the call context from the hooked contract.\\n     * @dev Reverts within hooks will revert the hooked contract as well.\\n     * @param selector The selector of the called function.\\n     * @param context Encoded data from the called function.\\n     * @param caller The caller of the hooked contract.\\n     */\\n    function didCall(\\n        bytes4 selector,\\n        bytes calldata context,\\n        address caller\\n    ) external;\\n}\\n\",\"keccak256\":\"0x552dcad2e51bebff9e5f8b45c9d12f4573ac6ce40525d6b09c39133e07b3be88\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ITTTrackerTokenV2.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport {IVersionable} from \\\"./IVersionable.sol\\\";\\n\\ninterface ITTTrackerTokenV2 is IVersionable {\\n    /**\\n     * @dev This contract should be deployed with `TTUDeployerLite`, which calls this function with the correct parameters.\\n     * @param ttuInstance_ The address of the corresponding Unlocker.\\n     */\\n    function initialize(address ttuInstance_) external;\\n}\\n\",\"keccak256\":\"0xbce3d637f7b098c1eae561fe222325b93723990bd2bddb86fa7d6c51b5da1db9\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ITTUDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport {ITokenTableUnlockerV2} from \\\"./ITokenTableUnlockerV2.sol\\\";\\nimport {ITTFutureTokenV2} from \\\"./ITTFutureTokenV2.sol\\\";\\nimport {ITTTrackerTokenV2} from \\\"./ITTTrackerTokenV2.sol\\\";\\nimport {ITTUFeeCollector} from \\\"./ITTUFeeCollector.sol\\\";\\n\\n/**\\n * @title TTUDeployer\\n * @author Jack Xu @ EthSign\\n * @dev This is the deployer for all TokenTable core and proxy contracts. All initial setup and configuration is automatically done here.\\n * To save gas and enable easy upgradeability, all deployed contracts are `Clone` or `BeaconProxy` instances.\\n * You should avoid deploying TokenTable contracts individually unless you know what you're doing.\\n */\\ninterface ITTUDeployer {\\n    event TTUDeployerInitialized(\\n        address unlockerImpl,\\n        address futureTokenImpl,\\n        address trackerTokenImpl,\\n        address beaconManagerImpl,\\n        address feeCollector\\n    );\\n    event TokenTableSuiteDeployed(\\n        address by,\\n        string projectId,\\n        address unlocker,\\n        address futureToken,\\n        address trackerToken\\n    );\\n    event FeeCollectorChanged(address feeCollector);\\n\\n    /**\\n     * @dev 0xa6ef0ba1\\n     */\\n    error AlreadyDeployed();\\n\\n    /**\\n     * @dev Exposes the fee collector variable.\\n     * @return An instance of the fee collector.\\n     */\\n    function feeCollector() external returns (ITTUFeeCollector);\\n\\n    /**\\n     * @notice Deploys and configures a new set of TokenTable products.\\n     * @dev Emits `TokenTableSuiteDeployed`. Throws: `AlreadyDeployed`.\\n     * @param projectToken The project token address.\\n     * @param projectId A unique projectId, otherwise it will revert.\\n     * @param isUpgradeable When set to false, a `Clone` instead of a `BeaconProxy` is created to prevent future upgradeability.\\n     * @param isTransferable Allow FutureToken to be transferable.\\n     * @param isCancelable Allow unlocking schedules to be cancelled in the Unlocker.\\n     * @param isHookable Allow Unlocker to call an external hook.\\n     * @param isWithdrawable Allow the founder to withdraw deposited funds.\\n     */\\n    function deployTTSuite(\\n        address projectToken,\\n        string calldata projectId,\\n        bool isUpgradeable,\\n        bool isTransferable,\\n        bool isCancelable,\\n        bool isHookable,\\n        bool isWithdrawable\\n    )\\n        external\\n        returns (ITokenTableUnlockerV2, ITTFutureTokenV2, ITTTrackerTokenV2);\\n}\\n\",\"keccak256\":\"0x3ccf0bd5c51500b0f70e3b1dffb195dcb6411b650d80caab9e8cfebd25a25980\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ITTUFeeCollector.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport {IOwnable} from \\\"./IOwnable.sol\\\";\\nimport {IVersionable} from \\\"./IVersionable.sol\\\";\\n\\n/**\\n * @title ITTUFeeCollector\\n * @author Jack Xu @ EthSign\\n * @dev This contract handles TokenTable service fee calculation.\\n */\\ninterface ITTUFeeCollector is IOwnable, IVersionable {\\n    event DefaultFeeSet(uint256 bips);\\n    event CustomFeeSet(address unlockerAddress, uint256 bips);\\n\\n    /**\\n     * @notice Returns the amount of fees to collect.\\n     * @param unlockerAddress The address of the Unlocker. Used to fetch pricing.\\n     * @param tokenTransferred The number of tokens transferred.\\n     * @return tokensCollected The number of tokens to collect as fees.\\n     */\\n    function getFee(\\n        address unlockerAddress,\\n        uint256 tokenTransferred\\n    ) external view returns (uint256 tokensCollected);\\n}\\n\",\"keccak256\":\"0x0c848499af16ffb2f7a9448aa07057adf133278ecd8a293d86951f3624777138\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ITokenTableUnlockerV2.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport {IOwnable} from \\\"./IOwnable.sol\\\";\\nimport {IVersionable} from \\\"./IVersionable.sol\\\";\\nimport {Preset, Actual} from \\\"./TokenTableUnlockerV2DataModels.sol\\\";\\nimport {ITTHook} from \\\"./ITTHook.sol\\\";\\nimport {ITTUDeployer} from \\\"./ITTUDeployer.sol\\\";\\nimport {ITTFutureTokenV2} from \\\"./ITTFutureTokenV2.sol\\\";\\n\\n/**\\n * @title ITokenTableUnlockerV2\\n * @author Jack Xu @ EthSign\\n * @dev The lightweight interface for TokenTableUnlockerV2(.5.x), which handles token unlocking and distribution for TokenTable.\\n */\\nabstract contract ITokenTableUnlockerV2 is IOwnable, IVersionable {\\n    event PresetCreated(bytes32 presetId, uint256 batchId);\\n    event ActualCreated(\\n        bytes32 presetId,\\n        uint256 actualId,\\n        address recipient,\\n        uint256 recipientId,\\n        uint256 batchId\\n    );\\n    event ActualCancelled(\\n        uint256 actualId,\\n        uint256 pendingAmountClaimable,\\n        bool didWipeClaimableBalance,\\n        uint256 batchId\\n    );\\n    event TokensClaimed(\\n        uint256 actualId,\\n        address caller,\\n        address to,\\n        uint256 amount,\\n        uint256 feesCharged,\\n        uint256 batchId\\n    );\\n    event TokensWithdrawn(address by, uint256 amount);\\n    event ClaimingDelegateSet(address delegate);\\n    event CancelDisabled();\\n    event HookDisabled();\\n    event WithdrawDisabled();\\n\\n    /**\\n     * @dev 0x0ef8e8dc\\n     */\\n    error InvalidPresetFormat();\\n    /**\\n     * @dev 0x7cbb15b4\\n     */\\n    error PresetExists();\\n    /**\\n     * @dev 0xbd88ff7b\\n     */\\n    error PresetDoesNotExist();\\n    /**\\n     * @dev 0x78c0fc43\\n     */\\n    error InvalidSkipAmount();\\n    /**\\n     * @dev 0x7f63bd0f\\n     */\\n    error NotPermissioned();\\n\\n    /**\\n     * @dev This contract should be deployed with `TTUDeployerLite`, which calls this function with the correct parameters.\\n     * @param projectToken The address of the token that the founder intends to unlock and distribute.\\n     * @param futureToken_ The address of the associated FutureToken.\\n     * @param deployer_ The address of the deployer. It helps call the fee collector during claim.\\n     * @param isCancelable_ If the founder is allowed to cancel schedules. Can be disabled later, but cannot be enabled again.\\n     * @param isHookable_ If the founder is allowed to attach external hooks to function calls. Can be disabled later, but cannot be enabled again.\\n     * @param isWithdrawable_ If the founder is allowed to withdraw deposited tokens. Can be disabled later, but cannot be enabled again.\\n     */\\n    function initialize(\\n        address projectToken,\\n        address futureToken_,\\n        address deployer_,\\n        bool isCancelable_,\\n        bool isHookable_,\\n        bool isWithdrawable_\\n    ) external virtual;\\n\\n    /**\\n     * @notice Creates an unlocking schedule preset template.\\n     * @dev Emits `PresetCreated`. Only callable by the owner.\\n     * @param presetIds These IDs can be the hashes of a plaintext preset names but really there is no restriction. Will revert if they already exist.\\n     * @param presets An array of `Preset` structs.\\n     * @param batchId Emitted as an event reserved for EthSign frontend use. This parameter has no effect on contract execution.\\n     * @param extraData An ERC-5750-esque parameter that's passed to the hook directly.\\n     */\\n    function createPresets(\\n        bytes32[] calldata presetIds,\\n        Preset[] calldata presets,\\n        uint256 batchId,\\n        bytes[] calldata extraData\\n    ) external virtual;\\n\\n    /**\\n     * @notice Creates an actual unlocking schedule based on a preset.\\n     * @dev Emits `ActualCreated`. A FutureToken is minted in the process with `tokenId == actualId`.\\n     * @param recipients An array of token recipients for the schedules. Note that claiming eligibility can be modified by transfering the corresponding FutureToken.\\n     * @param actuals An array of `Actual` structs.\\n     * @param recipientIds Emitted as an event reserved for EthSign frontend use. This parameter has no effect on contract execution.\\n     * @param batchId Emitted as an event reserved for EthSign frontend use. This parameter has no effect on contract execution.\\n     * @param extraData An ERC-5750-esque parameter that's passed to the hook directly.\\n     */\\n    function createActuals(\\n        address[] calldata recipients,\\n        Actual[] calldata actuals,\\n        uint256[] calldata recipientIds,\\n        uint256 batchId,\\n        bytes[] calldata extraData\\n    ) external virtual;\\n\\n    /**\\n     * @notice Withdraws existing deposit from the contract.\\n     * @dev Emits `TokensWithdrawn`. Only callable by the owner.\\n     * @param amount Amount of deposited funds the founder wishes to withdraw.\\n     * @param extraData An ERC-5750-esque parameter that's passed to the hook directly.\\n     */\\n    function withdrawDeposit(\\n        uint256 amount,\\n        bytes calldata extraData\\n    ) external virtual;\\n\\n    /**\\n     * @notice Claims claimable tokens for the specified schedules to the specified addresses respectively.\\n     * @dev Emits `TokensClaimed`. Only callable by the FutureToken owner.\\n     * @param actualIds The IDs of the unlocking schedules that we are trying to claim from.\\n     * @param claimTos If we want to send the claimed tokens to an address other than the caller. To send the claimed tokens to the caller (default behavior), pass in `ethers.constants.AddressZero`.\\n     * @param batchId Emitted as an event reserved for EthSign frontend use. This parameter has no effect on contract execution.\\n     * @param extraData An ERC-5750-esque parameter that's passed to the hook directly.\\n     */\\n    function claim(\\n        uint256[] calldata actualIds,\\n        address[] calldata claimTos,\\n        uint256 batchId,\\n        bytes[] calldata extraData\\n    ) external virtual;\\n\\n    /**\\n     * @notice Claims claimable tokens for the specified schedules on behalf of recipients. Claimed tokens are sent to the schedule recipients.\\n     * @dev Emits `TokensClaimed`. Only callable by the claiming delegate.\\n     * @param actualIds The IDs of the unlocking schedules that we are trying to claim from on behalf of the recipients.\\n     * @param batchId Emitted as an event reserved for EthSign frontend use. This parameter has no effect on contract execution.\\n     * @param extraData An ERC-5750-esque parameter that's passed to the hook directly.\\n     */\\n    function delegateClaim(\\n        uint256[] calldata actualIds,\\n        uint256 batchId,\\n        bytes[] calldata extraData\\n    ) external virtual;\\n\\n    /**\\n     * @notice Cancels an array of unlocking schedules effective immediately. Tokens not yet claimed but are already unlocked will be tallied.\\n     * @dev Emits `ActualCancelled`. Only callable by the owner.\\n     * @param actualIds The ID of the actual unlocking schedule that we want to cancel.\\n     * @param shouldWipeClaimableBalance If the unlocked and claimable balance of the canceled schedule should be wiped. This is usually used to delete an erroneously created schedule that has already started unlocking.\\n     * @param batchId Emitted as an event reserved for EthSign frontend use. This parameter has no effect on contract execution.\\n     * @param extraData An ERC-5750-esque parameter that's passed to the hook directly.\\n     * @return pendingAmountClaimables Number of tokens eligible to be claimed by the affected stakeholders at the moment of cancellation.\\n     */\\n    function cancel(\\n        uint256[] calldata actualIds,\\n        bool[] calldata shouldWipeClaimableBalance,\\n        uint256 batchId,\\n        bytes[] calldata extraData\\n    ) external virtual returns (uint256[] memory pendingAmountClaimables);\\n\\n    /**\\n     * @notice Sets the hook contract.\\n     * @dev Only callable by the owner.\\n     * @param hook The address of the `ITTHook` hook contract.\\n     */\\n    function setHook(ITTHook hook) external virtual;\\n\\n    /**\\n     * @notice Sets the claiming delegate who can trigger claims on behalf of recipients.\\n     * @dev Only callable by the owner.\\n     */\\n    function setClaimingDelegate(address delegate) external virtual;\\n\\n    /**\\n     * @notice Permanently disables the `cancel()` function.\\n     * @dev Only callable by the owner.\\n     */\\n    function disableCancel() external virtual;\\n\\n    /**\\n     * @notice Permanently disables the hook.\\n     * @dev Only callable by the owner.\\n     */\\n    function disableHook() external virtual;\\n\\n    /**\\n     * @notice Permanently prevents the founder from withdrawing deposits.\\n     * @dev Only callable by the owner.\\n     */\\n    function disableWithdraw() external virtual;\\n\\n    /**\\n     * @return The deployer instance associated with this Unlocker.\\n     */\\n    function deployer() external view virtual returns (ITTUDeployer);\\n\\n    /**\\n     * @return The FutureToken instance associated with this Unlocker.\\n     */\\n    function futureToken() external view virtual returns (ITTFutureTokenV2);\\n\\n    /**\\n     * @return The external hook associated with this Unlocker.\\n     */\\n    function hook() external view virtual returns (ITTHook);\\n\\n    /**\\n     * @return The claiming delegate who can trigger claims on behalf of schedule recipients.\\n     */\\n    function claimingDelegate() external view virtual returns (address);\\n\\n    /**\\n     * @return If the founder is allowed to cancel schedules.\\n     */\\n    function isCancelable() external view virtual returns (bool);\\n\\n    /**\\n     * @return If the founder can attach external hooks to function calls.\\n     */\\n    function isHookable() external view virtual returns (bool);\\n\\n    /**\\n     * @return If the founder can withdraw deposited but unclaimed tokens.\\n     */\\n    function isWithdrawable() external view virtual returns (bool);\\n\\n    /**\\n     * @param actualId The canceled schedule ID.\\n     * @return The amount of tokens from canceled schedules that have been unlocked but unclaimed by the stakeholder.\\n     */\\n    function pendingAmountClaimableForCancelledActuals(\\n        uint256 actualId\\n    ) external view virtual returns (uint256);\\n\\n    /**\\n     * @notice To decode in JS, use:\\n     * ```js\\n     *  ethers.utils.defaultAbiCoder.decode(\\n     *      ['uint256[]', 'uint256', 'uint256[]', 'uint256[]', 'bool'],\\n     *      encodedPreset\\n     *  )\\n     * ```\\n     * @param presetId The ID of the preset we are trying to read.\\n     * @return An ABI-encoded `Preset`, as nested objects cannot be returned directly in Solidity.\\n     */\\n    function getEncodedPreset(\\n        bytes32 presetId\\n    ) external view virtual returns (bytes memory);\\n\\n    /**\\n     * @return The basis point precision of this Unlocker.\\n     */\\n    function BIPS_PRECISION() external pure virtual returns (uint256);\\n\\n    /**\\n     * @notice Calculates the amount of unlocked tokens that have yet to be claimed in an actual unlocking schedule.\\n     * @dev This is the most complex part of the smart contract. Quite a bit of calculations are performed here.\\n     * @param actualId The ID of the actual unlocking schedule that we are working with.\\n     * @return deltaAmountClaimable Amount of tokens claimable right now.\\n     * @return updatedAmountClaimed New total amount of tokens claimed. This is the sum of all previously claimed tokens and `deltaAmountClaimable`.\\n     */\\n    function calculateAmountClaimable(\\n        uint256 actualId\\n    )\\n        public\\n        view\\n        virtual\\n        returns (uint256 deltaAmountClaimable, uint256 updatedAmountClaimed);\\n\\n    /**\\n     * @notice Simulates the amount of unlocked tokens that have yet to be claimed at a specific time in an actual unlocking schedule.\\n     * @dev This is the most complex part of the smart contract. Quite a bit of calculations are performed here.\\n     * @param actualId The ID of the actual unlocking schedule that we are working with.\\n     * @param claimTimestampAbsolute The simulated time of claim.\\n     * @return deltaAmountClaimable Amount of tokens claimable right now.\\n     * @return updatedAmountClaimed New total amount of tokens claimed. This is the sum of all previously claimed tokens and `deltaAmountClaimable`.\\n     */\\n    function simulateAmountClaimable(\\n        uint256 actualId,\\n        uint256 claimTimestampAbsolute\\n    )\\n        public\\n        view\\n        virtual\\n        returns (uint256 deltaAmountClaimable, uint256 updatedAmountClaimed);\\n}\\n\",\"keccak256\":\"0xa64834c3d667e47825449c2d80e504b5bec45adf51cf6890aa4b9dfca0c8f858\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IVersionable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title IVersionable\\n * @author Jack Xu @ EthSign\\n * @dev This interface is implemented by all major TokenTable contracts to keep track of their versioning for upgrade compatibility checks.\\n */\\ninterface IVersionable {\\n    function version() external pure returns (string memory);\\n}\\n\",\"keccak256\":\"0x89c6315f70b485eb57df23c9c2cb23bd21a716a07af4384a091cbcf415f8b74a\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/TokenTableUnlockerV2DataModels.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title TokenTableUnlockerV2DataModels.Preset\\n * @author Jack Xu @ EthSign\\n * @notice A `Preset` is an unlocking schedule template that contains information that's shared across all stakeholders within a single round.\\n *\\n * In this system, cliff unlocks are considered linear as well. This enables us to mix and match cliffs and linears at will, providing full customizability. Cliff waiting periods have a linear bip of 0 and cliff unlocking moments have a duration of 1 second.\\n *\\n * Note that all relative timestamps are relative to the absolute start timestamp. Absolute timestamps are standard UNIX epoch timestamps in seconds.\\n *\\n * `linearStartTimestampsRelative`: An array of start timestamps for each linear segment.\\n * `linearEndTimestampRelative`: The timestamp that marks the end of the final linear segment.\\n * `linearBips`: The basis point that is unlocked for each linear segment. Must add up to `TokenTableUnlockerV2.BIPS_PRECISION()`.\\n * `numOfUnlocksForEachLinear`: The number of unlocks within each respective linear segment.\\n * `stream`: If the tokens should unlock as a stream instead of a cliff at the end of linear segment subdivision.\\n */\\nstruct Preset {\\n    uint256[] linearStartTimestampsRelative;\\n    uint256 linearEndTimestampRelative;\\n    uint256[] linearBips;\\n    uint256[] numOfUnlocksForEachLinear;\\n    bool stream;\\n}\\n\\n/**\\n * @title TokenTableUnlockerV2DataModels.Actual\\n * @author Jack Xu @ EthSign\\n * @notice An `Actual` is an actual unlocking schedule for a single stakeholder and builds on top of an existing preset. An actual contains information that is different from one stakeholder to the next.\\n *\\n * `presetId`: The ID of the `Preset` that this `Actual` references.\\n * `startTimestampAbsolute`: The timestamp of when this unlocking schedule actually starts.\\n * `amountClaimed`: The amount of tokens that have already been claimed by the recipient.\\n * `totalAmount`: The maximum amount of tokens that the recipient can claim throughout the entire schedule.\\n */\\nstruct Actual {\\n    bytes32 presetId;\\n    uint256 startTimestampAbsolute;\\n    uint256 amountClaimed;\\n    uint256 totalAmount;\\n}\\n\",\"keccak256\":\"0xb31ad200fb82dcb8de7a653b57d01e33e73d12f6b1c13711ef11c09af99b46b5\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/Clones.sol)\\n// solhint-disable\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(\\n                0x00,\\n                or(\\n                    shr(0xe8, shl(0x60, implementation)),\\n                    0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000\\n                )\\n            )\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(\\n                0x20,\\n                or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3)\\n            )\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(\\n        address implementation,\\n        bytes32 salt\\n    ) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(\\n                0x00,\\n                or(\\n                    shr(0xe8, shl(0x60, implementation)),\\n                    0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000\\n                )\\n            )\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(\\n                0x20,\\n                or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3)\\n            )\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt\\n    ) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x5e2fa70be4630522da28a347d2722664690a4a2d9900a3510c54273741efe5c7\",\"license\":\"MIT\"},\"contracts/proxy/TTUDeployerLite.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport {ITTUDeployer} from \\\"../interfaces/ITTUDeployer.sol\\\";\\nimport {TTUV2BeaconManager} from \\\"./TTUV2BeaconManager.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {ITokenTableUnlockerV2} from \\\"../interfaces/ITokenTableUnlockerV2.sol\\\";\\nimport {ITTFutureTokenV2} from \\\"../interfaces/ITTFutureTokenV2.sol\\\";\\nimport {ITTTrackerTokenV2} from \\\"../interfaces/ITTTrackerTokenV2.sol\\\";\\nimport {ITTUFeeCollector} from \\\"../interfaces/ITTUFeeCollector.sol\\\";\\nimport {BeaconProxy} from \\\"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\\\";\\nimport {Clones} from \\\"../libraries/Clones.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IVersionable} from \\\"../interfaces/IVersionable.sol\\\";\\n\\ncontract TTUDeployerLite is ITTUDeployer, Ownable, IVersionable {\\n    TTUV2BeaconManager public beaconManager;\\n    ITTUFeeCollector public override feeCollector;\\n    mapping(string => bool) public registry;\\n\\n    constructor() Ownable(_msgSender()) {}\\n\\n    function setBeaconManager(\\n        TTUV2BeaconManager _beaconManager\\n    ) external onlyOwner {\\n        beaconManager = _beaconManager;\\n    }\\n\\n    function setFeeCollector(\\n        ITTUFeeCollector feeCollector_\\n    ) external onlyOwner {\\n        feeCollector = feeCollector_;\\n        emit FeeCollectorChanged(address(feeCollector));\\n    }\\n\\n    function deployTTSuite(\\n        address projectToken,\\n        string calldata projectId,\\n        bool isUpgradeable,\\n        bool isTransferable,\\n        bool isCancelable,\\n        bool isHookable,\\n        bool isWithdrawable\\n    )\\n        external\\n        returns (ITokenTableUnlockerV2, ITTFutureTokenV2, ITTTrackerTokenV2)\\n    {\\n        if (registry[projectId]) revert AlreadyDeployed();\\n        registry[projectId] = true;\\n\\n        ITTFutureTokenV2 futureToken;\\n        ITokenTableUnlockerV2 unlocker;\\n        ITTTrackerTokenV2 trackerToken;\\n        if (!isUpgradeable) {\\n            futureToken = ITTFutureTokenV2(\\n                Clones.clone(beaconManager.futureTokenBeacon().implementation())\\n            );\\n            futureToken.initialize(projectToken, isTransferable);\\n            unlocker = ITokenTableUnlockerV2(\\n                Clones.clone(beaconManager.unlockerBeacon().implementation())\\n            );\\n            unlocker.initialize(\\n                projectToken,\\n                address(futureToken),\\n                address(this),\\n                isCancelable,\\n                isHookable,\\n                isWithdrawable\\n            );\\n            trackerToken = ITTTrackerTokenV2(\\n                Clones.clone(\\n                    beaconManager.trackerTokenBeacon().implementation()\\n                )\\n            );\\n            trackerToken.initialize(address(unlocker));\\n        } else {\\n            futureToken = ITTFutureTokenV2(\\n                address(\\n                    new BeaconProxy(\\n                        address(beaconManager.futureTokenBeacon()),\\n                        abi.encodeWithSelector(\\n                            ITTFutureTokenV2.initialize.selector,\\n                            projectToken,\\n                            isTransferable\\n                        )\\n                    )\\n                )\\n            );\\n            unlocker = ITokenTableUnlockerV2(\\n                address(\\n                    new BeaconProxy(\\n                        address(beaconManager.unlockerBeacon()),\\n                        abi.encodeWithSelector(\\n                            ITokenTableUnlockerV2.initialize.selector,\\n                            projectToken,\\n                            futureToken,\\n                            this,\\n                            isCancelable,\\n                            isHookable,\\n                            isWithdrawable\\n                        )\\n                    )\\n                )\\n            );\\n            trackerToken = ITTTrackerTokenV2(\\n                address(\\n                    new BeaconProxy(\\n                        address(beaconManager.trackerTokenBeacon()),\\n                        abi.encodeWithSelector(\\n                            ITTTrackerTokenV2.initialize.selector,\\n                            address(unlocker)\\n                        )\\n                    )\\n                )\\n            );\\n        }\\n        unlocker.transferOwnership(msg.sender);\\n        futureToken.setAuthorizedMinterSingleUse(address(unlocker));\\n        emit TokenTableSuiteDeployed(\\n            msg.sender,\\n            projectId,\\n            address(unlocker),\\n            address(futureToken),\\n            address(trackerToken)\\n        );\\n        return (unlocker, futureToken, trackerToken);\\n    }\\n\\n    function version() external pure returns (string memory) {\\n        return \\\"2.5.0\\\";\\n    }\\n}\\n\",\"keccak256\":\"0x11710ac84a5bb898b4461111e63f1415267e5dc36b969b0a02682c893ecb9c46\",\"license\":\"UNLICENSED\"},\"contracts/proxy/TTUV2BeaconManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.20;\\n\\nimport {UpgradeableBeacon} from \\\"@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IVersionable} from \\\"../interfaces/IVersionable.sol\\\";\\n\\n/**\\n * @title TTUV2BeaconManager\\n * @author Jack Xu @ EthSign\\n * @dev This contract manages the upgradeable beacons that we use to seamlessly\\n * upgrade TokenTableUnlocker, TTFutureToken, and TTTrackerToken on behalf of\\n * our users in the future.\\n *\\n * This contract should be deployed using TTUDeployer.\\n */\\ncontract TTUV2BeaconManager is Ownable, IVersionable {\\n    UpgradeableBeacon public immutable unlockerBeacon;\\n    UpgradeableBeacon public immutable futureTokenBeacon;\\n    UpgradeableBeacon public immutable trackerTokenBeacon;\\n\\n    constructor(\\n        address unlockerImpl,\\n        address futureTokenImpl,\\n        address trackerTokenImpl\\n    ) Ownable(_msgSender()) {\\n        unlockerBeacon = new UpgradeableBeacon(unlockerImpl, address(this));\\n        futureTokenBeacon = new UpgradeableBeacon(\\n            futureTokenImpl,\\n            address(this)\\n        );\\n        trackerTokenBeacon = new UpgradeableBeacon(\\n            trackerTokenImpl,\\n            address(this)\\n        );\\n    }\\n\\n    function upgradeUnlocker(address newImpl) external onlyOwner {\\n        unlockerBeacon.upgradeTo(newImpl);\\n    }\\n\\n    function upgradeFutureToken(address newImpl) external onlyOwner {\\n        futureTokenBeacon.upgradeTo(newImpl);\\n    }\\n\\n    function upgradePreviewToken(address newImpl) external onlyOwner {\\n        trackerTokenBeacon.upgradeTo(newImpl);\\n    }\\n\\n    function version() external pure returns (string memory) {\\n        return \\\"2.0.1\\\";\\n    }\\n}\\n\",\"keccak256\":\"0x8e884de39f83d9f53039ec69bf5e441e22941fd4b6d67e6647faa889f32f052d\",\"license\":\"UNLICENSED\"},\"erc721a-upgradeable/contracts/IERC721AUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Interface of ERC721A.\\n */\\ninterface IERC721AUpgradeable {\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error ApprovalCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error ApprovalQueryForNonexistentToken();\\n\\n    /**\\n     * Cannot query the balance for the zero address.\\n     */\\n    error BalanceQueryForZeroAddress();\\n\\n    /**\\n     * Cannot mint to the zero address.\\n     */\\n    error MintToZeroAddress();\\n\\n    /**\\n     * The quantity of tokens minted must be more than zero.\\n     */\\n    error MintZeroQuantity();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error OwnerQueryForNonexistentToken();\\n\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error TransferCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token must be owned by `from`.\\n     */\\n    error TransferFromIncorrectOwner();\\n\\n    /**\\n     * Cannot safely transfer to a contract that does not implement the\\n     * ERC721Receiver interface.\\n     */\\n    error TransferToNonERC721ReceiverImplementer();\\n\\n    /**\\n     * Cannot transfer to the zero address.\\n     */\\n    error TransferToZeroAddress();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error URIQueryForNonexistentToken();\\n\\n    /**\\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\\n     */\\n    error MintERC2309QuantityExceedsLimit();\\n\\n    /**\\n     * The `extraData` cannot be set on an unintialized ownership slot.\\n     */\\n    error OwnershipNotInitializedForExtraData();\\n\\n    // =============================================================\\n    //                            STRUCTS\\n    // =============================================================\\n\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Stores the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n        // Arbitrary data similar to `startTimestamp` that can be set via {_extraData}.\\n        uint24 extraData;\\n    }\\n\\n    // =============================================================\\n    //                         TOKEN COUNTERS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the total number of tokens in existence.\\n     * Burned tokens will reduce the count.\\n     * To get the total number of tokens minted, please see {_totalMinted}.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    // =============================================================\\n    //                            IERC165\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    // =============================================================\\n    //                            IERC721\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables\\n     * (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in `owner`'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`,\\n     * checking first that contract recipients are aware of the ERC721 protocol\\n     * to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move\\n     * this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external payable;\\n\\n    /**\\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom}\\n     * whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the\\n     * zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external payable;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom}\\n     * for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    // =============================================================\\n    //                        IERC721Metadata\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    // =============================================================\\n    //                           IERC2309\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId`\\n     * (inclusive) is transferred from `from` to `to`, as defined in the\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard.\\n     *\\n     * See {_mintERC2309} for more details.\\n     */\\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\\n}\\n\",\"keccak256\":\"0xa8e2bf92476033e48df3911783487b46bcd20f6490a6fdc8c93ca7a0e94bca20\",\"license\":\"MIT\"},\"erc721a-upgradeable/contracts/extensions/IERC721AQueryableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport '../IERC721AUpgradeable.sol';\\n\\n/**\\n * @dev Interface of ERC721AQueryable.\\n */\\ninterface IERC721AQueryableUpgradeable is IERC721AUpgradeable {\\n    /**\\n     * Invalid query range (`start` >= `stop`).\\n     */\\n    error InvalidQueryRange();\\n\\n    /**\\n     * @dev Returns the `TokenOwnership` struct at `tokenId` without reverting.\\n     *\\n     * If the `tokenId` is out of bounds:\\n     *\\n     * - `addr = address(0)`\\n     * - `startTimestamp = 0`\\n     * - `burned = false`\\n     * - `extraData = 0`\\n     *\\n     * If the `tokenId` is burned:\\n     *\\n     * - `addr = <Address of owner before token was burned>`\\n     * - `startTimestamp = <Timestamp when token was burned>`\\n     * - `burned = true`\\n     * - `extraData = <Extra data when token was burned>`\\n     *\\n     * Otherwise:\\n     *\\n     * - `addr = <Address of owner>`\\n     * - `startTimestamp = <Timestamp of start of ownership>`\\n     * - `burned = false`\\n     * - `extraData = <Extra data at start of ownership>`\\n     */\\n    function explicitOwnershipOf(uint256 tokenId) external view returns (TokenOwnership memory);\\n\\n    /**\\n     * @dev Returns an array of `TokenOwnership` structs at `tokenIds` in order.\\n     * See {ERC721AQueryable-explicitOwnershipOf}\\n     */\\n    function explicitOwnershipsOf(uint256[] memory tokenIds) external view returns (TokenOwnership[] memory);\\n\\n    /**\\n     * @dev Returns an array of token IDs owned by `owner`,\\n     * in the range [`start`, `stop`)\\n     * (i.e. `start <= tokenId < stop`).\\n     *\\n     * This function allows for tokens to be queried if the collection\\n     * grows too big for a single call of {ERC721AQueryable-tokensOfOwner}.\\n     *\\n     * Requirements:\\n     *\\n     * - `start < stop`\\n     */\\n    function tokensOfOwnerIn(\\n        address owner,\\n        uint256 start,\\n        uint256 stop\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Returns an array of token IDs owned by `owner`.\\n     *\\n     * This function scans the ownership mapping and is O(`totalSupply`) in complexity.\\n     * It is meant to be called off-chain.\\n     *\\n     * See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into\\n     * multiple smaller scans if the collection is large enough to cause\\n     * an out-of-gas error (10K collections should be fine).\\n     */\\n    function tokensOfOwner(address owner) external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0xf83cc229afc5ac227be4e372ab6a680201b8b25773351c1cd0a588b1b6e53821\",\"license\":\"MIT\"},\"erc721a-upgradeable/contracts/interfaces/IERC721AQueryableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport '../extensions/IERC721AQueryableUpgradeable.sol';\\n\",\"keccak256\":\"0xacb0462122256671a3814a2b74c1f28c64f4a322cad552a62ef607ca558df27c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50338061003757604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b61004081610046565b50610096565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6114f8806100a56000396000f3fe60806040523480156200001157600080fd5b5060043610620000ab5760003560e01c806392a296c9116200006e57806392a296c9146200016a578063a42dce8014620001ac578063c415b95c14620001c3578063d30b5ef414620001d7578063f2fde38b14620001ee57600080fd5b80630a3a84fa14620000b057806354fd4d5014620000f65780635a4fba02146200011f578063715018a6146200014c5780638da5cb5b1462000158575b600080fd5b620000c7620000c136600462000bcf565b62000205565b604080516001600160a01b03948516815292841660208401529216918101919091526060015b60405180910390f35b60408051808201825260058152640322e352e360dc1b60208201529051620000ed919062000d00565b60015462000133906001600160a01b031681565b6040516001600160a01b039091168152602001620000ed565b6200015662000995565b005b6000546001600160a01b031662000133565b6200019b6200017b36600462000d32565b805160208183018101805160038252928201919093012091525460ff1681565b6040519015158152602001620000ed565b62000156620001bd36600462000ded565b620009ad565b60025462000133906001600160a01b031681565b62000156620001e836600462000ded565b62000a0b565b62000156620001ff36600462000ded565b62000a37565b600080600060038a8a6040516200021e92919062000e0d565b9081526040519081900360200190205460ff1615620002505760405163a6ef0ba160e01b815260040160405180910390fd5b600160038b8b6040516200026692919062000e0d565b908152604051908190036020019020805491151560ff19909216919091179055600080808a6200056d5760015460408051631e3997bf60e21b815290516200036d926001600160a01b0316916378e65efc9160048083019260209291908290030181865afa158015620002dd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000303919062000e1d565b6001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000341573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000367919062000e1d565b62000a7f565b9250826001600160a01b031663400ada758f8c6040518363ffffffff1660e01b8152600401620003b49291906001600160a01b039290921682521515602082015260400190565b600060405180830381600087803b158015620003cf57600080fd5b505af1158015620003e4573d6000803e3d6000fd5b5050505062000440600160009054906101000a90046001600160a01b03166001600160a01b031663ec5319876040518163ffffffff1660e01b8152600401602060405180830381865afa158015620002dd573d6000803e3d6000fd5b9150816001600160a01b031663d597c4548f85308d8d8d6040518763ffffffff1660e01b81526004016200047a9695949392919062000e3d565b600060405180830381600087803b1580156200049557600080fd5b505af1158015620004aa573d6000803e3d6000fd5b5050505062000506600160009054906101000a90046001600160a01b03166001600160a01b031663d63ea2c56040518163ffffffff1660e01b8152600401602060405180830381865afa158015620002dd573d6000803e3d6000fd5b60405163189acdbd60e31b81526001600160a01b0384811660048301529192509082169063c4d66de890602401600060405180830381600087803b1580156200054e57600080fd5b505af115801562000563573d6000803e3d6000fd5b5050505062000887565b600160009054906101000a90046001600160a01b03166001600160a01b03166378e65efc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015620005c1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620005e7919062000e1d565b63400ada7560e01b8f8c604051602401620006199291906001600160a01b039290921682521515602082015260400190565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051620006589062000b9a565b6200066592919062000e78565b604051809103906000f08015801562000682573d6000803e3d6000fd5b509250600160009054906101000a90046001600160a01b03166001600160a01b031663ec5319876040518163ffffffff1660e01b8152600401602060405180830381865afa158015620006d9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006ff919062000e1d565b63d597c45460e01b8f85308d8d8d604051602401620007249695949392919062000e3d565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051620007639062000b9a565b6200077092919062000e78565b604051809103906000f0801580156200078d573d6000803e3d6000fd5b509150600160009054906101000a90046001600160a01b03166001600160a01b031663d63ea2c56040518163ffffffff1660e01b8152600401602060405180830381865afa158015620007e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200080a919062000e1d565b604080516001600160a01b03851660248083019190915282518083039091018152604490910182526020810180516001600160e01b031663189acdbd60e31b1790529051620008599062000b9a565b6200086692919062000e78565b604051809103906000f08015801562000883573d6000803e3d6000fd5b5090505b60405163f2fde38b60e01b81523360048201526001600160a01b0383169063f2fde38b90602401600060405180830381600087803b158015620008c957600080fd5b505af1158015620008de573d6000803e3d6000fd5b5050604051630ab148ff60e31b81526001600160a01b0385811660048301528616925063558a47f89150602401600060405180830381600087803b1580156200092657600080fd5b505af11580156200093b573d6000803e3d6000fd5b505050507f17df396a3d7d1aee90dda3191f7e75531702775925951ea64827321bbc37412c338e8e8587866040516200097a9695949392919062000ea6565b60405180910390a1909d919c509a5098505050505050505050565b6200099f62000b1b565b620009ab600062000b4a565b565b620009b762000b1b565b600280546001600160a01b0319166001600160a01b0383169081179091556040519081527f9c1996a14d26c3ecd833c10222d012447ef07b09b15000f3a34318ff039c0bdc9060200160405180910390a150565b62000a1562000b1b565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b62000a4162000b1b565b6001600160a01b03811662000a7157604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b62000a7c8162000b4a565b50565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008260601b60e81c176000526e5af43d82803e903d91602b57fd5bf38260781b17602052603760096000f090506001600160a01b03811662000b165760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b604482015260640162000a68565b919050565b6000546001600160a01b03163314620009ab5760405163118cdaa760e01b815233600482015260240162000a68565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6105bf8062000f0483390190565b6001600160a01b038116811462000a7c57600080fd5b8035801515811462000b1657600080fd5b60008060008060008060008060e0898b03121562000bec57600080fd5b883562000bf98162000ba8565b9750602089013567ffffffffffffffff8082111562000c1757600080fd5b818b0191508b601f83011262000c2c57600080fd5b81358181111562000c3c57600080fd5b8c602082850101111562000c4f57600080fd5b60208301995080985050505062000c6960408a0162000bbe565b945062000c7960608a0162000bbe565b935062000c8960808a0162000bbe565b925062000c9960a08a0162000bbe565b915062000ca960c08a0162000bbe565b90509295985092959890939650565b6000815180845260005b8181101562000ce05760208185018101518683018201520162000cc2565b506000602082860101526020601f19601f83011685010191505092915050565b60208152600062000d15602083018462000cb8565b9392505050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121562000d4557600080fd5b813567ffffffffffffffff8082111562000d5e57600080fd5b818401915084601f83011262000d7357600080fd5b81358181111562000d885762000d8862000d1c565b604051601f8201601f19908116603f0116810190838211818310171562000db35762000db362000d1c565b8160405282815287602084870101111562000dcd57600080fd5b826020860160208301376000928101602001929092525095945050505050565b60006020828403121562000e0057600080fd5b813562000d158162000ba8565b8183823760009101908152919050565b60006020828403121562000e3057600080fd5b815162000d158162000ba8565b6001600160a01b039687168152948616602086015292909416604084015215156060830152911515608082015290151560a082015260c00190565b6001600160a01b038316815260406020820181905260009062000e9e9083018462000cb8565b949350505050565b6001600160a01b03878116825260a0602083018190528201869052600090868860c0850137600060c0888501810191909152958116604084015293841660608301525091166080820152601f909201601f1916909101019291505056fe60a06040526040516105bf3803806105bf83398101604081905261002291610387565b61002c828261003e565b506001600160a01b031660805261047e565b610047826100fe565b6040516001600160a01b038316907f1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e90600090a28051156100f2576100ed826001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156100c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100e79190610447565b82610211565b505050565b6100fa610288565b5050565b806001600160a01b03163b60000361013957604051631933b43b60e21b81526001600160a01b03821660048201526024015b60405180910390fd5b807fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d5080546001600160a01b0319166001600160a01b0392831617905560408051635c60da1b60e01b81529051600092841691635c60da1b9160048083019260209291908290030181865afa1580156101b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101d99190610447565b9050806001600160a01b03163b6000036100fa57604051634c9c8ce360e01b81526001600160a01b0382166004820152602401610130565b6060600080846001600160a01b03168460405161022e9190610462565b600060405180830381855af49150503d8060008114610269576040519150601f19603f3d011682016040523d82523d6000602084013e61026e565b606091505b50909250905061027f8583836102a9565b95945050505050565b34156102a75760405163b398979f60e01b815260040160405180910390fd5b565b6060826102be576102b982610308565b610301565b81511580156102d557506001600160a01b0384163b155b156102fe57604051639996b31560e01b81526001600160a01b0385166004820152602401610130565b50805b9392505050565b8051156103185780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b80516001600160a01b038116811461034857600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b8381101561037e578181015183820152602001610366565b50506000910152565b6000806040838503121561039a57600080fd5b6103a383610331565b60208401519092506001600160401b03808211156103c057600080fd5b818501915085601f8301126103d457600080fd5b8151818111156103e6576103e661034d565b604051601f8201601f19908116603f0116810190838211818310171561040e5761040e61034d565b8160405282815288602084870101111561042757600080fd5b610438836020830160208801610363565b80955050505050509250929050565b60006020828403121561045957600080fd5b61030182610331565b60008251610474818460208701610363565b9190910192915050565b6080516101276104986000396000601e01526101276000f3fe6080604052600a600c565b005b60186014601a565b60a0565b565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156079573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190609b919060c3565b905090565b3660008037600080366000845af43d6000803e80801560be573d6000f35b3d6000fd5b60006020828403121560d457600080fd5b81516001600160a01b038116811460ea57600080fd5b939250505056fea264697066735822122037166f4f2d476023197930b53ff67240236749f00fc39a993769be560cecebb764736f6c63430008140033a2646970667358221220d4732fc63b5a90f383e9be6f793e58a1b1bdeade81ed54d1edda0d47b8a8f5b264736f6c63430008140033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000ab5760003560e01c806392a296c9116200006e57806392a296c9146200016a578063a42dce8014620001ac578063c415b95c14620001c3578063d30b5ef414620001d7578063f2fde38b14620001ee57600080fd5b80630a3a84fa14620000b057806354fd4d5014620000f65780635a4fba02146200011f578063715018a6146200014c5780638da5cb5b1462000158575b600080fd5b620000c7620000c136600462000bcf565b62000205565b604080516001600160a01b03948516815292841660208401529216918101919091526060015b60405180910390f35b60408051808201825260058152640322e352e360dc1b60208201529051620000ed919062000d00565b60015462000133906001600160a01b031681565b6040516001600160a01b039091168152602001620000ed565b6200015662000995565b005b6000546001600160a01b031662000133565b6200019b6200017b36600462000d32565b805160208183018101805160038252928201919093012091525460ff1681565b6040519015158152602001620000ed565b62000156620001bd36600462000ded565b620009ad565b60025462000133906001600160a01b031681565b62000156620001e836600462000ded565b62000a0b565b62000156620001ff36600462000ded565b62000a37565b600080600060038a8a6040516200021e92919062000e0d565b9081526040519081900360200190205460ff1615620002505760405163a6ef0ba160e01b815260040160405180910390fd5b600160038b8b6040516200026692919062000e0d565b908152604051908190036020019020805491151560ff19909216919091179055600080808a6200056d5760015460408051631e3997bf60e21b815290516200036d926001600160a01b0316916378e65efc9160048083019260209291908290030181865afa158015620002dd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000303919062000e1d565b6001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000341573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000367919062000e1d565b62000a7f565b9250826001600160a01b031663400ada758f8c6040518363ffffffff1660e01b8152600401620003b49291906001600160a01b039290921682521515602082015260400190565b600060405180830381600087803b158015620003cf57600080fd5b505af1158015620003e4573d6000803e3d6000fd5b5050505062000440600160009054906101000a90046001600160a01b03166001600160a01b031663ec5319876040518163ffffffff1660e01b8152600401602060405180830381865afa158015620002dd573d6000803e3d6000fd5b9150816001600160a01b031663d597c4548f85308d8d8d6040518763ffffffff1660e01b81526004016200047a9695949392919062000e3d565b600060405180830381600087803b1580156200049557600080fd5b505af1158015620004aa573d6000803e3d6000fd5b5050505062000506600160009054906101000a90046001600160a01b03166001600160a01b031663d63ea2c56040518163ffffffff1660e01b8152600401602060405180830381865afa158015620002dd573d6000803e3d6000fd5b60405163189acdbd60e31b81526001600160a01b0384811660048301529192509082169063c4d66de890602401600060405180830381600087803b1580156200054e57600080fd5b505af115801562000563573d6000803e3d6000fd5b5050505062000887565b600160009054906101000a90046001600160a01b03166001600160a01b03166378e65efc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015620005c1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620005e7919062000e1d565b63400ada7560e01b8f8c604051602401620006199291906001600160a01b039290921682521515602082015260400190565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051620006589062000b9a565b6200066592919062000e78565b604051809103906000f08015801562000682573d6000803e3d6000fd5b509250600160009054906101000a90046001600160a01b03166001600160a01b031663ec5319876040518163ffffffff1660e01b8152600401602060405180830381865afa158015620006d9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006ff919062000e1d565b63d597c45460e01b8f85308d8d8d604051602401620007249695949392919062000e3d565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051620007639062000b9a565b6200077092919062000e78565b604051809103906000f0801580156200078d573d6000803e3d6000fd5b509150600160009054906101000a90046001600160a01b03166001600160a01b031663d63ea2c56040518163ffffffff1660e01b8152600401602060405180830381865afa158015620007e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200080a919062000e1d565b604080516001600160a01b03851660248083019190915282518083039091018152604490910182526020810180516001600160e01b031663189acdbd60e31b1790529051620008599062000b9a565b6200086692919062000e78565b604051809103906000f08015801562000883573d6000803e3d6000fd5b5090505b60405163f2fde38b60e01b81523360048201526001600160a01b0383169063f2fde38b90602401600060405180830381600087803b158015620008c957600080fd5b505af1158015620008de573d6000803e3d6000fd5b5050604051630ab148ff60e31b81526001600160a01b0385811660048301528616925063558a47f89150602401600060405180830381600087803b1580156200092657600080fd5b505af11580156200093b573d6000803e3d6000fd5b505050507f17df396a3d7d1aee90dda3191f7e75531702775925951ea64827321bbc37412c338e8e8587866040516200097a9695949392919062000ea6565b60405180910390a1909d919c509a5098505050505050505050565b6200099f62000b1b565b620009ab600062000b4a565b565b620009b762000b1b565b600280546001600160a01b0319166001600160a01b0383169081179091556040519081527f9c1996a14d26c3ecd833c10222d012447ef07b09b15000f3a34318ff039c0bdc9060200160405180910390a150565b62000a1562000b1b565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b62000a4162000b1b565b6001600160a01b03811662000a7157604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b62000a7c8162000b4a565b50565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008260601b60e81c176000526e5af43d82803e903d91602b57fd5bf38260781b17602052603760096000f090506001600160a01b03811662000b165760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b604482015260640162000a68565b919050565b6000546001600160a01b03163314620009ab5760405163118cdaa760e01b815233600482015260240162000a68565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6105bf8062000f0483390190565b6001600160a01b038116811462000a7c57600080fd5b8035801515811462000b1657600080fd5b60008060008060008060008060e0898b03121562000bec57600080fd5b883562000bf98162000ba8565b9750602089013567ffffffffffffffff8082111562000c1757600080fd5b818b0191508b601f83011262000c2c57600080fd5b81358181111562000c3c57600080fd5b8c602082850101111562000c4f57600080fd5b60208301995080985050505062000c6960408a0162000bbe565b945062000c7960608a0162000bbe565b935062000c8960808a0162000bbe565b925062000c9960a08a0162000bbe565b915062000ca960c08a0162000bbe565b90509295985092959890939650565b6000815180845260005b8181101562000ce05760208185018101518683018201520162000cc2565b506000602082860101526020601f19601f83011685010191505092915050565b60208152600062000d15602083018462000cb8565b9392505050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121562000d4557600080fd5b813567ffffffffffffffff8082111562000d5e57600080fd5b818401915084601f83011262000d7357600080fd5b81358181111562000d885762000d8862000d1c565b604051601f8201601f19908116603f0116810190838211818310171562000db35762000db362000d1c565b8160405282815287602084870101111562000dcd57600080fd5b826020860160208301376000928101602001929092525095945050505050565b60006020828403121562000e0057600080fd5b813562000d158162000ba8565b8183823760009101908152919050565b60006020828403121562000e3057600080fd5b815162000d158162000ba8565b6001600160a01b039687168152948616602086015292909416604084015215156060830152911515608082015290151560a082015260c00190565b6001600160a01b038316815260406020820181905260009062000e9e9083018462000cb8565b949350505050565b6001600160a01b03878116825260a0602083018190528201869052600090868860c0850137600060c0888501810191909152958116604084015293841660608301525091166080820152601f909201601f1916909101019291505056fe60a06040526040516105bf3803806105bf83398101604081905261002291610387565b61002c828261003e565b506001600160a01b031660805261047e565b610047826100fe565b6040516001600160a01b038316907f1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e90600090a28051156100f2576100ed826001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156100c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100e79190610447565b82610211565b505050565b6100fa610288565b5050565b806001600160a01b03163b60000361013957604051631933b43b60e21b81526001600160a01b03821660048201526024015b60405180910390fd5b807fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d5080546001600160a01b0319166001600160a01b0392831617905560408051635c60da1b60e01b81529051600092841691635c60da1b9160048083019260209291908290030181865afa1580156101b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101d99190610447565b9050806001600160a01b03163b6000036100fa57604051634c9c8ce360e01b81526001600160a01b0382166004820152602401610130565b6060600080846001600160a01b03168460405161022e9190610462565b600060405180830381855af49150503d8060008114610269576040519150601f19603f3d011682016040523d82523d6000602084013e61026e565b606091505b50909250905061027f8583836102a9565b95945050505050565b34156102a75760405163b398979f60e01b815260040160405180910390fd5b565b6060826102be576102b982610308565b610301565b81511580156102d557506001600160a01b0384163b155b156102fe57604051639996b31560e01b81526001600160a01b0385166004820152602401610130565b50805b9392505050565b8051156103185780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b80516001600160a01b038116811461034857600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b8381101561037e578181015183820152602001610366565b50506000910152565b6000806040838503121561039a57600080fd5b6103a383610331565b60208401519092506001600160401b03808211156103c057600080fd5b818501915085601f8301126103d457600080fd5b8151818111156103e6576103e661034d565b604051601f8201601f19908116603f0116810190838211818310171561040e5761040e61034d565b8160405282815288602084870101111561042757600080fd5b610438836020830160208801610363565b80955050505050509250929050565b60006020828403121561045957600080fd5b61030182610331565b60008251610474818460208701610363565b9190910192915050565b6080516101276104986000396000601e01526101276000f3fe6080604052600a600c565b005b60186014601a565b60a0565b565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156079573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190609b919060c3565b905090565b3660008037600080366000845af43d6000803e80801560be573d6000f35b3d6000fd5b60006020828403121560d457600080fd5b81516001600160a01b038116811460ea57600080fd5b939250505056fea264697066735822122037166f4f2d476023197930b53ff67240236749f00fc39a993769be560cecebb764736f6c63430008140033a2646970667358221220d4732fc63b5a90f383e9be6f793e58a1b1bdeade81ed54d1edda0d47b8a8f5b264736f6c63430008140033",
  "devdoc": {
    "errors": {
      "AlreadyDeployed()": [
        {
          "details": "0xa6ef0ba1"
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "deployTTSuite(address,string,bool,bool,bool,bool,bool)": {
        "details": "Emits `TokenTableSuiteDeployed`. Throws: `AlreadyDeployed`.",
        "params": {
          "isCancelable": "Allow unlocking schedules to be cancelled in the Unlocker.",
          "isHookable": "Allow Unlocker to call an external hook.",
          "isTransferable": "Allow FutureToken to be transferable.",
          "isUpgradeable": "When set to false, a `Clone` instead of a `BeaconProxy` is created to prevent future upgradeability.",
          "isWithdrawable": "Allow the founder to withdraw deposited funds.",
          "projectId": "A unique projectId, otherwise it will revert.",
          "projectToken": "The project token address."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "feeCollector": {
        "details": "Exposes the fee collector variable.",
        "return": "An instance of the fee collector.",
        "returns": {
          "_0": "An instance of the fee collector."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "deployTTSuite(address,string,bool,bool,bool,bool,bool)": {
        "notice": "Deploys and configures a new set of TokenTable products."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 624,
        "contract": "contracts/proxy/TTUDeployerLite.sol:TTUDeployerLite",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4924,
        "contract": "contracts/proxy/TTUDeployerLite.sol:TTUDeployerLite",
        "label": "beaconManager",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(TTUV2BeaconManager)5357"
      },
      {
        "astId": 4928,
        "contract": "contracts/proxy/TTUDeployerLite.sol:TTUDeployerLite",
        "label": "feeCollector",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ITTUFeeCollector)4394"
      },
      {
        "astId": 4932,
        "contract": "contracts/proxy/TTUDeployerLite.sol:TTUDeployerLite",
        "label": "registry",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_string_memory_ptr,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ITTUFeeCollector)4394": {
        "encoding": "inplace",
        "label": "contract ITTUFeeCollector",
        "numberOfBytes": "20"
      },
      "t_contract(TTUV2BeaconManager)5357": {
        "encoding": "inplace",
        "label": "contract TTUV2BeaconManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_string_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}